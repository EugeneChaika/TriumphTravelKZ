!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function i(t){var e=!!t&&"length"in t&&t.length,i=K.type(t);return"function"!==i&&!K.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e,i){if(K.isFunction(e))return K.grep(t,function(t,s){return!!e.call(t,s,t)!==i});if(e.nodeType)return K.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(ht.test(e))return K.filter(e,t,i);e=K.filter(e,t)}return K.grep(t,function(t){return Q.call(e,t)>-1!==i})}function n(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(){B.removeEventListener("DOMContentLoaded",o),t.removeEventListener("load",o),K.ready()}function r(){this.expando=K.expando+r.uid++}function a(t,e,i){var s;if(void 0===i&&1===t.nodeType)if(s="data-"+e.replace(bt,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(s))){try{i="true"===i||"false"!==i&&("null"===i?null:+i+""===i?+i:xt.test(i)?K.parseJSON(i):i)}catch(t){}wt.set(t,e,i)}else i=void 0;return i}function l(t,e,i,s){var n,o=1,r=20,a=s?function(){return s.cur()}:function(){return K.css(t,e,"")},l=a(),h=i&&i[3]||(K.cssNumber[e]?"":"px"),c=(K.cssNumber[e]||"px"!==h&&+l)&&kt.exec(K.css(t,e));if(c&&c[3]!==h){h=h||c[3],i=i||[],c=+l||1;do{c/=o=o||".5",K.style(t,e,c+h)}while(o!==(o=a()/l)&&1!==o&&--r)}return i&&(c=+c||+l||0,n=i[1]?c+(i[1]+1)*i[2]:+i[2],s&&(s.unit=h,s.start=c,s.end=n)),n}function h(t,e){var i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&K.nodeName(t,e)?K.merge([t],i):i}function c(t,e){for(var i=0,s=t.length;i<s;i++)yt.set(t[i],"globalEval",!e||yt.get(e[i],"globalEval"))}function d(t,e,i,s,n){for(var o,r,a,l,d,u,p=e.createDocumentFragment(),f=[],g=0,m=t.length;g<m;g++)if((o=t[g])||0===o)if("object"===K.type(o))K.merge(f,o.nodeType?[o]:o);else if(Dt.test(o)){for(r=r||p.appendChild(e.createElement("div")),a=($t.exec(o)||["",""])[1].toLowerCase(),l=At[a]||At._default,r.innerHTML=l[1]+K.htmlPrefilter(o)+l[2],u=l[0];u--;)r=r.lastChild;K.merge(f,r.childNodes),(r=p.firstChild).textContent=""}else f.push(e.createTextNode(o));for(p.textContent="",g=0;o=f[g++];)if(s&&K.inArray(o,s)>-1)n&&n.push(o);else if(d=K.contains(o.ownerDocument,o),r=h(p.appendChild(o),"script"),d&&c(r),i)for(u=0;o=r[u++];)Et.test(o.type||"")&&i.push(o);return p}function u(){return!0}function p(){return!1}function f(){try{return B.activeElement}catch(t){}}function g(t,e,i,s,n,o){var r,a;if("object"==typeof e){"string"!=typeof i&&(s=s||i,i=void 0);for(a in e)g(t,a,i,s,e[a],o);return t}if(null==s&&null==n?(n=i,s=i=void 0):null==n&&("string"==typeof i?(n=s,s=void 0):(n=s,s=i,i=void 0)),!1===n)n=p;else if(!n)return t;return 1===o&&(r=n,(n=function(t){return K().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=K.guid++)),t.each(function(){K.event.add(this,e,n,s,i)})}function m(t,e){return K.nodeName(t,"table")&&K.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function v(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function y(t){var e=zt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function w(t,e){var i,s,n,o,r,a,l,h;if(1===e.nodeType){if(yt.hasData(t)&&(o=yt.access(t),r=yt.set(e,o),h=o.events)){delete r.handle,r.events={};for(n in h)for(i=0,s=h[n].length;i<s;i++)K.event.add(e,n,h[n][i])}wt.hasData(t)&&(a=wt.access(t),l=K.extend({},a),wt.set(e,l))}}function x(t,e){var i=e.nodeName.toLowerCase();"input"===i&&_t.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function b(t,e,i,s){e=U.apply([],e);var n,o,r,a,l,c,u=0,p=t.length,f=p-1,g=e[0],m=K.isFunction(g);if(m||p>1&&"string"==typeof g&&!J.checkClone&&Lt.test(g))return t.each(function(n){var o=t.eq(n);m&&(e[0]=g.call(this,n,o.html())),b(o,e,i,s)});if(p&&(n=d(e,t[0].ownerDocument,!1,t,s),o=n.firstChild,1===n.childNodes.length&&(n=o),o||s)){for(a=(r=K.map(h(n,"script"),v)).length;u<p;u++)l=n,u!==f&&(l=K.clone(l,!0,!0),a&&K.merge(r,h(l,"script"))),i.call(t[u],l,u);if(a)for(c=r[r.length-1].ownerDocument,K.map(r,y),u=0;u<a;u++)l=r[u],Et.test(l.type||"")&&!yt.access(l,"globalEval")&&K.contains(c,l)&&(l.src?K._evalUrl&&K._evalUrl(l.src):K.globalEval(l.textContent.replace(Mt,"")))}return t}function T(t,e,i){for(var s,n=e?K.filter(e,t):t,o=0;null!=(s=n[o]);o++)i||1!==s.nodeType||K.cleanData(h(s)),s.parentNode&&(i&&K.contains(s.ownerDocument,s)&&c(h(s,"script")),s.parentNode.removeChild(s));return t}function k(t,e){var i=K(e.createElement(t)).appendTo(e.body),s=K.css(i[0],"display");return i.detach(),s}function C(t){var e=B,i=It[t];return i||("none"!==(i=k(t,e))&&i||((e=(qt=(qt||K("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement))[0].contentDocument).write(),e.close(),i=k(t,e),qt.detach()),It[t]=i),i}function S(t,e,i){var s,n,o,r,a=t.style;return i=i||Ft(t),""!==(r=i?i.getPropertyValue(e)||i[e]:void 0)&&void 0!==r||K.contains(t.ownerDocument,t)||(r=K.style(t,e)),i&&!J.pixelMarginRight()&&Rt.test(r)&&Wt.test(e)&&(s=a.width,n=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=s,a.minWidth=n,a.maxWidth=o),void 0!==r?r+"":r}function _(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function $(t){if(t in Gt)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=Vt.length;i--;)if((t=Vt[i]+e)in Gt)return t}function E(t,e,i){var s=kt.exec(e);return s?Math.max(0,s[2]-(i||0))+(s[3]||"px"):e}function A(t,e,i,s,n){for(var o=i===(s?"border":"content")?4:"width"===e?1:0,r=0;o<4;o+=2)"margin"===i&&(r+=K.css(t,i+Ct[o],!0,n)),s?("content"===i&&(r-=K.css(t,"padding"+Ct[o],!0,n)),"margin"!==i&&(r-=K.css(t,"border"+Ct[o]+"Width",!0,n))):(r+=K.css(t,"padding"+Ct[o],!0,n),"padding"!==i&&(r+=K.css(t,"border"+Ct[o]+"Width",!0,n)));return r}function D(t,e,i){var s=!0,n="width"===e?t.offsetWidth:t.offsetHeight,o=Ft(t),r="border-box"===K.css(t,"boxSizing",!1,o);if(n<=0||null==n){if(((n=S(t,e,o))<0||null==n)&&(n=t.style[e]),Rt.test(n))return n;s=r&&(J.boxSizingReliable()||n===t.style[e]),n=parseFloat(n)||0}return n+A(t,e,i||(r?"border":"content"),s,o)+"px"}function j(t,e){for(var i,s,n,o=[],r=0,a=t.length;r<a;r++)(s=t[r]).style&&(o[r]=yt.get(s,"olddisplay"),i=s.style.display,e?(o[r]||"none"!==i||(s.style.display=""),""===s.style.display&&St(s)&&(o[r]=yt.access(s,"olddisplay",C(s.nodeName)))):(n=St(s),"none"===i&&n||yt.set(s,"olddisplay",n?i:K.css(s,"display"))));for(r=0;r<a;r++)(s=t[r]).style&&(e&&"none"!==s.style.display&&""!==s.style.display||(s.style.display=e?o[r]||"":"none"));return t}function O(t,e,i,s,n){return new O.prototype.init(t,e,i,s,n)}function H(){return t.setTimeout(function(){Zt=void 0}),Zt=K.now()}function N(t,e){var i,s=0,n={height:t};for(e=e?1:0;s<4;s+=2-e)n["margin"+(i=Ct[s])]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function P(t,e,i){for(var s,n=(L.tweeners[e]||[]).concat(L.tweeners["*"]),o=0,r=n.length;o<r;o++)if(s=n[o].call(i,e,t))return s}function L(t,e,i){var s,n,o=0,r=L.prefilters.length,a=K.Deferred().always(function(){delete l.elem}),l=function(){if(n)return!1;for(var e=Zt||H(),i=Math.max(0,h.startTime+h.duration-e),s=1-(i/h.duration||0),o=0,r=h.tweens.length;o<r;o++)h.tweens[o].run(s);return a.notifyWith(t,[h,s,i]),s<1&&r?i:(a.resolveWith(t,[h]),!1)},h=a.promise({elem:t,props:K.extend({},e),opts:K.extend(!0,{specialEasing:{},easing:K.easing._default},i),originalProperties:e,originalOptions:i,startTime:Zt||H(),duration:i.duration,tweens:[],createTween:function(e,i){var s=K.Tween(t,h.opts,e,i,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(s),s},stop:function(e){var i=0,s=e?h.tweens.length:0;if(n)return this;for(n=!0;i<s;i++)h.tweens[i].run(1);return e?(a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h,e])):a.rejectWith(t,[h,e]),this}}),c=h.props;for(!function(t,e){var i,s,n,o,r;for(i in t)if(s=K.camelCase(i),n=e[s],o=t[i],K.isArray(o)&&(n=o[1],o=t[i]=o[0]),i!==s&&(t[s]=o,delete t[i]),(r=K.cssHooks[s])&&"expand"in r){o=r.expand(o),delete t[s];for(i in o)i in t||(t[i]=o[i],e[i]=n)}else e[s]=n}(c,h.opts.specialEasing);o<r;o++)if(s=L.prefilters[o].call(h,t,c,h.opts))return K.isFunction(s.stop)&&(K._queueHooks(h.elem,h.opts.queue).stop=K.proxy(s.stop,s)),s;return K.map(c,P,h),K.isFunction(h.opts.start)&&h.opts.start.call(t,h),K.fx.timer(K.extend(l,{elem:t,anim:h,queue:h.opts.queue})),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always)}function z(t){return t.getAttribute&&t.getAttribute("class")||""}function M(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var s,n=0,o=e.toLowerCase().match(ft)||[];if(K.isFunction(i))for(;s=o[n++];)"+"===s[0]?(s=s.slice(1)||"*",(t[s]=t[s]||[]).unshift(i)):(t[s]=t[s]||[]).push(i)}}function q(t,e,i,s){function n(a){var l;return o[a]=!0,K.each(t[a]||[],function(t,a){var h=a(e,i,s);return"string"!=typeof h||r||o[h]?r?!(l=h):void 0:(e.dataTypes.unshift(h),n(h),!1)}),l}var o={},r=t===ye;return n(e.dataTypes[0])||!o["*"]&&n("*")}function I(t,e){var i,s,n=K.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((n[i]?t:s||(s={}))[i]=e[i]);return s&&K.extend(!0,t,s),t}function W(t,e,i,s){var n;if(K.isArray(e))K.each(e,function(e,n){i||Te.test(t)?s(t,n):W(t+"["+("object"==typeof n&&null!=n?e:"")+"]",n,i,s)});else if(i||"object"!==K.type(e))s(t,e);else for(n in e)W(t+"["+n+"]",e[n],i,s)}function R(t){return K.isWindow(t)?t:9===t.nodeType&&t.defaultView}var F=[],B=t.document,X=F.slice,U=F.concat,Y=F.push,Q=F.indexOf,V={},G=V.toString,Z=V.hasOwnProperty,J={},K=function(t,e){return new K.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,it=/-([\da-z])/gi,st=function(t,e){return e.toUpperCase()};K.fn=K.prototype={jquery:"2.2.4",constructor:K,selector:"",length:0,toArray:function(){return X.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:X.call(this)},pushStack:function(t){var e=K.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return K.each(this,t)},map:function(t){return this.pushStack(K.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(X.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:Y,sort:F.sort,splice:F.splice},K.extend=K.fn.extend=function(){var t,e,i,s,n,o,r=arguments[0]||{},a=1,l=arguments.length,h=!1;for("boolean"==typeof r&&(h=r,r=arguments[a]||{},a++),"object"==typeof r||K.isFunction(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=r[e],r!==(s=t[e])&&(h&&s&&(K.isPlainObject(s)||(n=K.isArray(s)))?(n?(n=!1,o=i&&K.isArray(i)?i:[]):o=i&&K.isPlainObject(i)?i:{},r[e]=K.extend(h,o,s)):void 0!==s&&(r[e]=s));return r},K.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===K.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!K.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==K.type(t)||t.nodeType||K.isWindow(t))return!1;if(t.constructor&&!Z.call(t,"constructor")&&!Z.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||Z.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?V[G.call(t)]||"object":typeof t},globalEval:function(t){var e,i=eval;(t=K.trim(t))&&(1===t.indexOf("use strict")?((e=B.createElement("script")).text=t,B.head.appendChild(e).parentNode.removeChild(e)):i(t))},camelCase:function(t){return t.replace(et,"ms-").replace(it,st)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var s,n=0;if(i(t))for(s=t.length;n<s&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var s=e||[];return null!=t&&(i(Object(t))?K.merge(s,"string"==typeof t?[t]:t):Y.call(s,t)),s},inArray:function(t,e,i){return null==e?-1:Q.call(e,t,i)},merge:function(t,e){for(var i=+e.length,s=0,n=t.length;s<i;s++)t[n++]=e[s];return t.length=n,t},grep:function(t,e,i){for(var s=[],n=0,o=t.length,r=!i;n<o;n++)!e(t[n],n)!==r&&s.push(t[n]);return s},map:function(t,e,s){var n,o,r=0,a=[];if(i(t))for(n=t.length;r<n;r++)null!=(o=e(t[r],r,s))&&a.push(o);else for(r in t)null!=(o=e(t[r],r,s))&&a.push(o);return U.apply([],a)},guid:1,proxy:function(t,e){var i,s,n;if("string"==typeof e&&(i=t[e],e=t,t=i),K.isFunction(t))return s=X.call(arguments,2),n=function(){return t.apply(e||this,s.concat(X.call(arguments)))},n.guid=t.guid=t.guid||K.guid++,n},now:Date.now,support:J}),"function"==typeof Symbol&&(K.fn[Symbol.iterator]=F[Symbol.iterator]),K.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){V["[object "+e+"]"]=e.toLowerCase()});var nt=function(t){function e(t,e,i,s){var n,o,r,a,l,h,d,p,f=e&&e.ownerDocument,g=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==g&&9!==g&&11!==g)return i;if(!s&&((e?e.ownerDocument||e:M)!==D&&A(e),e=e||D,O)){if(11!==g&&(h=gt.exec(t)))if(n=h[1]){if(9===g){if(!(r=e.getElementById(n)))return i;if(r.id===n)return i.push(r),i}else if(f&&(r=f.getElementById(n))&&L(e,r)&&r.id===n)return i.push(r),i}else{if(h[2])return G.apply(i,e.getElementsByTagName(t)),i;if((n=h[3])&&w.getElementsByClassName&&e.getElementsByClassName)return G.apply(i,e.getElementsByClassName(n)),i}if(w.qsa&&!F[t+" "]&&(!H||!H.test(t))){if(1!==g)f=e,p=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(vt,"\\$&"):e.setAttribute("id",a=z),o=(d=k(t)).length,l=ct.test(a)?"#"+a:"[id='"+a+"']";o--;)d[o]=l+" "+u(d[o]);p=d.join(","),f=mt.test(t)&&c(e.parentNode)||e}if(p)try{return G.apply(i,f.querySelectorAll(p)),i}catch(t){}finally{a===z&&e.removeAttribute("id")}}}return S(t.replace(ot,"$1"),e,i,s)}function i(){function t(i,s){return e.push(i+" ")>x.cacheLength&&delete t[e.shift()],t[i+" "]=s}var e=[];return t}function s(t){return t[z]=!0,t}function n(t){var e=D.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var i=t.split("|"),s=i.length;s--;)x.attrHandle[i[s]]=e}function r(t,e){var i=e&&t,s=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||X)-(~t.sourceIndex||X);if(s)return s;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function h(t){return s(function(e){return e=+e,s(function(i,s){for(var n,o=t([],i.length,e),r=o.length;r--;)i[n=o[r]]&&(i[n]=!(s[n]=i[n]))})})}function c(t){return t&&void 0!==t.getElementsByTagName&&t}function d(){}function u(t){for(var e=0,i=t.length,s="";e<i;e++)s+=t[e].value;return s}function p(t,e,i){var s=e.dir,n=i&&"parentNode"===s,o=I++;return e.first?function(e,i,o){for(;e=e[s];)if(1===e.nodeType||n)return t(e,i,o)}:function(e,i,r){var a,l,h,c=[q,o];if(r){for(;e=e[s];)if((1===e.nodeType||n)&&t(e,i,r))return!0}else for(;e=e[s];)if(1===e.nodeType||n){if(h=e[z]||(e[z]={}),l=h[e.uniqueID]||(h[e.uniqueID]={}),(a=l[s])&&a[0]===q&&a[1]===o)return c[2]=a[2];if(l[s]=c,c[2]=t(e,i,r))return!0}}}function f(t){return t.length>1?function(e,i,s){for(var n=t.length;n--;)if(!t[n](e,i,s))return!1;return!0}:t[0]}function g(t,e,i,s,n){for(var o,r=[],a=0,l=t.length,h=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,s,n)||(r.push(o),h&&e.push(a)));return r}function m(t,i,n,o,r,a){return o&&!o[z]&&(o=m(o)),r&&!r[z]&&(r=m(r,a)),s(function(s,a,l,h){var c,d,u,p=[],f=[],m=a.length,v=s||function(t,i,s){for(var n=0,o=i.length;n<o;n++)e(t,i[n],s);return s}(i||"*",l.nodeType?[l]:l,[]),y=!t||!s&&i?v:g(v,p,t,l,h),w=n?r||(s?t:m||o)?[]:a:y;if(n&&n(y,w,l,h),o)for(c=g(w,f),o(c,[],l,h),d=c.length;d--;)(u=c[d])&&(w[f[d]]=!(y[f[d]]=u));if(s){if(r||t){if(r){for(c=[],d=w.length;d--;)(u=w[d])&&c.push(y[d]=u);r(null,w=[],c,h)}for(d=w.length;d--;)(u=w[d])&&(c=r?J(s,u):p[d])>-1&&(s[c]=!(a[c]=u))}}else w=g(w===a?w.splice(m,w.length):w),r?r(null,a,w,h):G.apply(a,w)})}function v(t){for(var e,i,s,n=t.length,o=x.relative[t[0].type],r=o||x.relative[" "],a=o?1:0,l=p(function(t){return t===e},r,!0),h=p(function(t){return J(e,t)>-1},r,!0),c=[function(t,i,s){var n=!o&&(s||i!==_)||((e=i).nodeType?l(t,i,s):h(t,i,s));return e=null,n}];a<n;a++)if(i=x.relative[t[a].type])c=[p(f(c),i)];else{if((i=x.filter[t[a].type].apply(null,t[a].matches))[z]){for(s=++a;s<n&&!x.relative[t[s].type];s++);return m(a>1&&f(c),a>1&&u(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ot,"$1"),i,a<s&&v(t.slice(a,s)),s<n&&v(t=t.slice(s)),s<n&&u(t))}c.push(i)}return f(c)}var y,w,x,b,T,k,C,S,_,$,E,A,D,j,O,H,N,P,L,z="sizzle"+1*new Date,M=t.document,q=0,I=0,W=i(),R=i(),F=i(),B=function(t,e){return t===e&&(E=!0),0},X=1<<31,U={}.hasOwnProperty,Y=[],Q=Y.pop,V=Y.push,G=Y.push,Z=Y.slice,J=function(t,e){for(var i=0,s=t.length;i<s;i++)if(t[i]===e)return i;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",st=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",nt=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),rt=new RegExp("^"+tt+"*,"+tt+"*"),at=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ht=new RegExp(st),ct=new RegExp("^"+et+"$"),dt={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ut=/^(?:input|select|textarea|button)$/i,pt=/^h\d$/i,ft=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,vt=/'|\\/g,yt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),wt=function(t,e,i){var s="0x"+e-65536;return s!=s||i?e:s<0?String.fromCharCode(s+65536):String.fromCharCode(s>>10|55296,1023&s|56320)},xt=function(){A()};try{G.apply(Y=Z.call(M.childNodes),M.childNodes),Y[M.childNodes.length].nodeType}catch(t){G={apply:Y.length?function(t,e){V.apply(t,Z.call(e))}:function(t,e){for(var i=t.length,s=0;t[i++]=e[s++];);t.length=i-1}}}w=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},A=e.setDocument=function(t){var e,i,s=t?t.ownerDocument||t:M;return s!==D&&9===s.nodeType&&s.documentElement?(D=s,j=D.documentElement,O=!T(D),(i=D.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",xt,!1):i.attachEvent&&i.attachEvent("onunload",xt)),w.attributes=n(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=n(function(t){return t.appendChild(D.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=ft.test(D.getElementsByClassName),w.getById=n(function(t){return j.appendChild(t).id=z,!D.getElementsByName||!D.getElementsByName(z).length}),w.getById?(x.find.ID=function(t,e){if(void 0!==e.getElementById&&O){var i=e.getElementById(t);return i?[i]:[]}},x.filter.ID=function(t){var e=t.replace(yt,wt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(yt,wt);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,s=[],n=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[n++];)1===i.nodeType&&s.push(i);return s}return o},x.find.CLASS=w.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&O)return e.getElementsByClassName(t)},N=[],H=[],(w.qsa=ft.test(D.querySelectorAll))&&(n(function(t){j.appendChild(t).innerHTML="<a id='"+z+"'></a><select id='"+z+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&H.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||H.push("\\["+tt+"*(?:value|"+K+")"),t.querySelectorAll("[id~="+z+"-]").length||H.push("~="),t.querySelectorAll(":checked").length||H.push(":checked"),t.querySelectorAll("a#"+z+"+*").length||H.push(".#.+[+~]")}),n(function(t){var e=D.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&H.push("name"+tt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||H.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),H.push(",.*:")})),(w.matchesSelector=ft.test(P=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&n(function(t){w.disconnectedMatch=P.call(t,"div"),P.call(t,"[s!='']:x"),N.push("!=",st)}),H=H.length&&new RegExp(H.join("|")),N=N.length&&new RegExp(N.join("|")),e=ft.test(j.compareDocumentPosition),L=e||ft.test(j.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,s=e&&e.parentNode;return t===s||!(!s||1!==s.nodeType||!(i.contains?i.contains(s):t.compareDocumentPosition&&16&t.compareDocumentPosition(s)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},B=e?function(t,e){if(t===e)return E=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!w.sortDetached&&e.compareDocumentPosition(t)===i?t===D||t.ownerDocument===M&&L(M,t)?-1:e===D||e.ownerDocument===M&&L(M,e)?1:$?J($,t)-J($,e):0:4&i?-1:1)}:function(t,e){if(t===e)return E=!0,0;var i,s=0,n=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!n||!o)return t===D?-1:e===D?1:n?-1:o?1:$?J($,t)-J($,e):0;if(n===o)return r(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[s]===l[s];)s++;return s?r(a[s],l[s]):a[s]===M?-1:l[s]===M?1:0},D):D},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==D&&A(t),i=i.replace(lt,"='$1']"),w.matchesSelector&&O&&!F[i+" "]&&(!N||!N.test(i))&&(!H||!H.test(i)))try{var s=P.call(t,i);if(s||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return s}catch(t){}return e(i,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&A(t),L(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&A(t);var i=x.attrHandle[e.toLowerCase()],s=i&&U.call(x.attrHandle,e.toLowerCase())?i(t,e,!O):void 0;return void 0!==s?s:w.attributes||!O?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],s=0,n=0;if(E=!w.detectDuplicates,$=!w.sortStable&&t.slice(0),t.sort(B),E){for(;e=t[n++];)e===t[n]&&(s=i.push(n));for(;s--;)t.splice(i[s],1)}return $=null,t},b=e.getText=function(t){var e,i="",s=0,n=t.nodeType;if(n){if(1===n||9===n||11===n){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=b(t)}else if(3===n||4===n)return t.nodeValue}else for(;e=t[s++];)i+=b(e);return i},(x=e.selectors={cacheLength:50,createPseudo:s,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ht.test(i)&&(e=k(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,s){return function(n){var o=e.attr(n,t);return null==o?"!="===i:!i||(o+="","="===i?o===s:"!="===i?o!==s:"^="===i?s&&0===o.indexOf(s):"*="===i?s&&o.indexOf(s)>-1:"$="===i?s&&o.slice(-s.length)===s:"~="===i?(" "+o.replace(nt," ")+" ").indexOf(s)>-1:"|="===i&&(o===s||o.slice(0,s.length+1)===s+"-"))}},CHILD:function(t,e,i,s,n){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===s&&0===n?function(t){return!!t.parentNode}:function(e,i,l){var h,c,d,u,p,f,g=o!==r?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(m){if(o){for(;g;){for(u=e;u=u[g];)if(a?u.nodeName.toLowerCase()===v:1===u.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?m.firstChild:m.lastChild],r&&y){for(w=(p=(h=(c=(d=(u=m)[z]||(u[z]={}))[u.uniqueID]||(d[u.uniqueID]={}))[t]||[])[0]===q&&h[1])&&h[2],u=p&&m.childNodes[p];u=++p&&u&&u[g]||(w=p=0)||f.pop();)if(1===u.nodeType&&++w&&u===e){c[t]=[q,p,w];break}}else if(y&&(w=p=(h=(c=(d=(u=e)[z]||(u[z]={}))[u.uniqueID]||(d[u.uniqueID]={}))[t]||[])[0]===q&&h[1]),!1===w)for(;(u=++p&&u&&u[g]||(w=p=0)||f.pop())&&((a?u.nodeName.toLowerCase()!==v:1!==u.nodeType)||!++w||(y&&((c=(d=u[z]||(u[z]={}))[u.uniqueID]||(d[u.uniqueID]={}))[t]=[q,w]),u!==e)););return(w-=n)===s||w%s==0&&w/s>=0}}},PSEUDO:function(t,i){var n,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[z]?o(i):o.length>1?(n=[t,t,"",i],x.setFilters.hasOwnProperty(t.toLowerCase())?s(function(t,e){for(var s,n=o(t,i),r=n.length;r--;)t[s=J(t,n[r])]=!(e[s]=n[r])}):function(t){return o(t,0,n)}):o}},pseudos:{not:s(function(t){var e=[],i=[],n=C(t.replace(ot,"$1"));return n[z]?s(function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))}):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}}),has:s(function(t){return function(i){return e(t,i).length>0}}),contains:s(function(t){return t=t.replace(yt,wt),function(e){return(e.textContent||e.innerText||b(e)).indexOf(t)>-1}}),lang:s(function(t){return ct.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,wt).toLowerCase(),function(e){var i;do{if(i=O?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===j},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return pt.test(t.nodeName)},input:function(t){return ut.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:h(function(){return[0]}),last:h(function(t,e){return[e-1]}),eq:h(function(t,e,i){return[i<0?i+e:i]}),even:h(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:h(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:h(function(t,e,i){for(var s=i<0?i+e:i;--s>=0;)t.push(s);return t}),gt:h(function(t,e,i){for(var s=i<0?i+e:i;++s<e;)t.push(s);return t})}}).pseudos.nth=x.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[y]=a(y);for(y in{submit:!0,reset:!0})x.pseudos[y]=l(y);return d.prototype=x.filters=x.pseudos,x.setFilters=new d,k=e.tokenize=function(t,i){var s,n,o,r,a,l,h,c=R[t+" "];if(c)return i?0:c.slice(0);for(a=t,l=[],h=x.preFilter;a;){s&&!(n=rt.exec(a))||(n&&(a=a.slice(n[0].length)||a),l.push(o=[])),s=!1,(n=at.exec(a))&&(s=n.shift(),o.push({value:s,type:n[0].replace(ot," ")}),a=a.slice(s.length));for(r in x.filter)!(n=dt[r].exec(a))||h[r]&&!(n=h[r](n))||(s=n.shift(),o.push({value:s,type:r,matches:n}),a=a.slice(s.length));if(!s)break}return i?a.length:a?e.error(t):R(t,l).slice(0)},C=e.compile=function(t,i){var n,o=[],r=[],a=F[t+" "];if(!a){for(i||(i=k(t)),n=i.length;n--;)(a=v(i[n]))[z]?o.push(a):r.push(a);(a=F(t,function(t,i){var n=i.length>0,o=t.length>0,r=function(s,r,a,l,h){var c,d,u,p=0,f="0",m=s&&[],v=[],y=_,w=s||o&&x.find.TAG("*",h),b=q+=null==y?1:Math.random()||.1,T=w.length;for(h&&(_=r===D||r||h);f!==T&&null!=(c=w[f]);f++){if(o&&c){for(d=0,r||c.ownerDocument===D||(A(c),a=!O);u=t[d++];)if(u(c,r||D,a)){l.push(c);break}h&&(q=b)}n&&((c=!u&&c)&&p--,s&&m.push(c))}if(p+=f,n&&f!==p){for(d=0;u=i[d++];)u(m,v,r,a);if(s){if(p>0)for(;f--;)m[f]||v[f]||(v[f]=Q.call(l));v=g(v)}G.apply(l,v),h&&!s&&v.length>0&&p+i.length>1&&e.uniqueSort(l)}return h&&(q=b,_=y),m};return n?s(r):r}(r,o))).selector=t}return a},S=e.select=function(t,e,i,s){var n,o,r,a,l,h="function"==typeof t&&t,d=!s&&k(t=h.selector||t);if(i=i||[],1===d.length){if((o=d[0]=d[0].slice(0)).length>2&&"ID"===(r=o[0]).type&&w.getById&&9===e.nodeType&&O&&x.relative[o[1].type]){if(!(e=(x.find.ID(r.matches[0].replace(yt,wt),e)||[])[0]))return i;h&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(n=dt.needsContext.test(t)?0:o.length;n--&&(r=o[n],!x.relative[a=r.type]);)if((l=x.find[a])&&(s=l(r.matches[0].replace(yt,wt),mt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(n,1),!(t=s.length&&u(o)))return G.apply(i,s),i;break}}return(h||C(t,d))(s,e,!O,i,!e||mt.test(t)&&c(e.parentNode)||e),i},w.sortStable=z.split("").sort(B).join("")===z,w.detectDuplicates=!!E,A(),w.sortDetached=n(function(t){return 1&t.compareDocumentPosition(D.createElement("div"))}),n(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&n(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),n(function(t){return null==t.getAttribute("disabled")})||o(K,function(t,e,i){var s;if(!i)return!0===t[e]?e.toLowerCase():(s=t.getAttributeNode(e))&&s.specified?s.value:null}),e}(t);K.find=nt,K.expr=nt.selectors,K.expr[":"]=K.expr.pseudos,K.uniqueSort=K.unique=nt.uniqueSort,K.text=nt.getText,K.isXMLDoc=nt.isXML,K.contains=nt.contains;var ot=function(t,e,i){for(var s=[],n=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(n&&K(t).is(i))break;s.push(t)}return s},rt=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},at=K.expr.match.needsContext,lt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,ht=/^.[^:#\[\.,]*$/;K.filter=function(t,e,i){var s=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===s.nodeType?K.find.matchesSelector(s,t)?[s]:[]:K.find.matches(t,K.grep(e,function(t){return 1===t.nodeType}))},K.fn.extend({find:function(t){var e,i=this.length,s=[],n=this;if("string"!=typeof t)return this.pushStack(K(t).filter(function(){for(e=0;e<i;e++)if(K.contains(n[e],this))return!0}));for(e=0;e<i;e++)K.find(t,n[e],s);return s=this.pushStack(i>1?K.unique(s):s),s.selector=this.selector?this.selector+" "+t:t,s},filter:function(t){return this.pushStack(s(this,t||[],!1))},not:function(t){return this.pushStack(s(this,t||[],!0))},is:function(t){return!!s(this,"string"==typeof t&&at.test(t)?K(t):t||[],!1).length}});var ct,dt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(K.fn.init=function(t,e,i){var s,n;if(!t)return this;if(i=i||ct,"string"==typeof t){if(!(s="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:dt.exec(t))||!s[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(s[1]){if(e=e instanceof K?e[0]:e,K.merge(this,K.parseHTML(s[1],e&&e.nodeType?e.ownerDocument||e:B,!0)),lt.test(s[1])&&K.isPlainObject(e))for(s in e)K.isFunction(this[s])?this[s](e[s]):this.attr(s,e[s]);return this}return(n=B.getElementById(s[2]))&&n.parentNode&&(this.length=1,this[0]=n),this.context=B,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):K.isFunction(t)?void 0!==i.ready?i.ready(t):t(K):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),K.makeArray(t,this))}).prototype=K.fn,ct=K(B);var ut=/^(?:parents|prev(?:Until|All))/,pt={children:!0,contents:!0,next:!0,prev:!0};K.fn.extend({has:function(t){var e=K(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(K.contains(this,e[t]))return!0})},closest:function(t,e){for(var i,s=0,n=this.length,o=[],r=at.test(t)||"string"!=typeof t?K(t,e||this.context):0;s<n;s++)for(i=this[s];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&K.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?K.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?Q.call(K(t),this[0]):Q.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(K.uniqueSort(K.merge(this.get(),K(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),K.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ot(t,"parentNode")},parentsUntil:function(t,e,i){return ot(t,"parentNode",i)},next:function(t){return n(t,"nextSibling")},prev:function(t){return n(t,"previousSibling")},nextAll:function(t){return ot(t,"nextSibling")},prevAll:function(t){return ot(t,"previousSibling")},nextUntil:function(t,e,i){return ot(t,"nextSibling",i)},prevUntil:function(t,e,i){return ot(t,"previousSibling",i)},siblings:function(t){return rt((t.parentNode||{}).firstChild,t)},children:function(t){return rt(t.firstChild)},contents:function(t){return t.contentDocument||K.merge([],t.childNodes)}},function(t,e){K.fn[t]=function(i,s){var n=K.map(this,e,i);return"Until"!==t.slice(-5)&&(s=i),s&&"string"==typeof s&&(n=K.filter(s,n)),this.length>1&&(pt[t]||K.uniqueSort(n),ut.test(t)&&n.reverse()),this.pushStack(n)}});var ft=/\S+/g;K.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return K.each(t.match(ft)||[],function(t,i){e[i]=!0}),e}(t):K.extend({},t);var e,i,s,n,o=[],r=[],a=-1,l=function(){for(n=t.once,s=e=!0;r.length;a=-1)for(i=r.shift();++a<o.length;)!1===o[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=o.length,i=!1);t.memory||(i=!1),e=!1,n&&(o=i?[]:"")},h={add:function(){return o&&(i&&!e&&(a=o.length-1,r.push(i)),function e(i){K.each(i,function(i,s){K.isFunction(s)?t.unique&&h.has(s)||o.push(s):s&&s.length&&"string"!==K.type(s)&&e(s)})}(arguments),i&&!e&&l()),this},remove:function(){return K.each(arguments,function(t,e){for(var i;(i=K.inArray(e,o,i))>-1;)o.splice(i,1),i<=a&&a--}),this},has:function(t){return t?K.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return n=r=[],o=i="",this},disabled:function(){return!o},lock:function(){return n=r=[],i||(o=i=""),this},locked:function(){return!!n},fireWith:function(t,i){return n||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!s}};return h},K.extend({Deferred:function(t){var e=[["resolve","done",K.Callbacks("once memory"),"resolved"],["reject","fail",K.Callbacks("once memory"),"rejected"],["notify","progress",K.Callbacks("memory")]],i="pending",s={state:function(){return i},always:function(){return n.done(arguments).fail(arguments),this},then:function(){var t=arguments;return K.Deferred(function(i){K.each(e,function(e,o){var r=K.isFunction(t[e])&&t[e];n[o[1]](function(){var t=r&&r.apply(this,arguments);t&&K.isFunction(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[o[0]+"With"](this===s?i.promise():this,r?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?K.extend(t,s):s}},n={};return s.pipe=s.then,K.each(e,function(t,o){var r=o[2],a=o[3];s[o[1]]=r.add,a&&r.add(function(){i=a},e[1^t][2].disable,e[2][2].lock),n[o[0]]=function(){return n[o[0]+"With"](this===n?s:this,arguments),this},n[o[0]+"With"]=r.fireWith}),s.promise(n),t&&t.call(n,n),n},when:function(t){var e,i,s,n=0,o=X.call(arguments),r=o.length,a=1!==r||t&&K.isFunction(t.promise)?r:0,l=1===a?t:K.Deferred(),h=function(t,i,s){return function(n){i[t]=this,s[t]=arguments.length>1?X.call(arguments):n,s===e?l.notifyWith(i,s):--a||l.resolveWith(i,s)}};if(r>1)for(e=new Array(r),i=new Array(r),s=new Array(r);n<r;n++)o[n]&&K.isFunction(o[n].promise)?o[n].promise().progress(h(n,i,e)).done(h(n,s,o)).fail(l.reject):--a;return a||l.resolveWith(s,o),l.promise()}});var gt;K.fn.ready=function(t){return K.ready.promise().done(t),this},K.extend({isReady:!1,readyWait:1,holdReady:function(t){t?K.readyWait++:K.ready(!0)},ready:function(t){(!0===t?--K.readyWait:K.isReady)||(K.isReady=!0,!0!==t&&--K.readyWait>0||(gt.resolveWith(B,[K]),K.fn.triggerHandler&&(K(B).triggerHandler("ready"),K(B).off("ready"))))}}),K.ready.promise=function(e){return gt||(gt=K.Deferred(),"complete"===B.readyState||"loading"!==B.readyState&&!B.documentElement.doScroll?t.setTimeout(K.ready):(B.addEventListener("DOMContentLoaded",o),t.addEventListener("load",o))),gt.promise(e)},K.ready.promise();var mt=function(t,e,i,s,n,o,r){var a=0,l=t.length,h=null==i;if("object"===K.type(i)){n=!0;for(a in i)mt(t,e,a,i[a],!0,o,r)}else if(void 0!==s&&(n=!0,K.isFunction(s)||(r=!0),h&&(r?(e.call(t,s),e=null):(h=e,e=function(t,e,i){return h.call(K(t),i)})),e))for(;a<l;a++)e(t[a],i,r?s:s.call(t[a],a,e(t[a],i)));return n?t:h?e.call(t):l?e(t[0],i):o},vt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};r.uid=1,r.prototype={register:function(t,e){var i=e||{};return t.nodeType?t[this.expando]=i:Object.defineProperty(t,this.expando,{value:i,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!vt(t))return{};var e=t[this.expando];return e||(e={},vt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var s,n=this.cache(t);if("string"==typeof e)n[e]=i;else for(s in e)n[s]=e[s];return n},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,i){var s;return void 0===e||e&&"string"==typeof e&&void 0===i?void 0!==(s=this.get(t,e))?s:this.get(t,K.camelCase(e)):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,s,n,o=t[this.expando];if(void 0!==o){if(void 0===e)this.register(t);else{K.isArray(e)?s=e.concat(e.map(K.camelCase)):(n=K.camelCase(e),s=e in o?[e,n]:(s=n)in o?[s]:s.match(ft)||[]),i=s.length;for(;i--;)delete o[s[i]]}(void 0===e||K.isEmptyObject(o))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!K.isEmptyObject(e)}};var yt=new r,wt=new r,xt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,bt=/[A-Z]/g;K.extend({hasData:function(t){return wt.hasData(t)||yt.hasData(t)},data:function(t,e,i){return wt.access(t,e,i)},removeData:function(t,e){wt.remove(t,e)},_data:function(t,e,i){return yt.access(t,e,i)},_removeData:function(t,e){yt.remove(t,e)}}),K.fn.extend({data:function(t,e){var i,s,n,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(n=wt.get(o),1===o.nodeType&&!yt.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(s=r[i].name).indexOf("data-")&&(s=K.camelCase(s.slice(5)),a(o,s,n[s]));yt.set(o,"hasDataAttrs",!0)}return n}return"object"==typeof t?this.each(function(){wt.set(this,t)}):mt(this,function(e){var i,s;if(o&&void 0===e){if(void 0!==(i=wt.get(o,t)||wt.get(o,t.replace(bt,"-$&").toLowerCase())))return i;if(s=K.camelCase(t),void 0!==(i=wt.get(o,s)))return i;if(void 0!==(i=a(o,s,void 0)))return i}else s=K.camelCase(t),this.each(function(){var i=wt.get(this,s);wt.set(this,s,e),t.indexOf("-")>-1&&void 0!==i&&wt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){wt.remove(this,t)})}}),K.extend({queue:function(t,e,i){var s;if(t)return e=(e||"fx")+"queue",s=yt.get(t,e),i&&(!s||K.isArray(i)?s=yt.access(t,e,K.makeArray(i)):s.push(i)),s||[]},dequeue:function(t,e){e=e||"fx";var i=K.queue(t,e),s=i.length,n=i.shift(),o=K._queueHooks(t,e);"inprogress"===n&&(n=i.shift(),s--),n&&("fx"===e&&i.unshift("inprogress"),delete o.stop,n.call(t,function(){K.dequeue(t,e)},o)),!s&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return yt.get(t,i)||yt.access(t,i,{empty:K.Callbacks("once memory").add(function(){yt.remove(t,[e+"queue",i])})})}}),K.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?K.queue(this[0],t):void 0===e?this:this.each(function(){var i=K.queue(this,t,e);K._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&K.dequeue(this,t)})},dequeue:function(t){return this.each(function(){K.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,s=1,n=K.Deferred(),o=this,r=this.length,a=function(){--s||n.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=yt.get(o[r],t+"queueHooks"))&&i.empty&&(s++,i.empty.add(a));return a(),n.promise(e)}});var Tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,kt=new RegExp("^(?:([+-])=|)("+Tt+")([a-z%]*)$","i"),Ct=["Top","Right","Bottom","Left"],St=function(t,e){return t=e||t,"none"===K.css(t,"display")||!K.contains(t.ownerDocument,t)},_t=/^(?:checkbox|radio)$/i,$t=/<([\w:-]+)/,Et=/^$|\/(?:java|ecma)script/i,At={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td;var Dt=/<|&#?\w+;/;!function(){var t=B.createDocumentFragment().appendChild(B.createElement("div")),e=B.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),J.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",J.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var jt=/^key/,Ot=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ht=/^([^.]*)(?:\.(.+)|)/;K.event={global:{},add:function(t,e,i,s,n){var o,r,a,l,h,c,d,u,p,f,g,m=yt.get(t);if(m)for(i.handler&&(i=(o=i).handler,n=o.selector),i.guid||(i.guid=K.guid++),(l=m.events)||(l=m.events={}),(r=m.handle)||(r=m.handle=function(e){return void 0!==K&&K.event.triggered!==e.type?K.event.dispatch.apply(t,arguments):void 0}),h=(e=(e||"").match(ft)||[""]).length;h--;)p=g=(a=Ht.exec(e[h])||[])[1],f=(a[2]||"").split(".").sort(),p&&(d=K.event.special[p]||{},p=(n?d.delegateType:d.bindType)||p,d=K.event.special[p]||{},c=K.extend({type:p,origType:g,data:s,handler:i,guid:i.guid,selector:n,needsContext:n&&K.expr.match.needsContext.test(n),namespace:f.join(".")},o),(u=l[p])||((u=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,s,f,r)||t.addEventListener&&t.addEventListener(p,r)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),n?u.splice(u.delegateCount++,0,c):u.push(c),K.event.global[p]=!0)},remove:function(t,e,i,s,n){var o,r,a,l,h,c,d,u,p,f,g,m=yt.hasData(t)&&yt.get(t);if(m&&(l=m.events)){for(h=(e=(e||"").match(ft)||[""]).length;h--;)if(a=Ht.exec(e[h])||[],p=g=a[1],f=(a[2]||"").split(".").sort(),p){for(d=K.event.special[p]||{},u=l[p=(s?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=u.length;o--;)c=u[o],!n&&g!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||s&&s!==c.selector&&("**"!==s||!c.selector)||(u.splice(o,1),c.selector&&u.delegateCount--,d.remove&&d.remove.call(t,c));r&&!u.length&&(d.teardown&&!1!==d.teardown.call(t,f,m.handle)||K.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)K.event.remove(t,p+e[h],i,s,!0);K.isEmptyObject(l)&&yt.remove(t,"handle events")}},dispatch:function(t){t=K.event.fix(t);var e,i,s,n,o,r=[],a=X.call(arguments),l=(yt.get(this,"events")||{})[t.type]||[],h=K.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,t)){for(r=K.event.handlers.call(this,t,l),e=0;(n=r[e++])&&!t.isPropagationStopped();)for(t.currentTarget=n.elem,i=0;(o=n.handlers[i++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,void 0!==(s=((K.event.special[o.origType]||{}).handle||o.handler).apply(n.elem,a))&&!1===(t.result=s)&&(t.preventDefault(),t.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,s,n,o,r=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(s=[],i=0;i<a;i++)void 0===s[n=(o=e[i]).selector+" "]&&(s[n]=o.needsContext?K(n,this).index(l)>-1:K.find(n,this,null,[l]).length),s[n]&&s.push(o);s.length&&r.push({elem:l,handlers:s})}return a<e.length&&r.push({elem:this,handlers:e.slice(a)}),r},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,s,n,o=e.button;return null==t.pageX&&null!=e.clientX&&(s=(i=t.target.ownerDocument||B).documentElement,n=i.body,t.pageX=e.clientX+(s&&s.scrollLeft||n&&n.scrollLeft||0)-(s&&s.clientLeft||n&&n.clientLeft||0),t.pageY=e.clientY+(s&&s.scrollTop||n&&n.scrollTop||0)-(s&&s.clientTop||n&&n.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[K.expando])return t;var e,i,s,n=t.type,o=t,r=this.fixHooks[n];for(r||(this.fixHooks[n]=r=Ot.test(n)?this.mouseHooks:jt.test(n)?this.keyHooks:{}),s=r.props?this.props.concat(r.props):this.props,t=new K.Event(o),e=s.length;e--;)t[i=s[e]]=o[i];return t.target||(t.target=B),3===t.target.nodeType&&(t.target=t.target.parentNode),r.filter?r.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==f()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===f()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&K.nodeName(this,"input"))return this.click(),!1},_default:function(t){return K.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},K.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},K.Event=function(t,e){if(!(this instanceof K.Event))return new K.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?u:p):this.type=t,e&&K.extend(this,e),this.timeStamp=t&&t.timeStamp||K.now(),this[K.expando]=!0},K.Event.prototype={constructor:K.Event,isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=u,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=u,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=u,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},K.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){K.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,s=t.relatedTarget,n=t.handleObj;return s&&(s===this||K.contains(this,s))||(t.type=n.origType,i=n.handler.apply(this,arguments),t.type=e),i}}}),K.fn.extend({on:function(t,e,i,s){return g(this,t,e,i,s)},one:function(t,e,i,s){return g(this,t,e,i,s,1)},off:function(t,e,i){var s,n;if(t&&t.preventDefault&&t.handleObj)return s=t.handleObj,K(t.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"==typeof t){for(n in t)this.off(n,e,t[n]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=p),this.each(function(){K.event.remove(this,t,i,e)})}});var Nt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Pt=/<script|<style|<link/i,Lt=/checked\s*(?:[^=]|=\s*.checked.)/i,zt=/^true\/(.*)/,Mt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;K.extend({htmlPrefilter:function(t){return t.replace(Nt,"<$1></$2>")},clone:function(t,e,i){var s,n,o,r,a=t.cloneNode(!0),l=K.contains(t.ownerDocument,t);if(!(J.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||K.isXMLDoc(t)))for(r=h(a),s=0,n=(o=h(t)).length;s<n;s++)x(o[s],r[s]);if(e)if(i)for(o=o||h(t),r=r||h(a),s=0,n=o.length;s<n;s++)w(o[s],r[s]);else w(t,a);return(r=h(a,"script")).length>0&&c(r,!l&&h(t,"script")),a},cleanData:function(t){for(var e,i,s,n=K.event.special,o=0;void 0!==(i=t[o]);o++)if(vt(i)){if(e=i[yt.expando]){if(e.events)for(s in e.events)n[s]?K.event.remove(i,s):K.removeEvent(i,s,e.handle);i[yt.expando]=void 0}i[wt.expando]&&(i[wt.expando]=void 0)}}}),K.fn.extend({domManip:b,detach:function(t){return T(this,t,!0)},remove:function(t){return T(this,t)},text:function(t){return mt(this,function(t){return void 0===t?K.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return b(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){m(this,t).appendChild(t)}})},prepend:function(){return b(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=m(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return b(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return b(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(K.cleanData(h(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return K.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},i=0,s=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!At[($t.exec(t)||["",""])[1].toLowerCase()]){t=K.htmlPrefilter(t);try{for(;i<s;i++)1===(e=this[i]||{}).nodeType&&(K.cleanData(h(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return b(this,arguments,function(e){var i=this.parentNode;K.inArray(this,t)<0&&(K.cleanData(h(this)),i&&i.replaceChild(e,this))},t)}}),K.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){K.fn[t]=function(t){for(var i,s=[],n=K(t),o=n.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),K(n[r])[e](i),Y.apply(s,i.get());return this.pushStack(s)}});var qt,It={HTML:"block",BODY:"block"},Wt=/^margin/,Rt=new RegExp("^("+Tt+")(?!px)[a-z%]+$","i"),Ft=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)},Bt=function(t,e,i,s){var n,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];n=i.apply(t,s||[]);for(o in e)t.style[o]=r[o];return n},Xt=B.documentElement;!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Xt.appendChild(r);var e=t.getComputedStyle(a);i="1%"!==e.top,o="2px"===e.marginLeft,s="4px"===e.width,a.style.marginRight="50%",n="4px"===e.marginRight,Xt.removeChild(r)}var i,s,n,o,r=B.createElement("div"),a=B.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",J.clearCloneStyle="content-box"===a.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(a),K.extend(J,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return null==s&&e(),s},pixelMarginRight:function(){return null==s&&e(),n},reliableMarginLeft:function(){return null==s&&e(),o},reliableMarginRight:function(){var e,i=a.appendChild(B.createElement("div"));return i.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",a.style.width="1px",Xt.appendChild(r),e=!parseFloat(t.getComputedStyle(i).marginRight),Xt.removeChild(r),a.removeChild(i),e}}))}();var Ut=/^(none|table(?!-c[ea]).+)/,Yt={position:"absolute",visibility:"hidden",display:"block"},Qt={letterSpacing:"0",fontWeight:"400"},Vt=["Webkit","O","Moz","ms"],Gt=B.createElement("div").style;K.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=S(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,i,s){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var n,o,r,a=K.camelCase(e),h=t.style;if(e=K.cssProps[a]||(K.cssProps[a]=$(a)||a),r=K.cssHooks[e]||K.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(n=r.get(t,!1,s))?n:h[e];"string"==(o=typeof i)&&(n=kt.exec(i))&&n[1]&&(i=l(t,e,n),o="number"),null!=i&&i==i&&("number"===o&&(i+=n&&n[3]||(K.cssNumber[a]?"":"px")),J.clearCloneStyle||""!==i||0!==e.indexOf("background")||(h[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,s))||(h[e]=i))}},css:function(t,e,i,s){var n,o,r,a=K.camelCase(e);return e=K.cssProps[a]||(K.cssProps[a]=$(a)||a),(r=K.cssHooks[e]||K.cssHooks[a])&&"get"in r&&(n=r.get(t,!0,i)),void 0===n&&(n=S(t,e,s)),"normal"===n&&e in Qt&&(n=Qt[e]),""===i||i?(o=parseFloat(n),!0===i||isFinite(o)?o||0:n):n}}),K.each(["height","width"],function(t,e){K.cssHooks[e]={get:function(t,i,s){if(i)return Ut.test(K.css(t,"display"))&&0===t.offsetWidth?Bt(t,Yt,function(){return D(t,e,s)}):D(t,e,s)},set:function(t,i,s){var n,o=s&&Ft(t),r=s&&A(t,e,s,"border-box"===K.css(t,"boxSizing",!1,o),o);return r&&(n=kt.exec(i))&&"px"!==(n[3]||"px")&&(t.style[e]=i,i=K.css(t,e)),E(0,i,r)}}}),K.cssHooks.marginLeft=_(J.reliableMarginLeft,function(t,e){if(e)return(parseFloat(S(t,"marginLeft"))||t.getBoundingClientRect().left-Bt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),K.cssHooks.marginRight=_(J.reliableMarginRight,function(t,e){if(e)return Bt(t,{display:"inline-block"},S,[t,"marginRight"])}),K.each({margin:"",padding:"",border:"Width"},function(t,e){K.cssHooks[t+e]={expand:function(i){for(var s=0,n={},o="string"==typeof i?i.split(" "):[i];s<4;s++)n[t+Ct[s]+e]=o[s]||o[s-2]||o[0];return n}},Wt.test(t)||(K.cssHooks[t+e].set=E)}),K.fn.extend({css:function(t,e){return mt(this,function(t,e,i){var s,n,o={},r=0;if(K.isArray(e)){for(s=Ft(t),n=e.length;r<n;r++)o[e[r]]=K.css(t,e[r],!1,s);return o}return void 0!==i?K.style(t,e,i):K.css(t,e)},t,e,arguments.length>1)},show:function(){return j(this,!0)},hide:function(){return j(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){St(this)?K(this).show():K(this).hide()})}}),K.Tween=O,(O.prototype={constructor:O,init:function(t,e,i,s,n,o){this.elem=t,this.prop=i,this.easing=n||K.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=s,this.unit=o||(K.cssNumber[i]?"":"px")},cur:function(){var t=O.propHooks[this.prop];return t&&t.get?t.get(this):O.propHooks._default.get(this)},run:function(t){var e,i=O.propHooks[this.prop];return this.options.duration?this.pos=e=K.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):O.propHooks._default.set(this),this}}).init.prototype=O.prototype,(O.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=K.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){K.fx.step[t.prop]?K.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[K.cssProps[t.prop]]&&!K.cssHooks[t.prop]?t.elem[t.prop]=t.now:K.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=O.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},K.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},K.fx=O.prototype.init,K.fx.step={};var Zt,Jt,Kt=/^(?:toggle|show|hide)$/,te=/queueHooks$/;K.Animation=K.extend(L,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return l(i.elem,t,kt.exec(e),i),i}]},tweener:function(t,e){K.isFunction(t)?(e=t,t=["*"]):t=t.match(ft);for(var i,s=0,n=t.length;s<n;s++)i=t[s],L.tweeners[i]=L.tweeners[i]||[],L.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var s,n,o,r,a,l,h,c=this,d={},u=t.style,p=t.nodeType&&St(t),f=yt.get(t,"fxshow");i.queue||(null==(a=K._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,c.always(function(){c.always(function(){a.unqueued--,K.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[u.overflow,u.overflowX,u.overflowY],"inline"===("none"===(h=K.css(t,"display"))?yt.get(t,"olddisplay")||C(t.nodeName):h)&&"none"===K.css(t,"float")&&(u.display="inline-block")),i.overflow&&(u.overflow="hidden",c.always(function(){u.overflow=i.overflow[0],u.overflowX=i.overflow[1],u.overflowY=i.overflow[2]}));for(s in e)if(n=e[s],Kt.exec(n)){if(delete e[s],o=o||"toggle"===n,n===(p?"hide":"show")){if("show"!==n||!f||void 0===f[s])continue;p=!0}d[s]=f&&f[s]||K.style(t,s)}else h=void 0;if(K.isEmptyObject(d))"inline"===("none"===h?C(t.nodeName):h)&&(u.display=h);else{f?"hidden"in f&&(p=f.hidden):f=yt.access(t,"fxshow",{}),o&&(f.hidden=!p),p?K(t).show():c.done(function(){K(t).hide()}),c.done(function(){var e;yt.remove(t,"fxshow");for(e in d)K.style(t,e,d[e])});for(s in d)r=P(p?f[s]:0,s,c),s in f||(f[s]=r.start,p&&(r.end=r.start,r.start="width"===s||"height"===s?1:0))}}],prefilter:function(t,e){e?L.prefilters.unshift(t):L.prefilters.push(t)}}),K.speed=function(t,e,i){var s=t&&"object"==typeof t?K.extend({},t):{complete:i||!i&&e||K.isFunction(t)&&t,duration:t,easing:i&&e||e&&!K.isFunction(e)&&e};return s.duration=K.fx.off?0:"number"==typeof s.duration?s.duration:s.duration in K.fx.speeds?K.fx.speeds[s.duration]:K.fx.speeds._default,null!=s.queue&&!0!==s.queue||(s.queue="fx"),s.old=s.complete,s.complete=function(){K.isFunction(s.old)&&s.old.call(this),s.queue&&K.dequeue(this,s.queue)},s},K.fn.extend({fadeTo:function(t,e,i,s){return this.filter(St).css("opacity",0).show().end().animate({opacity:e},t,i,s)},animate:function(t,e,i,s){var n=K.isEmptyObject(t),o=K.speed(e,i,s),r=function(){var e=L(this,K.extend({},t),o);(n||yt.get(this,"finish"))&&e.stop(!0)};return r.finish=r,n||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var s=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,n=null!=t&&t+"queueHooks",o=K.timers,r=yt.get(this);if(n)r[n]&&r[n].stop&&s(r[n]);else for(n in r)r[n]&&r[n].stop&&te.test(n)&&s(r[n]);for(n=o.length;n--;)o[n].elem!==this||null!=t&&o[n].queue!==t||(o[n].anim.stop(i),e=!1,o.splice(n,1));!e&&i||K.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,i=yt.get(this),s=i[t+"queue"],n=i[t+"queueHooks"],o=K.timers,r=s?s.length:0;for(i.finish=!0,K.queue(this,t,[]),n&&n.stop&&n.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)s[e]&&s[e].finish&&s[e].finish.call(this);delete i.finish})}}),K.each(["toggle","show","hide"],function(t,e){var i=K.fn[e];K.fn[e]=function(t,s,n){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(N(e,!0),t,s,n)}}),K.each({slideDown:N("show"),slideUp:N("hide"),slideToggle:N("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){K.fn[t]=function(t,i,s){return this.animate(e,t,i,s)}}),K.timers=[],K.fx.tick=function(){var t,e=0,i=K.timers;for(Zt=K.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||K.fx.stop(),Zt=void 0},K.fx.timer=function(t){K.timers.push(t),t()?K.fx.start():K.timers.pop()},K.fx.interval=13,K.fx.start=function(){Jt||(Jt=t.setInterval(K.fx.tick,K.fx.interval))},K.fx.stop=function(){t.clearInterval(Jt),Jt=null},K.fx.speeds={slow:600,fast:200,_default:400},K.fn.delay=function(e,i){return e=K.fx?K.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,s){var n=t.setTimeout(i,e);s.stop=function(){t.clearTimeout(n)}})},function(){var t=B.createElement("input"),e=B.createElement("select"),i=e.appendChild(B.createElement("option"));t.type="checkbox",J.checkOn=""!==t.value,J.optSelected=i.selected,e.disabled=!0,J.optDisabled=!i.disabled,(t=B.createElement("input")).value="t",t.type="radio",J.radioValue="t"===t.value}();var ee,ie=K.expr.attrHandle;K.fn.extend({attr:function(t,e){return mt(this,K.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){K.removeAttr(this,t)})}}),K.extend({attr:function(t,e,i){var s,n,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?K.prop(t,e,i):(1===o&&K.isXMLDoc(t)||(e=e.toLowerCase(),n=K.attrHooks[e]||(K.expr.match.bool.test(e)?ee:void 0)),void 0!==i?null===i?void K.removeAttr(t,e):n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:(t.setAttribute(e,i+""),i):n&&"get"in n&&null!==(s=n.get(t,e))?s:null==(s=K.find.attr(t,e))?void 0:s)},attrHooks:{type:{set:function(t,e){if(!J.radioValue&&"radio"===e&&K.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,s,n=0,o=e&&e.match(ft);if(o&&1===t.nodeType)for(;i=o[n++];)s=K.propFix[i]||i,K.expr.match.bool.test(i)&&(t[s]=!1),t.removeAttribute(i)}}),ee={set:function(t,e,i){return!1===e?K.removeAttr(t,i):t.setAttribute(i,i),i}},K.each(K.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ie[e]||K.find.attr;ie[e]=function(t,e,s){var n,o;return s||(o=ie[e],ie[e]=n,n=null!=i(t,e,s)?e.toLowerCase():null,ie[e]=o),n}});var se=/^(?:input|select|textarea|button)$/i,ne=/^(?:a|area)$/i;K.fn.extend({prop:function(t,e){return mt(this,K.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[K.propFix[t]||t]})}}),K.extend({prop:function(t,e,i){var s,n,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&K.isXMLDoc(t)||(e=K.propFix[e]||e,n=K.propHooks[e]),void 0!==i?n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:t[e]=i:n&&"get"in n&&null!==(s=n.get(t,e))?s:t[e]},propHooks:{tabIndex:{get:function(t){var e=K.find.attr(t,"tabindex");return e?parseInt(e,10):se.test(t.nodeName)||ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),J.optSelected||(K.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),K.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){K.propFix[this.toLowerCase()]=this});var oe=/[\t\r\n\f]/g;K.fn.extend({addClass:function(t){var e,i,s,n,o,r,a,l=0;if(K.isFunction(t))return this.each(function(e){K(this).addClass(t.call(this,e,z(this)))});if("string"==typeof t&&t)for(e=t.match(ft)||[];i=this[l++];)if(n=z(i),s=1===i.nodeType&&(" "+n+" ").replace(oe," ")){for(r=0;o=e[r++];)s.indexOf(" "+o+" ")<0&&(s+=o+" ");n!==(a=K.trim(s))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,s,n,o,r,a,l=0;if(K.isFunction(t))return this.each(function(e){K(this).removeClass(t.call(this,e,z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(ft)||[];i=this[l++];)if(n=z(i),s=1===i.nodeType&&(" "+n+" ").replace(oe," ")){for(r=0;o=e[r++];)for(;s.indexOf(" "+o+" ")>-1;)s=s.replace(" "+o+" "," ");n!==(a=K.trim(s))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):K.isFunction(t)?this.each(function(i){K(this).toggleClass(t.call(this,i,z(this),e),e)}):this.each(function(){var e,s,n,o;if("string"===i)for(s=0,n=K(this),o=t.match(ft)||[];e=o[s++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==t&&"boolean"!==i||((e=z(this))&&yt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":yt.get(this,"__className__")||""))})},hasClass:function(t){var e,i,s=0;for(e=" "+t+" ";i=this[s++];)if(1===i.nodeType&&(" "+z(i)+" ").replace(oe," ").indexOf(e)>-1)return!0;return!1}});var re=/\r/g,ae=/[\x20\t\r\n\f]+/g;K.fn.extend({val:function(t){var e,i,s,n=this[0];{if(arguments.length)return s=K.isFunction(t),this.each(function(i){var n;1===this.nodeType&&(null==(n=s?t.call(this,i,K(this).val()):t)?n="":"number"==typeof n?n+="":K.isArray(n)&&(n=K.map(n,function(t){return null==t?"":t+""})),(e=K.valHooks[this.type]||K.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,n,"value")||(this.value=n))});if(n)return(e=K.valHooks[n.type]||K.valHooks[n.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(n,"value"))?i:"string"==typeof(i=n.value)?i.replace(re,""):null==i?"":i}}}),K.extend({valHooks:{option:{get:function(t){var e=K.find.attr(t,"value");return null!=e?e:K.trim(K.text(t)).replace(ae," ")}},select:{get:function(t){for(var e,i,s=t.options,n=t.selectedIndex,o="select-one"===t.type||n<0,r=o?null:[],a=o?n+1:s.length,l=n<0?a:o?n:0;l<a;l++)if(((i=s[l]).selected||l===n)&&(J.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!K.nodeName(i.parentNode,"optgroup"))){if(e=K(i).val(),o)return e;r.push(e)}return r},set:function(t,e){for(var i,s,n=t.options,o=K.makeArray(e),r=n.length;r--;)((s=n[r]).selected=K.inArray(K.valHooks.option.get(s),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),K.each(["radio","checkbox"],function(){K.valHooks[this]={set:function(t,e){if(K.isArray(e))return t.checked=K.inArray(K(t).val(),e)>-1}},J.checkOn||(K.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var le=/^(?:focusinfocus|focusoutblur)$/;K.extend(K.event,{trigger:function(e,i,s,n){var o,r,a,l,h,c,d,u=[s||B],p=Z.call(e,"type")?e.type:e,f=Z.call(e,"namespace")?e.namespace.split("."):[];if(r=a=s=s||B,3!==s.nodeType&&8!==s.nodeType&&!le.test(p+K.event.triggered)&&(p.indexOf(".")>-1&&(p=(f=p.split(".")).shift(),f.sort()),h=p.indexOf(":")<0&&"on"+p,e=e[K.expando]?e:new K.Event(p,"object"==typeof e&&e),e.isTrigger=n?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=s),i=null==i?[e]:K.makeArray(i,[e]),d=K.event.special[p]||{},n||!d.trigger||!1!==d.trigger.apply(s,i))){if(!n&&!d.noBubble&&!K.isWindow(s)){for(l=d.delegateType||p,le.test(l+p)||(r=r.parentNode);r;r=r.parentNode)u.push(r),a=r;a===(s.ownerDocument||B)&&u.push(a.defaultView||a.parentWindow||t)}for(o=0;(r=u[o++])&&!e.isPropagationStopped();)e.type=o>1?l:d.bindType||p,(c=(yt.get(r,"events")||{})[e.type]&&yt.get(r,"handle"))&&c.apply(r,i),(c=h&&r[h])&&c.apply&&vt(r)&&(e.result=c.apply(r,i),!1===e.result&&e.preventDefault());return e.type=p,n||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(u.pop(),i)||!vt(s)||h&&K.isFunction(s[p])&&!K.isWindow(s)&&((a=s[h])&&(s[h]=null),K.event.triggered=p,s[p](),K.event.triggered=void 0,a&&(s[h]=a)),e.result}},simulate:function(t,e,i){var s=K.extend(new K.Event,i,{type:t,isSimulated:!0});K.event.trigger(s,null,e)}}),K.fn.extend({trigger:function(t,e){return this.each(function(){K.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return K.event.trigger(t,e,i,!0)}}),K.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){K.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),K.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),J.focusin="onfocusin"in t,J.focusin||K.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){K.event.simulate(e,t.target,K.event.fix(t))};K.event.special[e]={setup:function(){var s=this.ownerDocument||this,n=yt.access(s,e);n||s.addEventListener(t,i,!0),yt.access(s,e,(n||0)+1)},teardown:function(){var s=this.ownerDocument||this,n=yt.access(s,e)-1;n?yt.access(s,e,n):(s.removeEventListener(t,i,!0),yt.remove(s,e))}}});var he=t.location,ce=K.now(),de=/\?/;K.parseJSON=function(t){return JSON.parse(t+"")},K.parseXML=function(e){var i;if(!e||"string"!=typeof e)return null;try{i=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||K.error("Invalid XML: "+e),i};var ue=/#.*$/,pe=/([?&])_=[^&]*/,fe=/^(.*?):[ \t]*([^\r\n]*)$/gm,ge=/^(?:GET|HEAD)$/,me=/^\/\//,ve={},ye={},we="*/".concat("*"),xe=B.createElement("a");xe.href=he.href,K.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:he.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(he.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":we,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":K.parseJSON,"text xml":K.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?I(I(t,K.ajaxSettings),e):I(K.ajaxSettings,t)},ajaxPrefilter:M(ve),ajaxTransport:M(ye),ajax:function(e,i){function s(e,i,s,a){var h,d,y,w,b,k=i;2!==x&&(x=2,l&&t.clearTimeout(l),n=void 0,r=a||"",T.readyState=e>0?4:0,h=e>=200&&e<300||304===e,s&&(w=function(t,e,i){for(var s,n,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===s&&(s=t.mimeType||e.getResponseHeader("Content-Type"));if(s)for(n in a)if(a[n]&&a[n].test(s)){l.unshift(n);break}if(l[0]in i)o=l[0];else{for(n in i){if(!l[0]||t.converters[n+" "+l[0]]){o=n;break}r||(r=n)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(u,T,s)),w=function(t,e,i,s){var n,o,r,a,l,h={},c=t.dataTypes.slice();if(c[1])for(r in t.converters)h[r.toLowerCase()]=t.converters[r];for(o=c.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&s&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=h[l+" "+o]||h["* "+o]))for(n in h)if((a=n.split(" "))[1]===o&&(r=h[l+" "+a[0]]||h["* "+a[0]])){!0===r?r=h[n]:!0!==h[n]&&(o=a[0],c.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(u,w,T,h),h?(u.ifModified&&((b=T.getResponseHeader("Last-Modified"))&&(K.lastModified[o]=b),(b=T.getResponseHeader("etag"))&&(K.etag[o]=b)),204===e||"HEAD"===u.type?k="nocontent":304===e?k="notmodified":(k=w.state,d=w.data,h=!(y=w.error))):(y=k,!e&&k||(k="error",e<0&&(e=0))),T.status=e,T.statusText=(i||k)+"",h?g.resolveWith(p,[d,k,T]):g.rejectWith(p,[T,k,y]),T.statusCode(v),v=void 0,c&&f.trigger(h?"ajaxSuccess":"ajaxError",[T,u,h?d:y]),m.fireWith(p,[T,k]),c&&(f.trigger("ajaxComplete",[T,u]),--K.active||K.event.trigger("ajaxStop")))}"object"==typeof e&&(i=e,e=void 0),i=i||{};var n,o,r,a,l,h,c,d,u=K.ajaxSetup({},i),p=u.context||u,f=u.context&&(p.nodeType||p.jquery)?K(p):K.event,g=K.Deferred(),m=K.Callbacks("once memory"),v=u.statusCode||{},y={},w={},x=0,b="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(2===x){if(!a)for(a={};e=fe.exec(r);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===x?r:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return x||(t=w[i]=w[i]||t,y[t]=e),this},overrideMimeType:function(t){return x||(u.mimeType=t),this},statusCode:function(t){var e;if(t)if(x<2)for(e in t)v[e]=[v[e],t[e]];else T.always(t[T.status]);return this},abort:function(t){var e=t||b;return n&&n.abort(e),s(0,e),this}};if(g.promise(T).complete=m.add,T.success=T.done,T.error=T.fail,u.url=((e||u.url||he.href)+"").replace(ue,"").replace(me,he.protocol+"//"),u.type=i.method||i.type||u.method||u.type,u.dataTypes=K.trim(u.dataType||"*").toLowerCase().match(ft)||[""],null==u.crossDomain){h=B.createElement("a");try{h.href=u.url,h.href=h.href,u.crossDomain=xe.protocol+"//"+xe.host!=h.protocol+"//"+h.host}catch(t){u.crossDomain=!0}}if(u.data&&u.processData&&"string"!=typeof u.data&&(u.data=K.param(u.data,u.traditional)),q(ve,u,i,T),2===x)return T;(c=K.event&&u.global)&&0==K.active++&&K.event.trigger("ajaxStart"),u.type=u.type.toUpperCase(),u.hasContent=!ge.test(u.type),o=u.url,u.hasContent||(u.data&&(o=u.url+=(de.test(o)?"&":"?")+u.data,delete u.data),!1===u.cache&&(u.url=pe.test(o)?o.replace(pe,"$1_="+ce++):o+(de.test(o)?"&":"?")+"_="+ce++)),u.ifModified&&(K.lastModified[o]&&T.setRequestHeader("If-Modified-Since",K.lastModified[o]),K.etag[o]&&T.setRequestHeader("If-None-Match",K.etag[o])),(u.data&&u.hasContent&&!1!==u.contentType||i.contentType)&&T.setRequestHeader("Content-Type",u.contentType),T.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+("*"!==u.dataTypes[0]?", "+we+"; q=0.01":""):u.accepts["*"]);for(d in u.headers)T.setRequestHeader(d,u.headers[d]);if(u.beforeSend&&(!1===u.beforeSend.call(p,T,u)||2===x))return T.abort();b="abort";for(d in{success:1,error:1,complete:1})T[d](u[d]);if(n=q(ye,u,i,T)){if(T.readyState=1,c&&f.trigger("ajaxSend",[T,u]),2===x)return T;u.async&&u.timeout>0&&(l=t.setTimeout(function(){T.abort("timeout")},u.timeout));try{x=1,n.send(y,s)}catch(t){if(!(x<2))throw t;s(-1,t)}}else s(-1,"No Transport");return T},getJSON:function(t,e,i){return K.get(t,e,i,"json")},getScript:function(t,e){return K.get(t,void 0,e,"script")}}),K.each(["get","post"],function(t,e){K[e]=function(t,i,s,n){return K.isFunction(i)&&(n=n||s,s=i,i=void 0),K.ajax(K.extend({url:t,type:e,dataType:n,data:i,success:s},K.isPlainObject(t)&&t))}}),K._evalUrl=function(t){return K.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},K.fn.extend({wrapAll:function(t){var e;return K.isFunction(t)?this.each(function(e){K(this).wrapAll(t.call(this,e))}):(this[0]&&(e=K(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return K.isFunction(t)?this.each(function(e){K(this).wrapInner(t.call(this,e))}):this.each(function(){var e=K(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=K.isFunction(t);return this.each(function(i){K(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){K.nodeName(this,"body")||K(this).replaceWith(this.childNodes)}).end()}}),K.expr.filters.hidden=function(t){return!K.expr.filters.visible(t)},K.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var be=/%20/g,Te=/\[\]$/,ke=/\r?\n/g,Ce=/^(?:submit|button|image|reset|file)$/i,Se=/^(?:input|select|textarea|keygen)/i;K.param=function(t,e){var i,s=[],n=function(t,e){e=K.isFunction(e)?e():null==e?"":e,s[s.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=K.ajaxSettings&&K.ajaxSettings.traditional),K.isArray(t)||t.jquery&&!K.isPlainObject(t))K.each(t,function(){n(this.name,this.value)});else for(i in t)W(i,t[i],e,n);return s.join("&").replace(be,"+")},K.fn.extend({serialize:function(){return K.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=K.prop(this,"elements");return t?K.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!K(this).is(":disabled")&&Se.test(this.nodeName)&&!Ce.test(t)&&(this.checked||!_t.test(t))}).map(function(t,e){var i=K(this).val();return null==i?null:K.isArray(i)?K.map(i,function(t){return{name:e.name,value:t.replace(ke,"\r\n")}}):{name:e.name,value:i.replace(ke,"\r\n")}}).get()}}),K.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var _e={0:200,1223:204},$e=K.ajaxSettings.xhr();J.cors=!!$e&&"withCredentials"in $e,J.ajax=$e=!!$e,K.ajaxTransport(function(e){var i,s;if(J.cors||$e&&!e.crossDomain)return{send:function(n,o){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)a.setRequestHeader(r,n[r]);i=function(t){return function(){i&&(i=s=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(_e[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),s=a.onerror=i("error"),void 0!==a.onabort?a.onabort=s:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){i&&s()})},i=i("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(i)throw t}},abort:function(){i&&i()}}}),K.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return K.globalEval(t),t}}}),K.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),K.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(s,n){e=K("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&n("error"===t.type?404:200,t.type)}),B.head.appendChild(e[0])},abort:function(){i&&i()}}}});var Ee=[],Ae=/(=)\?(?=&|$)|\?\?/;K.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ee.pop()||K.expando+"_"+ce++;return this[t]=!0,t}}),K.ajaxPrefilter("json jsonp",function(e,i,s){var n,o,r,a=!1!==e.jsonp&&(Ae.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ae.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=K.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ae,"$1"+n):!1!==e.jsonp&&(e.url+=(de.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return r||K.error(n+" was not called"),r[0]},e.dataTypes[0]="json",o=t[n],t[n]=function(){r=arguments},s.always(function(){void 0===o?K(t).removeProp(n):t[n]=o,e[n]&&(e.jsonpCallback=i.jsonpCallback,Ee.push(n)),r&&K.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),K.parseHTML=function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||B;var s=lt.exec(t),n=!i&&[];return s?[e.createElement(s[1])]:(s=d([t],e,n),n&&n.length&&K(n).remove(),K.merge([],s.childNodes))};var De=K.fn.load;K.fn.load=function(t,e,i){if("string"!=typeof t&&De)return De.apply(this,arguments);var s,n,o,r=this,a=t.indexOf(" ");return a>-1&&(s=K.trim(t.slice(a)),t=t.slice(0,a)),K.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(n="POST"),r.length>0&&K.ajax({url:t,type:n||"GET",dataType:"html",data:e}).done(function(t){o=arguments,r.html(s?K("<div>").append(K.parseHTML(t)).find(s):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,o||[t.responseText,e,t])})}),this},K.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){K.fn[e]=function(t){return this.on(e,t)}}),K.expr.filters.animated=function(t){return K.grep(K.timers,function(e){return t===e.elem}).length},K.offset={setOffset:function(t,e,i){var s,n,o,r,a,l,h=K.css(t,"position"),c=K(t),d={};"static"===h&&(t.style.position="relative"),a=c.offset(),o=K.css(t,"top"),l=K.css(t,"left"),("absolute"===h||"fixed"===h)&&(o+l).indexOf("auto")>-1?(r=(s=c.position()).top,n=s.left):(r=parseFloat(o)||0,n=parseFloat(l)||0),K.isFunction(e)&&(e=e.call(t,i,K.extend({},a))),null!=e.top&&(d.top=e.top-a.top+r),null!=e.left&&(d.left=e.left-a.left+n),"using"in e?e.using.call(t,d):c.css(d)}},K.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){K.offset.setOffset(this,t,e)});var e,i,s=this[0],n={top:0,left:0},o=s&&s.ownerDocument;if(o)return e=o.documentElement,K.contains(e,s)?(n=s.getBoundingClientRect(),i=R(o),{top:n.top+i.pageYOffset-e.clientTop,left:n.left+i.pageXOffset-e.clientLeft}):n},position:function(){if(this[0]){var t,e,i=this[0],s={top:0,left:0};return"fixed"===K.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),K.nodeName(t[0],"html")||(s=t.offset()),s.top+=K.css(t[0],"borderTopWidth",!0),s.left+=K.css(t[0],"borderLeftWidth",!0)),{top:e.top-s.top-K.css(i,"marginTop",!0),left:e.left-s.left-K.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===K.css(t,"position");)t=t.offsetParent;return t||Xt})}}),K.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;K.fn[t]=function(s){return mt(this,function(t,s,n){var o=R(t);if(void 0===n)return o?o[e]:t[s];o?o.scrollTo(i?o.pageXOffset:n,i?n:o.pageYOffset):t[s]=n},t,s,arguments.length)}}),K.each(["top","left"],function(t,e){K.cssHooks[e]=_(J.pixelPosition,function(t,i){if(i)return i=S(t,e),Rt.test(i)?K(t).position()[e]+"px":i})}),K.each({Height:"height",Width:"width"},function(t,e){K.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,s){K.fn[s]=function(s,n){var o=arguments.length&&(i||"boolean"!=typeof s),r=i||(!0===s||!0===n?"margin":"border");return mt(this,function(e,i,s){var n;return K.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+t],n["scroll"+t],e.body["offset"+t],n["offset"+t],n["client"+t])):void 0===s?K.css(e,i,r):K.style(e,i,s,r)},e,o?s:void 0,o,null)}})}),K.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,s){return this.on(e,t,i,s)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},size:function(){return this.length}}),K.fn.andSelf=K.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return K});var je=t.jQuery,Oe=t.$;return K.noConflict=function(e){return t.$===K&&(t.$=Oe),e&&t.jQuery===K&&(t.jQuery=je),K},e||(t.jQuery=t.$=K),K}),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";var e=window.Slick||{};(e=function(){var e=0;return function(i,s){var n;this.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(i),appendDots:t(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return t('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},this.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},t.extend(this,this.initials),this.activeBreakpoint=null,this.animType=null,this.animProp=null,this.breakpoints=[],this.breakpointSettings=[],this.cssTransitions=!1,this.focussed=!1,this.interrupted=!1,this.hidden="hidden",this.paused=!0,this.positionProp=null,this.respondTo=null,this.rowCount=1,this.shouldClick=!0,this.$slider=t(i),this.$slidesCache=null,this.transformType=null,this.transitionType=null,this.visibilityChange="visibilitychange",this.windowWidth=0,this.windowTimer=null,n=t(i).data("slick")||{},this.options=t.extend({},this.defaults,s,n),this.currentSlide=this.options.initialSlide,this.originalSettings=this.options,void 0!==document.mozHidden?(this.hidden="mozHidden",this.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(this.hidden="webkitHidden",this.visibilityChange="webkitvisibilitychange"),this.autoPlay=t.proxy(this.autoPlay,this),this.autoPlayClear=t.proxy(this.autoPlayClear,this),this.autoPlayIterator=t.proxy(this.autoPlayIterator,this),this.changeSlide=t.proxy(this.changeSlide,this),this.clickHandler=t.proxy(this.clickHandler,this),this.selectHandler=t.proxy(this.selectHandler,this),this.setPosition=t.proxy(this.setPosition,this),this.swipeHandler=t.proxy(this.swipeHandler,this),this.dragHandler=t.proxy(this.dragHandler,this),this.keyHandler=t.proxy(this.keyHandler,this),this.instanceUid=e++,this.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,this.registerBreakpoints(),this.init(!0)}}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},e.prototype.addSlide=e.prototype.slickAdd=function(e,i,s){if("boolean"==typeof i)s=i,i=null;else if(i<0||i>=this.slideCount)return!1;this.unload(),"number"==typeof i?0===i&&0===this.$slides.length?t(e).appendTo(this.$slideTrack):s?t(e).insertBefore(this.$slides.eq(i)):t(e).insertAfter(this.$slides.eq(i)):!0===s?t(e).prependTo(this.$slideTrack):t(e).appendTo(this.$slideTrack),this.$slides=this.$slideTrack.children(this.options.slide),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.append(this.$slides),this.$slides.each(function(e,i){t(i).attr("data-slick-index",e)}),this.$slidesCache=this.$slides,this.reinit()},e.prototype.animateHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var t=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.animate({height:t},this.options.speed)}},e.prototype.animateSlide=function(e,i){var s={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(e=-e),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:e},n.options.speed,n.options.easing,i):n.$slideTrack.animate({top:e},n.options.speed,n.options.easing,i):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),t({animStart:n.currentLeft}).animate({animStart:e},{duration:n.options.speed,easing:n.options.easing,step:function(t){t=Math.ceil(t),!1===n.options.vertical?(s[n.animType]="translate("+t+"px, 0px)",n.$slideTrack.css(s)):(s[n.animType]="translate(0px,"+t+"px)",n.$slideTrack.css(s))},complete:function(){i&&i.call()}})):(n.applyTransition(),e=Math.ceil(e),!1===n.options.vertical?s[n.animType]="translate3d("+e+"px, 0px, 0px)":s[n.animType]="translate3d(0px,"+e+"px, 0px)",n.$slideTrack.css(s),i&&setTimeout(function(){n.disableTransition(),i.call()},n.options.speed))},e.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=t(e).not(this.$slider)),e},e.prototype.asNavFor=function(e){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each(function(){var i=t(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)})},e.prototype.applyTransition=function(t){var e={};!1===this.options.fade?e[this.transitionType]=this.transformType+" "+this.options.speed+"ms "+this.options.cssEase:e[this.transitionType]="opacity "+this.options.speed+"ms "+this.options.cssEase,!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},e.prototype.autoPlay=function(){this.autoPlayClear(),this.slideCount>this.options.slidesToShow&&(this.autoPlayTimer=setInterval(this.autoPlayIterator,this.options.autoplaySpeed))},e.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},e.prototype.autoPlayIterator=function(){var t=this.currentSlide+this.options.slidesToScroll;this.paused||this.interrupted||this.focussed||(!1===this.options.infinite&&(1===this.direction&&this.currentSlide+1===this.slideCount-1?this.direction=0:0===this.direction&&(t=this.currentSlide-this.options.slidesToScroll,this.currentSlide-1==0&&(this.direction=1))),this.slideHandler(t))},e.prototype.buildArrows=function(){!0===this.options.arrows&&(this.$prevArrow=t(this.options.prevArrow).addClass("slick-arrow"),this.$nextArrow=t(this.options.nextArrow).addClass("slick-arrow"),this.slideCount>this.options.slidesToShow?(this.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),this.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.prependTo(this.options.appendArrows),this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.appendTo(this.options.appendArrows),!0!==this.options.infinite&&this.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):this.$prevArrow.add(this.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},e.prototype.buildDots=function(){var e,i;if(!0===this.options.dots&&this.slideCount>this.options.slidesToShow){for(this.$slider.addClass("slick-dotted"),i=t("<ul />").addClass(this.options.dotsClass),e=0;e<=this.getDotCount();e+=1)i.append(t("<li />").append(this.options.customPaging.call(this,this,e)));this.$dots=i.appendTo(this.options.appendDots),this.$dots.find("li").first().addClass("slick-active")}},e.prototype.buildOut=function(){this.$slides=this.$slider.children(this.options.slide+":not(.slick-cloned)").addClass("slick-slide"),this.slideCount=this.$slides.length,this.$slides.each(function(e,i){t(i).attr("data-slick-index",e).data("originalStyling",t(i).attr("style")||"")}),this.$slider.addClass("slick-slider"),this.$slideTrack=0===this.slideCount?t('<div class="slick-track"/>').appendTo(this.$slider):this.$slides.wrapAll('<div class="slick-track"/>').parent(),this.$list=this.$slideTrack.wrap('<div class="slick-list"/>').parent(),this.$slideTrack.css("opacity",0),!0!==this.options.centerMode&&!0!==this.options.swipeToSlide||(this.options.slidesToScroll=1),t("img[data-lazy]",this.$slider).not("[src]").addClass("slick-loading"),this.setupInfinite(),this.buildArrows(),this.buildDots(),this.updateDots(),this.setSlideClasses("number"==typeof this.currentSlide?this.currentSlide:0),!0===this.options.draggable&&this.$list.addClass("draggable")},e.prototype.buildRows=function(){var t,e,i,s,n,o,r;if(s=document.createDocumentFragment(),o=this.$slider.children(),this.options.rows>0){for(r=this.options.slidesPerRow*this.options.rows,n=Math.ceil(o.length/r),t=0;t<n;t++){var a=document.createElement("div");for(e=0;e<this.options.rows;e++){var l=document.createElement("div");for(i=0;i<this.options.slidesPerRow;i++){var h=t*r+(e*this.options.slidesPerRow+i);o.get(h)&&l.appendChild(o.get(h))}a.appendChild(l)}s.appendChild(a)}this.$slider.empty().append(s),this.$slider.children().children().children().css({width:100/this.options.slidesPerRow+"%",display:"inline-block"})}},e.prototype.checkResponsive=function(e,i){var s,n,o,r=!1,a=this.$slider.width(),l=window.innerWidth||t(window).width();if("window"===this.respondTo?o=l:"slider"===this.respondTo?o=a:"min"===this.respondTo&&(o=Math.min(l,a)),this.options.responsive&&this.options.responsive.length&&null!==this.options.responsive){n=null;for(s in this.breakpoints)this.breakpoints.hasOwnProperty(s)&&(!1===this.originalSettings.mobileFirst?o<this.breakpoints[s]&&(n=this.breakpoints[s]):o>this.breakpoints[s]&&(n=this.breakpoints[s]));null!==n?null!==this.activeBreakpoint?(n!==this.activeBreakpoint||i)&&(this.activeBreakpoint=n,"unslick"===this.breakpointSettings[n]?this.unslick(n):(this.options=t.extend({},this.originalSettings,this.breakpointSettings[n]),!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e)),r=n):(this.activeBreakpoint=n,"unslick"===this.breakpointSettings[n]?this.unslick(n):(this.options=t.extend({},this.originalSettings,this.breakpointSettings[n]),!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e)),r=n):null!==this.activeBreakpoint&&(this.activeBreakpoint=null,this.options=this.originalSettings,!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e),r=n),e||!1===r||this.$slider.trigger("breakpoint",[this,r])}},e.prototype.changeSlide=function(e,i){var s,n,o,r=t(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),o=this.slideCount%this.options.slidesToScroll!=0,s=o?0:(this.slideCount-this.currentSlide)%this.options.slidesToScroll,e.data.message){case"previous":n=0===s?this.options.slidesToScroll:this.options.slidesToShow-s,this.slideCount>this.options.slidesToShow&&this.slideHandler(this.currentSlide-n,!1,i);break;case"next":n=0===s?this.options.slidesToScroll:s,this.slideCount>this.options.slidesToShow&&this.slideHandler(this.currentSlide+n,!1,i);break;case"index":var a=0===e.data.index?0:e.data.index||r.index()*this.options.slidesToScroll;this.slideHandler(this.checkNavigable(a),!1,i),r.children().trigger("focus");break;default:return}},e.prototype.checkNavigable=function(t){var e,i;if(e=this.getNavigableIndexes(),i=0,t>e[e.length-1])t=e[e.length-1];else for(var s in e){if(t<e[s]){t=i;break}i=e[s]}return t},e.prototype.cleanUpEvents=function(){this.options.dots&&null!==this.$dots&&(t("li",this.$dots).off("click.slick",this.changeSlide).off("mouseenter.slick",t.proxy(this.interrupt,this,!0)).off("mouseleave.slick",t.proxy(this.interrupt,this,!1)),!0===this.options.accessibility&&this.$dots.off("keydown.slick",this.keyHandler)),this.$slider.off("focus.slick blur.slick"),!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow&&this.$prevArrow.off("click.slick",this.changeSlide),this.$nextArrow&&this.$nextArrow.off("click.slick",this.changeSlide),!0===this.options.accessibility&&(this.$prevArrow&&this.$prevArrow.off("keydown.slick",this.keyHandler),this.$nextArrow&&this.$nextArrow.off("keydown.slick",this.keyHandler))),this.$list.off("touchstart.slick mousedown.slick",this.swipeHandler),this.$list.off("touchmove.slick mousemove.slick",this.swipeHandler),this.$list.off("touchend.slick mouseup.slick",this.swipeHandler),this.$list.off("touchcancel.slick mouseleave.slick",this.swipeHandler),this.$list.off("click.slick",this.clickHandler),t(document).off(this.visibilityChange,this.visibility),this.cleanUpSlideEvents(),!0===this.options.accessibility&&this.$list.off("keydown.slick",this.keyHandler),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().off("click.slick",this.selectHandler),t(window).off("orientationchange.slick.slick-"+this.instanceUid,this.orientationChange),t(window).off("resize.slick.slick-"+this.instanceUid,this.resize),t("[draggable!=true]",this.$slideTrack).off("dragstart",this.preventDefault),t(window).off("load.slick.slick-"+this.instanceUid,this.setPosition)},e.prototype.cleanUpSlideEvents=function(){this.$list.off("mouseenter.slick",t.proxy(this.interrupt,this,!0)),this.$list.off("mouseleave.slick",t.proxy(this.interrupt,this,!1))},e.prototype.cleanUpRows=function(){var t;this.options.rows>0&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},e.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},e.prototype.destroy=function(e){this.autoPlayClear(),this.touchObject={},this.cleanUpEvents(),t(".slick-cloned",this.$slider).detach(),this.$dots&&this.$dots.remove(),this.$prevArrow&&this.$prevArrow.length&&(this.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.remove()),this.$nextArrow&&this.$nextArrow.length&&(this.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.remove()),this.$slides&&(this.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){t(this).attr("style",t(this).data("originalStyling"))}),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.detach(),this.$list.detach(),this.$slider.append(this.$slides)),this.cleanUpRows(),this.$slider.removeClass("slick-slider"),this.$slider.removeClass("slick-initialized"),this.$slider.removeClass("slick-dotted"),this.unslicked=!0,e||this.$slider.trigger("destroy",[this])},e.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},e.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},e.prototype.fadeSlideOut=function(t){!1===this.cssTransitions?this.$slides.eq(t).animate({opacity:0,zIndex:this.options.zIndex-2},this.options.speed,this.options.easing):(this.applyTransition(t),this.$slides.eq(t).css({opacity:0,zIndex:this.options.zIndex-2}))},e.prototype.filterSlides=e.prototype.slickFilter=function(t){null!==t&&(this.$slidesCache=this.$slides,this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.filter(t).appendTo(this.$slideTrack),this.reinit())},e.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var s=t(this);setTimeout(function(){e.options.pauseOnFocus&&(e.focussed=s.is(":focus"),e.autoPlay())},0)})},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){return this.currentSlide},e.prototype.getDotCount=function(){var t=0,e=0,i=0;if(!0===this.options.infinite)if(this.slideCount<=this.options.slidesToShow)++i;else for(;t<this.slideCount;)++i,t=e+this.options.slidesToScroll,e+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;else if(!0===this.options.centerMode)i=this.slideCount;else if(this.options.asNavFor)for(;t<this.slideCount;)++i,t=e+this.options.slidesToScroll,e+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;else i=1+Math.ceil((this.slideCount-this.options.slidesToShow)/this.options.slidesToScroll);return i-1},e.prototype.getLeft=function(t){var e,i,s,n,o=0;return this.slideOffset=0,i=this.$slides.first().outerHeight(!0),!0===this.options.infinite?(this.slideCount>this.options.slidesToShow&&(this.slideOffset=this.slideWidth*this.options.slidesToShow*-1,n=-1,!0===this.options.vertical&&!0===this.options.centerMode&&(2===this.options.slidesToShow?n=-1.5:1===this.options.slidesToShow&&(n=-2)),o=i*this.options.slidesToShow*n),this.slideCount%this.options.slidesToScroll!=0&&t+this.options.slidesToScroll>this.slideCount&&this.slideCount>this.options.slidesToShow&&(t>this.slideCount?(this.slideOffset=(this.options.slidesToShow-(t-this.slideCount))*this.slideWidth*-1,o=(this.options.slidesToShow-(t-this.slideCount))*i*-1):(this.slideOffset=this.slideCount%this.options.slidesToScroll*this.slideWidth*-1,o=this.slideCount%this.options.slidesToScroll*i*-1))):t+this.options.slidesToShow>this.slideCount&&(this.slideOffset=(t+this.options.slidesToShow-this.slideCount)*this.slideWidth,o=(t+this.options.slidesToShow-this.slideCount)*i),this.slideCount<=this.options.slidesToShow&&(this.slideOffset=0,o=0),!0===this.options.centerMode&&this.slideCount<=this.options.slidesToShow?this.slideOffset=this.slideWidth*Math.floor(this.options.slidesToShow)/2-this.slideWidth*this.slideCount/2:!0===this.options.centerMode&&!0===this.options.infinite?this.slideOffset+=this.slideWidth*Math.floor(this.options.slidesToShow/2)-this.slideWidth:!0===this.options.centerMode&&(this.slideOffset=0,this.slideOffset+=this.slideWidth*Math.floor(this.options.slidesToShow/2)),e=!1===this.options.vertical?t*this.slideWidth*-1+this.slideOffset:t*i*-1+o,!0===this.options.variableWidth&&(s=this.slideCount<=this.options.slidesToShow||!1===this.options.infinite?this.$slideTrack.children(".slick-slide").eq(t):this.$slideTrack.children(".slick-slide").eq(t+this.options.slidesToShow),e=!0===this.options.rtl?s[0]?-1*(this.$slideTrack.width()-s[0].offsetLeft-s.width()):0:s[0]?-1*s[0].offsetLeft:0,!0===this.options.centerMode&&(s=this.slideCount<=this.options.slidesToShow||!1===this.options.infinite?this.$slideTrack.children(".slick-slide").eq(t):this.$slideTrack.children(".slick-slide").eq(t+this.options.slidesToShow+1),e=!0===this.options.rtl?s[0]?-1*(this.$slideTrack.width()-s[0].offsetLeft-s.width()):0:s[0]?-1*s[0].offsetLeft:0,e+=(this.$list.width()-s.outerWidth())/2)),e},e.prototype.getOption=e.prototype.slickGetOption=function(t){return this.options[t]},e.prototype.getNavigableIndexes=function(){var t,e=0,i=0,s=[];for(!1===this.options.infinite?t=this.slideCount:(e=-1*this.options.slidesToScroll,i=-1*this.options.slidesToScroll,t=2*this.slideCount);e<t;)s.push(e),e=i+this.options.slidesToScroll,i+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;return s},e.prototype.getSlick=function(){return this},e.prototype.getSlideCount=function(){var e,i,s=this;return i=!0===s.options.centerMode?s.slideWidth*Math.floor(s.options.slidesToShow/2):0,!0===s.options.swipeToSlide?(s.$slideTrack.find(".slick-slide").each(function(n,o){if(o.offsetLeft-i+t(o).outerWidth()/2>-1*s.swipeLeft)return e=o,!1}),Math.abs(t(e).attr("data-slick-index")-s.currentSlide)||1):s.options.slidesToScroll},e.prototype.goTo=e.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},e.prototype.init=function(e){t(this.$slider).hasClass("slick-initialized")||(t(this.$slider).addClass("slick-initialized"),this.buildRows(),this.buildOut(),this.setProps(),this.startLoad(),this.loadSlider(),this.initializeEvents(),this.updateArrows(),this.updateDots(),this.checkResponsive(!0),this.focusHandler()),e&&this.$slider.trigger("init",[this]),!0===this.options.accessibility&&this.initADA(),this.options.autoplay&&(this.paused=!1,this.autoPlay())},e.prototype.initADA=function(){var e=this,i=Math.ceil(e.slideCount/e.options.slidesToShow),s=e.getNavigableIndexes().filter(function(t){return t>=0&&t<e.slideCount});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function(i){var n=s.indexOf(i);if(t(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+i,tabindex:-1}),-1!==n){var o="slick-slide-control"+e.instanceUid+n;t("#"+o).length&&t(this).attr({"aria-describedby":o})}}),e.$dots.attr("role","tablist").find("li").each(function(n){var o=s[n];t(this).attr({role:"presentation"}),t(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+n,"aria-controls":"slick-slide"+e.instanceUid+o,"aria-label":n+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var n=e.currentSlide,o=n+e.options.slidesToShow;n<o;n++)e.options.focusOnChange?e.$slides.eq(n).attr({tabindex:"0"}):e.$slides.eq(n).removeAttr("tabindex");e.activateADA()},e.prototype.initArrowEvents=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},this.changeSlide),this.$nextArrow.off("click.slick").on("click.slick",{message:"next"},this.changeSlide),!0===this.options.accessibility&&(this.$prevArrow.on("keydown.slick",this.keyHandler),this.$nextArrow.on("keydown.slick",this.keyHandler)))},e.prototype.initDotEvents=function(){!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&(t("li",this.$dots).on("click.slick",{message:"index"},this.changeSlide),!0===this.options.accessibility&&this.$dots.on("keydown.slick",this.keyHandler)),!0===this.options.dots&&!0===this.options.pauseOnDotsHover&&this.slideCount>this.options.slidesToShow&&t("li",this.$dots).on("mouseenter.slick",t.proxy(this.interrupt,this,!0)).on("mouseleave.slick",t.proxy(this.interrupt,this,!1))},e.prototype.initSlideEvents=function(){this.options.pauseOnHover&&(this.$list.on("mouseenter.slick",t.proxy(this.interrupt,this,!0)),this.$list.on("mouseleave.slick",t.proxy(this.interrupt,this,!1)))},e.prototype.initializeEvents=function(){this.initArrowEvents(),this.initDotEvents(),this.initSlideEvents(),this.$list.on("touchstart.slick mousedown.slick",{action:"start"},this.swipeHandler),this.$list.on("touchmove.slick mousemove.slick",{action:"move"},this.swipeHandler),this.$list.on("touchend.slick mouseup.slick",{action:"end"},this.swipeHandler),this.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},this.swipeHandler),this.$list.on("click.slick",this.clickHandler),t(document).on(this.visibilityChange,t.proxy(this.visibility,this)),!0===this.options.accessibility&&this.$list.on("keydown.slick",this.keyHandler),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().on("click.slick",this.selectHandler),t(window).on("orientationchange.slick.slick-"+this.instanceUid,t.proxy(this.orientationChange,this)),t(window).on("resize.slick.slick-"+this.instanceUid,t.proxy(this.resize,this)),t("[draggable!=true]",this.$slideTrack).on("dragstart",this.preventDefault),t(window).on("load.slick.slick-"+this.instanceUid,this.setPosition),t(this.setPosition)},e.prototype.initUI=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.show(),this.$nextArrow.show()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.show()},e.prototype.keyHandler=function(t){t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===this.options.accessibility?this.changeSlide({data:{message:!0===this.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===this.options.accessibility&&this.changeSlide({data:{message:!0===this.options.rtl?"previous":"next"}}))},e.prototype.lazyLoad=function(){function e(e){t("img[data-lazy]",e).each(function(){var e=t(this),i=t(this).attr("data-lazy"),s=t(this).attr("data-srcset"),n=t(this).attr("data-sizes")||o.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){e.animate({opacity:0},100,function(){s&&(e.attr("srcset",s),n&&e.attr("sizes",n)),e.attr("src",i).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,e,i])})},r.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,i])},r.src=i})}var i,s,n,o=this;if(!0===o.options.centerMode?!0===o.options.infinite?n=(s=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(s=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),n=o.options.slidesToShow/2+1+2+o.currentSlide):(s=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,n=Math.ceil(s+o.options.slidesToShow),!0===o.options.fade&&(s>0&&s--,n<=o.slideCount&&n++)),i=o.$slider.find(".slick-slide").slice(s,n),"anticipated"===o.options.lazyLoad)for(var r=s-1,a=n,l=o.$slider.find(".slick-slide"),h=0;h<o.options.slidesToScroll;h++)r<0&&(r=o.slideCount-1),i=(i=i.add(l.eq(r))).add(l.eq(a)),r--,a++;e(i),o.slideCount<=o.options.slidesToShow?e(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?e(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&e(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},e.prototype.loadSlider=function(){this.setPosition(),this.$slideTrack.css({opacity:1}),this.$slider.removeClass("slick-loading"),this.initUI(),"progressive"===this.options.lazyLoad&&this.progressiveLazyLoad()},e.prototype.next=e.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},e.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},e.prototype.pause=e.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},e.prototype.play=e.prototype.slickPlay=function(){this.autoPlay(),this.options.autoplay=!0,this.paused=!1,this.focussed=!1,this.interrupted=!1},e.prototype.postSlide=function(e){if(!this.unslicked&&(this.$slider.trigger("afterChange",[this,e]),this.animating=!1,this.slideCount>this.options.slidesToShow&&this.setPosition(),this.swipeLeft=null,this.options.autoplay&&this.autoPlay(),!0===this.options.accessibility&&(this.initADA(),this.options.focusOnChange))){t(this.$slides.get(this.currentSlide)).attr("tabindex",0).focus()}},e.prototype.prev=e.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},e.prototype.preventDefault=function(t){t.preventDefault()},e.prototype.progressiveLazyLoad=function(e){e=e||1;var i,s,n,o,r,a=this,l=t("img[data-lazy]",a.$slider);l.length?(i=l.first(),s=i.attr("data-lazy"),n=i.attr("data-srcset"),o=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){n&&(i.attr("srcset",n),o&&i.attr("sizes",o)),i.attr("src",s).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,s]),a.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){a.progressiveLazyLoad(e+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,s]),a.progressiveLazyLoad())},r.src=s):a.$slider.trigger("allImagesLoaded",[a])},e.prototype.refresh=function(e){var i,s;s=this.slideCount-this.options.slidesToShow,!this.options.infinite&&this.currentSlide>s&&(this.currentSlide=s),this.slideCount<=this.options.slidesToShow&&(this.currentSlide=0),i=this.currentSlide,this.destroy(!0),t.extend(this,this.initials,{currentSlide:i}),this.init(),e||this.changeSlide({data:{message:"index",index:i}},!1)},e.prototype.registerBreakpoints=function(){var e,i,s,n=this,o=n.options.responsive||null;if("array"===t.type(o)&&o.length){n.respondTo=n.options.respondTo||"window";for(e in o)if(s=n.breakpoints.length-1,o.hasOwnProperty(e)){for(i=o[e].breakpoint;s>=0;)n.breakpoints[s]&&n.breakpoints[s]===i&&n.breakpoints.splice(s,1),s--;n.breakpoints.push(i),n.breakpointSettings[i]=o[e].settings}n.breakpoints.sort(function(t,e){return n.options.mobileFirst?t-e:e-t})}},e.prototype.reinit=function(){this.$slides=this.$slideTrack.children(this.options.slide).addClass("slick-slide"),this.slideCount=this.$slides.length,this.currentSlide>=this.slideCount&&0!==this.currentSlide&&(this.currentSlide=this.currentSlide-this.options.slidesToScroll),this.slideCount<=this.options.slidesToShow&&(this.currentSlide=0),this.registerBreakpoints(),this.setProps(),this.setupInfinite(),this.buildArrows(),this.updateArrows(),this.initArrowEvents(),this.buildDots(),this.updateDots(),this.initDotEvents(),this.cleanUpSlideEvents(),this.initSlideEvents(),this.checkResponsive(!1,!0),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().on("click.slick",this.selectHandler),this.setSlideClasses("number"==typeof this.currentSlide?this.currentSlide:0),this.setPosition(),this.focusHandler(),this.paused=!this.options.autoplay,this.autoPlay(),this.$slider.trigger("reInit",[this])},e.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},e.prototype.removeSlide=e.prototype.slickRemove=function(t,e,i){if(t="boolean"==typeof t?!0===(e=t)?0:this.slideCount-1:!0===e?--t:t,this.slideCount<1||t<0||t>this.slideCount-1)return!1;this.unload(),!0===i?this.$slideTrack.children().remove():this.$slideTrack.children(this.options.slide).eq(t).remove(),this.$slides=this.$slideTrack.children(this.options.slide),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.append(this.$slides),this.$slidesCache=this.$slides,this.reinit()},e.prototype.setCSS=function(t){var e,i,s={};!0===this.options.rtl&&(t=-t),e="left"==this.positionProp?Math.ceil(t)+"px":"0px",i="top"==this.positionProp?Math.ceil(t)+"px":"0px",s[this.positionProp]=t,!1===this.transformsEnabled?this.$slideTrack.css(s):(s={},!1===this.cssTransitions?(s[this.animType]="translate("+e+", "+i+")",this.$slideTrack.css(s)):(s[this.animType]="translate3d("+e+", "+i+", 0px)",this.$slideTrack.css(s)))},e.prototype.setDimensions=function(){!1===this.options.vertical?!0===this.options.centerMode&&this.$list.css({padding:"0px "+this.options.centerPadding}):(this.$list.height(this.$slides.first().outerHeight(!0)*this.options.slidesToShow),!0===this.options.centerMode&&this.$list.css({padding:this.options.centerPadding+" 0px"})),this.listWidth=this.$list.width(),this.listHeight=this.$list.height(),!1===this.options.vertical&&!1===this.options.variableWidth?(this.slideWidth=Math.ceil(this.listWidth/this.options.slidesToShow),this.$slideTrack.width(Math.ceil(this.slideWidth*this.$slideTrack.children(".slick-slide").length))):!0===this.options.variableWidth?this.$slideTrack.width(5e3*this.slideCount):(this.slideWidth=Math.ceil(this.listWidth),this.$slideTrack.height(Math.ceil(this.$slides.first().outerHeight(!0)*this.$slideTrack.children(".slick-slide").length)));var t=this.$slides.first().outerWidth(!0)-this.$slides.first().width();!1===this.options.variableWidth&&this.$slideTrack.children(".slick-slide").width(this.slideWidth-t)},e.prototype.setFade=function(){var e,i=this;i.$slides.each(function(s,n){e=i.slideWidth*s*-1,!0===i.options.rtl?t(n).css({position:"relative",right:e,top:0,zIndex:i.options.zIndex-2,opacity:0}):t(n).css({position:"relative",left:e,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},e.prototype.setHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var t=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.css("height",t)}},e.prototype.setOption=e.prototype.slickSetOption=function(){var e,i,s,n,o,r=this,a=!1;if("object"===t.type(arguments[0])?(s=arguments[0],a=arguments[1],o="multiple"):"string"===t.type(arguments[0])&&(s=arguments[0],n=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===t.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[s]=n;else if("multiple"===o)t.each(s,function(t,e){r.options[t]=e});else if("responsive"===o)for(i in n)if("array"!==t.type(r.options.responsive))r.options.responsive=[n[i]];else{for(e=r.options.responsive.length-1;e>=0;)r.options.responsive[e].breakpoint===n[i].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(n[i])}a&&(r.unload(),r.reinit())},e.prototype.setPosition=function(){this.setDimensions(),this.setHeight(),!1===this.options.fade?this.setCSS(this.getLeft(this.currentSlide)):this.setFade(),this.$slider.trigger("setPosition",[this])},e.prototype.setProps=function(){var t=document.body.style;this.positionProp=!0===this.options.vertical?"top":"left","top"===this.positionProp?this.$slider.addClass("slick-vertical"):this.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===this.options.useCSS&&(this.cssTransitions=!0),this.options.fade&&("number"==typeof this.options.zIndex?this.options.zIndex<3&&(this.options.zIndex=3):this.options.zIndex=this.defaults.zIndex),void 0!==t.OTransform&&(this.animType="OTransform",this.transformType="-o-transform",this.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(this.animType=!1)),void 0!==t.MozTransform&&(this.animType="MozTransform",this.transformType="-moz-transform",this.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(this.animType=!1)),void 0!==t.webkitTransform&&(this.animType="webkitTransform",this.transformType="-webkit-transform",this.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(this.animType=!1)),void 0!==t.msTransform&&(this.animType="msTransform",this.transformType="-ms-transform",this.transitionType="msTransition",void 0===t.msTransform&&(this.animType=!1)),void 0!==t.transform&&!1!==this.animType&&(this.animType="transform",this.transformType="transform",this.transitionType="transition"),this.transformsEnabled=this.options.useTransform&&null!==this.animType&&!1!==this.animType},e.prototype.setSlideClasses=function(t){var e,i,s,n;if(i=this.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),this.$slides.eq(t).addClass("slick-current"),!0===this.options.centerMode){var o=this.options.slidesToShow%2==0?1:0;e=Math.floor(this.options.slidesToShow/2),!0===this.options.infinite&&(t>=e&&t<=this.slideCount-1-e?this.$slides.slice(t-e+o,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(s=this.options.slidesToShow+t,i.slice(s-e+1+o,s+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-this.options.slidesToShow).addClass("slick-center"):t===this.slideCount-1&&i.eq(this.options.slidesToShow).addClass("slick-center")),this.$slides.eq(t).addClass("slick-center")}else t>=0&&t<=this.slideCount-this.options.slidesToShow?this.$slides.slice(t,t+this.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=this.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(n=this.slideCount%this.options.slidesToShow,s=!0===this.options.infinite?this.options.slidesToShow+t:t,this.options.slidesToShow==this.options.slidesToScroll&&this.slideCount-t<this.options.slidesToShow?i.slice(s-(this.options.slidesToShow-n),s+n).addClass("slick-active").attr("aria-hidden","false"):i.slice(s,s+this.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==this.options.lazyLoad&&"anticipated"!==this.options.lazyLoad||this.lazyLoad()},e.prototype.setupInfinite=function(){var e,i,s;if(!0===this.options.fade&&(this.options.centerMode=!1),!0===this.options.infinite&&!1===this.options.fade&&(i=null,this.slideCount>this.options.slidesToShow)){for(s=!0===this.options.centerMode?this.options.slidesToShow+1:this.options.slidesToShow,e=this.slideCount;e>this.slideCount-s;e-=1)i=e-1,t(this.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-this.slideCount).prependTo(this.$slideTrack).addClass("slick-cloned");for(e=0;e<s+this.slideCount;e+=1)i=e,t(this.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+this.slideCount).appendTo(this.$slideTrack).addClass("slick-cloned");this.$slideTrack.find(".slick-cloned").find("[id]").each(function(){t(this).attr("id","")})}},e.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},e.prototype.selectHandler=function(e){var i=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),s=parseInt(i.attr("data-slick-index"));s||(s=0),this.slideCount<=this.options.slidesToShow?this.slideHandler(s,!1,!0):this.slideHandler(s)},e.prototype.slideHandler=function(t,e,i){var s,n,o,r,a,l=null,h=this;if(e=e||!1,!(!0===h.animating&&!0===h.options.waitForAnimate||!0===h.options.fade&&h.currentSlide===t))if(!1===e&&h.asNavFor(t),s=t,l=h.getLeft(s),r=h.getLeft(h.currentSlide),h.currentLeft=null===h.swipeLeft?r:h.swipeLeft,!1===h.options.infinite&&!1===h.options.centerMode&&(t<0||t>h.getDotCount()*h.options.slidesToScroll))!1===h.options.fade&&(s=h.currentSlide,!0!==i&&h.slideCount>h.options.slidesToShow?h.animateSlide(r,function(){h.postSlide(s)}):h.postSlide(s));else if(!1===h.options.infinite&&!0===h.options.centerMode&&(t<0||t>h.slideCount-h.options.slidesToScroll))!1===h.options.fade&&(s=h.currentSlide,!0!==i&&h.slideCount>h.options.slidesToShow?h.animateSlide(r,function(){h.postSlide(s)}):h.postSlide(s));else{if(h.options.autoplay&&clearInterval(h.autoPlayTimer),n=s<0?h.slideCount%h.options.slidesToScroll!=0?h.slideCount-h.slideCount%h.options.slidesToScroll:h.slideCount+s:s>=h.slideCount?h.slideCount%h.options.slidesToScroll!=0?0:s-h.slideCount:s,h.animating=!0,h.$slider.trigger("beforeChange",[h,h.currentSlide,n]),o=h.currentSlide,h.currentSlide=n,h.setSlideClasses(h.currentSlide),h.options.asNavFor&&(a=(a=h.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(h.currentSlide),h.updateDots(),h.updateArrows(),!0===h.options.fade)return!0!==i?(h.fadeSlideOut(o),h.fadeSlide(n,function(){h.postSlide(n)})):h.postSlide(n),void h.animateHeight();!0!==i&&h.slideCount>h.options.slidesToShow?h.animateSlide(l,function(){h.postSlide(n)}):h.postSlide(n)}},e.prototype.startLoad=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.hide(),this.$nextArrow.hide()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.hide(),this.$slider.addClass("slick-loading")},e.prototype.swipeDirection=function(){var t,e,i,s;return t=this.touchObject.startX-this.touchObject.curX,e=this.touchObject.startY-this.touchObject.curY,i=Math.atan2(e,t),(s=Math.round(180*i/Math.PI))<0&&(s=360-Math.abs(s)),s<=45&&s>=0?!1===this.options.rtl?"left":"right":s<=360&&s>=315?!1===this.options.rtl?"left":"right":s>=135&&s<=225?!1===this.options.rtl?"right":"left":!0===this.options.verticalSwiping?s>=35&&s<=135?"down":"up":"vertical"},e.prototype.swipeEnd=function(t){var e,i;if(this.dragging=!1,this.swiping=!1,this.scrolling)return this.scrolling=!1,!1;if(this.interrupted=!1,this.shouldClick=!(this.touchObject.swipeLength>10),void 0===this.touchObject.curX)return!1;if(!0===this.touchObject.edgeHit&&this.$slider.trigger("edge",[this,this.swipeDirection()]),this.touchObject.swipeLength>=this.touchObject.minSwipe){switch(i=this.swipeDirection()){case"left":case"down":e=this.options.swipeToSlide?this.checkNavigable(this.currentSlide+this.getSlideCount()):this.currentSlide+this.getSlideCount(),this.currentDirection=0;break;case"right":case"up":e=this.options.swipeToSlide?this.checkNavigable(this.currentSlide-this.getSlideCount()):this.currentSlide-this.getSlideCount(),this.currentDirection=1}"vertical"!=i&&(this.slideHandler(e),this.touchObject={},this.$slider.trigger("swipe",[this,i]))}else this.touchObject.startX!==this.touchObject.curX&&(this.slideHandler(this.currentSlide),this.touchObject={})},e.prototype.swipeHandler=function(t){if(!(!1===this.options.swipe||"ontouchend"in document&&!1===this.options.swipe||!1===this.options.draggable&&-1!==t.type.indexOf("mouse")))switch(this.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,this.touchObject.minSwipe=this.listWidth/this.options.touchThreshold,!0===this.options.verticalSwiping&&(this.touchObject.minSwipe=this.listHeight/this.options.touchThreshold),t.data.action){case"start":this.swipeStart(t);break;case"move":this.swipeMove(t);break;case"end":this.swipeEnd(t)}},e.prototype.swipeMove=function(t){var e,i,s,n,o,r;return o=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!this.dragging||this.scrolling||o&&1!==o.length)&&(e=this.getLeft(this.currentSlide),this.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,this.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,this.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(this.touchObject.curX-this.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(this.touchObject.curY-this.touchObject.startY,2))),!this.options.verticalSwiping&&!this.swiping&&r>4?(this.scrolling=!0,!1):(!0===this.options.verticalSwiping&&(this.touchObject.swipeLength=r),i=this.swipeDirection(),void 0!==t.originalEvent&&this.touchObject.swipeLength>4&&(this.swiping=!0,t.preventDefault()),n=(!1===this.options.rtl?1:-1)*(this.touchObject.curX>this.touchObject.startX?1:-1),!0===this.options.verticalSwiping&&(n=this.touchObject.curY>this.touchObject.startY?1:-1),s=this.touchObject.swipeLength,this.touchObject.edgeHit=!1,!1===this.options.infinite&&(0===this.currentSlide&&"right"===i||this.currentSlide>=this.getDotCount()&&"left"===i)&&(s=this.touchObject.swipeLength*this.options.edgeFriction,this.touchObject.edgeHit=!0),!1===this.options.vertical?this.swipeLeft=e+s*n:this.swipeLeft=e+s*(this.$list.height()/this.listWidth)*n,!0===this.options.verticalSwiping&&(this.swipeLeft=e+s*n),!0!==this.options.fade&&!1!==this.options.touchMove&&(!0===this.animating?(this.swipeLeft=null,!1):void this.setCSS(this.swipeLeft))))},e.prototype.swipeStart=function(t){var e;if(this.interrupted=!0,1!==this.touchObject.fingerCount||this.slideCount<=this.options.slidesToShow)return this.touchObject={},!1;void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),this.touchObject.startX=this.touchObject.curX=void 0!==e?e.pageX:t.clientX,this.touchObject.startY=this.touchObject.curY=void 0!==e?e.pageY:t.clientY,this.dragging=!0},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){null!==this.$slidesCache&&(this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.appendTo(this.$slideTrack),this.reinit())},e.prototype.unload=function(){t(".slick-cloned",this.$slider).remove(),this.$dots&&this.$dots.remove(),this.$prevArrow&&this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.remove(),this.$nextArrow&&this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.remove(),this.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},e.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},e.prototype.updateArrows=function(){Math.floor(this.options.slidesToShow/2),!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&!this.options.infinite&&(this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===this.currentSlide?(this.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):this.currentSlide>=this.slideCount-this.options.slidesToShow&&!1===this.options.centerMode?(this.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):this.currentSlide>=this.slideCount-1&&!0===this.options.centerMode&&(this.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},e.prototype.updateDots=function(){null!==this.$dots&&(this.$dots.find("li").removeClass("slick-active").end(),this.$dots.find("li").eq(Math.floor(this.currentSlide/this.options.slidesToScroll)).addClass("slick-active"))},e.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},t.fn.slick=function(){var t,i,s=arguments[0],n=Array.prototype.slice.call(arguments,1),o=this.length;for(t=0;t<o;t++)if("object"==typeof s||void 0===s?this[t].slick=new e(this[t],s):i=this[t].slick[s].apply(this[t].slick,n),void 0!==i)return i;return this}}),function(t,e,i,s){function n(e,i){this.settings=null,this.options=t.extend({},n.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(n.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(n.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}n.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},n.Width={Default:"default",Inner:"inner",Outer:"outer"},n.Type={Event:"event",State:"state"},n.Plugins={},n.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,s=this.settings.rtl,n={width:"auto","margin-left":s?e:"","margin-right":s?"":e};!i&&this.$stage.children().css(n),t.css=n}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,s=this._items.length,n=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};s--;)i=this._mergers[s],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,o[s]=n?e*i:this._items[s].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],i=this._items,s=this.settings,n=Math.max(2*s.items,4),o=2*Math.ceil(i.length/2),r=s.loop&&i.length?s.rewind?n:Math.max(n,o):0,a="",l="";for(r/=2;r--;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),l=i[e[e.length-1]][0].outerHTML+l;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,s=0,n=0,o=[];++i<e;)s=o[i-1]||0,n=this._widths[this.relative(i)]+this.settings.margin,o.push(s+n*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,s=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],s.eq(e).css(t.css);else i&&(t.css.width=t.items.width,s.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,s,n=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,r=this.coordinates(this.current())+o,a=r+this.width()*n,l=[];for(i=0,s=this._coordinates.length;s>i;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+o*n,(this.op(t,"<=",r)&&this.op(t,">",a)||this.op(e,"<",r)&&this.op(e,">",a))&&l.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],n.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,i,s;e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:void 0,s=this.$element.children(i).width(),e.length&&0>=s&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},n.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,s=-1,n=null;i?(t.each(i,function(t){e>=t&&t>s&&(s=Number(t))}),"function"==typeof(n=t.extend({},this.options,i[s])).stagePadding&&(n.stagePadding=n.stagePadding()),delete n.responsive,n.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+s))):n=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:n}}),this._breakpoint=s,this.settings=n,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},n.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},n.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},n.prototype.update=function(){for(var e=0,i=this._pipe.length,s=t.proxy(function(t){return this[t]},this._invalidated),n={};i>e;)(this._invalidated.all||t.grep(this._pipe[e].filter,s).length>0)&&this._pipe[e].run(n),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},n.prototype.width=function(t){switch(t=t||n.Width.Default){case n.Width.Inner:case n.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},n.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},n.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},n.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},n.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},n.prototype.onDragStart=function(e){var s=null;3!==e.which&&(t.support.transform?(s=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),s={x:s[16===s.length?12:4],y:s[16===s.length?13:5]}):(s=this.$stage.position(),s={x:this.settings.rtl?s.left+this.$stage.width()-this.width()+this.settings.margin:s.left,y:s.top}),this.is("animating")&&(t.support.transform?this.animate(s.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=s,this._drag.stage.current=s,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var s=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(s.x)<Math.abs(s.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},n.prototype.onDragMove=function(t){var e=null,i=null,s=null,n=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,n);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),s=this.settings.pullDrag?-1*n.x/5:0,o.x=Math.max(Math.min(o.x,e+s),i+s)),this._drag.stage.current=o,this.animate(o.x))},n.prototype.onDragEnd=function(e){var s=this.difference(this._drag.pointer,this.pointer(e)),n=this._drag.stage.current,o=s.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==s.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(n.x,0!==s.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(s.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},n.prototype.closest=function(e,i){var s=-1,n=this.width(),o=this.coordinates();return this.settings.freeDrag||t.each(o,t.proxy(function(t,r){return"left"===i&&e>r-30&&r+30>e?s=t:"right"===i&&e>r-n-30&&r-n+30>e?s=t+1:this.op(e,"<",r)&&this.op(e,">",o[t+1]||r-n)&&(s="left"===i?t+1:t),-1===s},this)),this.settings.loop||(this.op(e,">",o[this.minimum()])?s=e=this.minimum():this.op(e,"<",o[this.maximum()])&&(s=e=this.maximum())),s},n.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},n.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},n.prototype.current=function(t){if(void 0===t)return this._current;if(0!==this._items.length){if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});void 0!==e.data&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current}},n.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},n.prototype.reset=function(t){void 0!==(t=this.normalize(t))&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},n.prototype.normalize=function(t,e){var i=this._items.length,s=e?0:this._clones.length;return!this.isNumeric(t)||1>i?t=void 0:(0>t||t>=i+s)&&(t=((t-s/2)%i+i)%i+s/2),t},n.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},n.prototype.maximum=function(t){var e,i,s,n=this.settings,o=this._coordinates.length;if(n.loop)o=this._clones.length/2+this._items.length-1;else if(n.autoWidth||n.merge){for(e=this._items.length,i=this._items[--e].width(),s=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>s););o=e+1}else o=n.center?this._items.length-1:this._items.length-n.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},n.prototype.minimum=function(t){return t?0:this._clones.length/2},n.prototype.items=function(t){return void 0===t?this._items.slice():(t=this.normalize(t,!0),this._items[t])},n.prototype.mergers=function(t){return void 0===t?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},n.prototype.clones=function(e){var i=this._clones.length/2,s=i+this._items.length,n=function(t){return t%2==0?s+t/2:i-(t+1)/2};return void 0===e?t.map(this._clones,function(t,e){return n(e)}):t.map(this._clones,function(t,i){return t===e?n(i):null})},n.prototype.speed=function(t){return void 0!==t&&(this._speed=t),this._speed},n.prototype.coordinates=function(e){var i,s=1,n=e-1;return void 0===e?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(s=-1,n=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[n]||0))/2*s):i=this._coordinates[n]||0,i=Math.ceil(i))},n.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},n.prototype.to=function(t,e){var i=this.current(),s=null,n=t-this.relative(i),o=(n>0)-(0>n),r=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(n)>r/2&&(n+=-1*o*r),t=i+n,(s=((t-a)%r+r)%r+a)!==t&&l>=s-n&&s-n>0&&(i=s-n,t=s,this.reset(i))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(i,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},n.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},n.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},n.prototype.onTransitionEnd=function(t){return(void 0===t||(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},n.prototype.viewport=function(){var s;if(this.options.responsiveBaseElement!==e)s=t(this.options.responsiveBaseElement).width();else if(e.innerWidth)s=e.innerWidth;else{if(!i.documentElement||!i.documentElement.clientWidth)throw"Can not detect viewport width.";s=i.documentElement.clientWidth}return s},n.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},n.prototype.add=function(e,i){var s=this.relative(this._current);i=void 0===i?this._items.length:this.normalize(i,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:i}),e=this.prepare(e),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[i-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(e),this._items.splice(i,0,e),this._mergers.splice(i,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[s]&&this.reset(this._items[s].index()),this.invalidate("items"),this.trigger("added",{content:e,position:i})},n.prototype.remove=function(t){void 0!==(t=this.normalize(t,!0))&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},n.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},n.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var s in this._plugins)this._plugins[s].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},n.prototype.op=function(t,e,i){var s=this.settings.rtl;switch(e){case"<":return s?t>i:i>t;case">":return s?i>t:t>i;case">=":return s?i>=t:t>=i;case"<=":return s?t>=i:i>=t}},n.prototype.on=function(t,e,i,s){t.addEventListener?t.addEventListener(e,i,s):t.attachEvent&&t.attachEvent("on"+e,i)},n.prototype.off=function(t,e,i,s){t.removeEventListener?t.removeEventListener(e,i,s):t.detachEvent&&t.detachEvent("on"+e,i)},n.prototype.trigger=function(e,i,s,o,r){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,s],function(t){return t}).join("-").toLowerCase()),h=t.Event([e,"owl",s||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(h)}),this.register({type:n.Type.Event,name:e}),this.$element.trigger(h),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,h)),h},n.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){void 0===this._states.current[e]&&(this._states.current[e]=0),this._states.current[e]++},this))},n.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},n.prototype.register=function(e){if(e.type===n.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===n.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,s){return t.inArray(i,this._states.tags[e.name])===s},this)))},n.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},n.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},n.prototype.pointer=function(t){var i={x:null,y:null};return t=t.originalEvent||t||e.event,(t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(i.x=t.pageX,i.y=t.pageY):(i.x=t.clientX,i.y=t.clientY),i},n.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},n.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var s=t(this),o=s.data("owl.carousel");o||(o=new n(this,"object"==typeof e&&e),s.data("owl.carousel",o),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){o.register({type:n.Type.Event,name:i}),o.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),o[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},o))})),"string"==typeof e&&"_"!==e.charAt(0)&&o[e].apply(o,i)})},t.fn.owlCarousel.Constructor=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoRefresh:!0,autoRefreshInterval:500},n.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},n.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},n.prototype.destroy=function(){var t,i;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,s=i.center&&Math.ceil(i.items/2)||i.items,n=i.center&&-1*s||0,o=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+n,r=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);n++<s;)this.load(r/2+this._core.relative(o)),r&&t.each(this._core.clones(this._core.relative(o)),a),o++},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={lazyLoad:!1},n.prototype.load=function(i){var s=this._core.$stage.children().eq(i),n=s&&s.find(".owl-lazy");!n||t.inArray(s.get(0),this._loaded)>-1||(n.each(t.proxy(function(i,s){var n,o=t(s),r=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:r},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:r},"lazy")},this)).attr("src",r):(n=new Image,n.onload=t.proxy(function(){o.css({"background-image":"url("+r+")",opacity:"1"}),this._core.trigger("loaded",{element:o,url:r},"lazy")},this),n.src=r)},this)),this._loaded.push(s.get(0)))},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},n.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,s=this._core.$stage.children().toArray().slice(e,i),n=[],o=0;t.each(s,function(e,i){n.push(t(i).height())}),o=Math.max.apply(null,n),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},n.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};n.Defaults={video:!1,videoHeight:!1,videoWidth:!1},n.prototype.fetch=function(t,e){var i=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",s=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),n=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,r=t.attr("href");if(!r)throw new Error("Missing video URL.");if((s=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)i="youtube";else if(s[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(s[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}s=s[6],this._videos[r]={type:i,id:s,width:n,height:o},e.attr("data-video",r),this.thumbnail(t,this._videos[r])},n.prototype.thumbnail=function(e,i){var s,n,o,r=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",a=e.find("img"),l="src",h="",c=this._core.settings,d=function(t){n='<div class="owl-video-play-icon"></div>',s=c.lazyLoad?'<div class="owl-video-tn '+h+'" '+l+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(s),e.after(n)};return e.wrap('<div class="owl-video-wrapper"'+r+"></div>"),this._core.settings.lazyLoad&&(l="data-src",h="owl-lazy"),a.length?(d(a.attr(l)),a.remove(),!1):void("youtube"===i.type?(o="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",d(o)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t[0].thumbnail_large,d(o)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t.framegrab_url,d(o)}}))},n.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},n.prototype.play=function(e){var i,s=t(e.target).closest("."+this._core.settings.itemClass),n=this._videos[s.attr("data-video")],o=n.width||"100%",r=n.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),s=this._core.items(this._core.relative(s.index())),this._core.reset(s.index()),"youtube"===n.type?i='<iframe width="'+o+'" height="'+r+'" src="//www.youtube.com/embed/'+n.id+"?autoplay=1&v="+n.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===n.type?i='<iframe src="//player.vimeo.com/video/'+n.id+'?autoplay=1" width="'+o+'" height="'+r+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===n.type&&(i='<iframe frameborder="0"height="'+r+'"width="'+o+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+n.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+i+"</div>").insertAfter(s.find(".owl-video")),this._playing=s.addClass("owl-video-playing"))},n.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},n.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this.core=e,this.core.options=t.extend({},n.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};n.Defaults={animateOut:!1,animateIn:!1},n.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),s=this.core.$stage.children().eq(this.previous),n=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),s.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(r)),o&&n.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(o))}},n.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},n.Defaults,this._core.options)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},n.prototype._getNextTimeout=function(s,n){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||i.hidden||this._core.next(n||this._core.settings.autoplaySpeed)},this),s||this._core.settings.autoplayTimeout)},n.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},n.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},n.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},n.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers)};n.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},n.prototype.initialize=function(){var e,i=this._core.settings;this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t("<div>").addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var s=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(s,i.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},n.prototype.destroy=function(){var t,e,i,s;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(s in this.overides)this._core[s]=this._overrides[s];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},n.prototype.update=function(){var t,e,i=this._core.clones().length/2,s=i+this._core.items().length,n=this._core.maximum(!0),o=this._core.settings,r=o.center||o.autoWidth||o.dotsData?1:o.dotsEach||o.items;if("page"!==o.slideBy&&(o.slideBy=Math.min(o.slideBy,o.items)),o.dots||"page"==o.slideBy)for(this._pages=[],t=i,e=0,0;s>t;t++){if(e>=r||0===e){if(this._pages.push({start:Math.min(n,t-i),end:t-i+r-1}),Math.min(n,t-i)===n)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},n.prototype.draw=function(){var e,i=this._core.settings,s=this._core.items().length<=i.items,n=this._core.relative(this._core.current()),o=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||s),i.nav&&(this._controls.$previous.toggleClass("disabled",!o&&n<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&n>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||s),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):0>e&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},n.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},n.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},n.prototype.getPosition=function(e){var i,s,n=this._core.settings;return"page"==n.slideBy?(i=t.inArray(this.current(),this._pages),s=this._pages.length,e?++i:--i,i=this._pages[(i%s+s)%s].start):(i=this._core.relative(this._core.current()),s=this._core.items().length,e?i+=n.slideBy:i-=n.slideBy),i},n.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},n.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},n.prototype.to=function(e,i,s){var n;!s&&this._pages.length?(n=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%n+n)%n].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var s=this._core.items(this._core.relative(this._core.current())),n=t.map(this._hashes,function(t,e){return t===s?e:null}).join();if(!n||e.location.hash.slice(1)===n)return;e.location.hash=n}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),s=this._core.$stage.children(),n=this._hashes[i]&&s.index(this._hashes[i]);void 0!==n&&n!==this._core.current()&&this._core.to(this._core.relative(n),!1,!0)},this))};n.Defaults={URLhashListener:!1},n.prototype.destroy=function(){var i,s;t(e).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(s in Object.getOwnPropertyNames(this))"function"!=typeof this[s]&&(this[s]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){function n(e,i){var n=!1,o=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(o+" ")+o).split(" "),function(t,e){return r[e]!==s?(n=!i||e,!1):void 0}),n}function o(t){return n(t,!0)}var r=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},h={end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}},c=function(){return!!n("transform")},d=function(){return!!n("perspective")},u=function(){return!!n("animation")};(function(){return!!n("transition")})()&&(t.support.transition=new String(o("transition")),t.support.transition.end=l.end[t.support.transition]),u()&&(t.support.animation=new String(o("animation")),t.support.animation.end=h.end[t.support.animation]),c()&&(t.support.transform=new String(o("transform")),t.support.transform3d=d())}(window.Zepto||window.jQuery,window,document),console.log("app.js"),$(document).ready(function(){$(".cross").hide(),$(".menu").hide(),$(".hamburger").click(function(){$(".menu").slideToggle("slow",function(){$(".hamburger").hide(),$(".cross").show()})}),$(".cross").click(function(){$(".menu").slideToggle("slow",function(){$(".cross").hide(),$(".hamburger").show()})})}),$(function(){});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
