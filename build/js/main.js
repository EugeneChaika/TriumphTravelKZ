if(function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function n(t,e){var n=(e=e||X).createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function i(t){var e=!!t&&"length"in t&&t.length,n=at.type(t);return"function"!==n&&!at.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function r(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function o(t,e,n){return at.isFunction(e)?at.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?at.grep(t,function(t){return t===e!==n}):"string"!=typeof e?at.grep(t,function(t){return tt.call(e,t)>-1!==n}):vt.test(e)?at.filter(e,t,n):(e=at.filter(e,t),at.grep(t,function(t){return tt.call(e,t)>-1!==n&&1===t.nodeType}))}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function a(t){return t}function l(t){throw t}function c(t,e,n,i){var r;try{t&&at.isFunction(r=t.promise)?r.call(t).done(e).fail(n):t&&at.isFunction(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}function u(){X.removeEventListener("DOMContentLoaded",u),t.removeEventListener("load",u),at.ready()}function h(){this.expando=at.expando+h.uid++}function d(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Nt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:It.test(t)?JSON.parse(t):t)}(n)}catch(t){}At.set(t,e,n)}else n=void 0;return n}function f(t,e,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return at.css(t,e,"")},l=a(),c=n&&n[3]||(at.cssNumber[e]?"":"px"),u=(at.cssNumber[e]||"px"!==c&&+l)&&Ot.exec(at.css(t,e));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=o=o||".5",at.style(t,e,u+c)}while(o!==(o=a()/l)&&1!==o&&--s)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}function p(t){var e,n=t.ownerDocument,i=t.nodeName,r=Ht[i];return r||(e=n.body.appendChild(n.createElement(i)),r=at.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Ht[i]=r,r)}function g(t,e){for(var n,i,r=[],o=0,s=t.length;o<s;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=St.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&Lt(i)&&(r[o]=p(i))):"none"!==n&&(r[o]="none",St.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}function m(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&r(t,e)?at.merge([t],n):n}function v(t,e){for(var n=0,i=t.length;n<i;n++)St.set(t[n],"globalEval",!e||St.get(e[n],"globalEval"))}function y(t,e,n,i,r){for(var o,s,a,l,c,u,h=e.createDocumentFragment(),d=[],f=0,p=t.length;f<p;f++)if((o=t[f])||0===o)if("object"===at.type(o))at.merge(d,o.nodeType?[o]:o);else if(Ft.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(Rt.exec(o)||["",""])[1].toLowerCase(),l=Wt[a]||Wt._default,s.innerHTML=l[1]+at.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;at.merge(d,s.childNodes),(s=h.firstChild).textContent=""}else d.push(e.createTextNode(o));for(h.textContent="",f=0;o=d[f++];)if(i&&at.inArray(o,i)>-1)r&&r.push(o);else if(c=at.contains(o.ownerDocument,o),s=m(h.appendChild(o),"script"),c&&v(s),n)for(u=0;o=s[u++];)Mt.test(o.type||"")&&n.push(o);return h}function _(){return!0}function w(){return!1}function b(){try{return X.activeElement}catch(t){}}function x(t,e,n,i,r,o){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)x(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=w;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return at().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=at.guid++)),t.each(function(){at.event.add(this,e,r,i,n)})}function T(t,e){return r(t,"table")&&r(11!==e.nodeType?e:e.firstChild,"tr")?at(">tbody",t)[0]||t:t}function C(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function E(t){var e=Xt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function D(t,e){var n,i,r,o,s,a,l,c;if(1===e.nodeType){if(St.hasData(t)&&(o=St.access(t),s=St.set(e,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)at.event.add(e,r,c[r][n])}At.hasData(t)&&(a=At.access(t),l=at.extend({},a),At.set(e,l))}}function S(t,e){var n=e.nodeName.toLowerCase();"input"===n&&$t.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function A(t,e,i,r){e=Z.apply([],e);var o,s,a,l,c,u,h=0,d=t.length,f=d-1,p=e[0],g=at.isFunction(p);if(g||d>1&&"string"==typeof p&&!st.checkClone&&Kt.test(p))return t.each(function(n){var o=t.eq(n);g&&(e[0]=p.call(this,n,o.html())),A(o,e,i,r)});if(d&&(o=y(e,t[0].ownerDocument,!1,t,r),s=o.firstChild,1===o.childNodes.length&&(o=s),s||r)){for(l=(a=at.map(m(o,"script"),C)).length;h<d;h++)c=o,h!==f&&(c=at.clone(c,!0,!0),l&&at.merge(a,m(c,"script"))),i.call(t[h],c,h);if(l)for(u=a[a.length-1].ownerDocument,at.map(a,E),h=0;h<l;h++)c=a[h],Mt.test(c.type||"")&&!St.access(c,"globalEval")&&at.contains(u,c)&&(c.src?at._evalUrl&&at._evalUrl(c.src):n(c.textContent.replace(Yt,""),u))}return t}function I(t,e,n){for(var i,r=e?at.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||at.cleanData(m(i)),i.parentNode&&(n&&at.contains(i.ownerDocument,i)&&v(m(i,"script")),i.parentNode.removeChild(i));return t}function N(t,e,n){var i,r,o,s,a=t.style;return(n=n||Jt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||at.contains(t.ownerDocument,t)||(s=at.style(t,e)),!st.pixelMarginRight()&&Zt.test(s)&&Gt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function k(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function O(t){var e=at.cssProps[t];return e||(e=at.cssProps[t]=function(t){if(t in oe)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=re.length;n--;)if((t=re[n]+e)in oe)return t}(t)||t),e}function j(t,e,n){var i=Ot.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function L(t,e,n,i,r){var o,s=0;for(o=n===(i?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(s+=at.css(t,n+jt[o],!0,r)),i?("content"===n&&(s-=at.css(t,"padding"+jt[o],!0,r)),"margin"!==n&&(s-=at.css(t,"border"+jt[o]+"Width",!0,r))):(s+=at.css(t,"padding"+jt[o],!0,r),"padding"!==n&&(s+=at.css(t,"border"+jt[o]+"Width",!0,r)));return s}function P(t,e,n){var i,r=Jt(t),o=N(t,e,r),s="border-box"===at.css(t,"boxSizing",!1,r);return Zt.test(o)?o:(i=s&&(st.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+L(t,e,n||(s?"border":"content"),i,r)+"px")}function H(t,e,n,i,r){return new H.prototype.init(t,e,n,i,r)}function $(){ae&&(!1===X.hidden&&t.requestAnimationFrame?t.requestAnimationFrame($):t.setTimeout($,at.fx.interval),at.fx.tick())}function R(){return t.setTimeout(function(){se=void 0}),se=at.now()}function M(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=jt[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function W(t,e,n){for(var i,r=(F.tweeners[e]||[]).concat(F.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function F(t,e,n){var i,r,o=0,s=F.prefilters.length,a=at.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=se||R(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(t,[c,i,n]),i<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:at.extend({},e),opts:at.extend(!0,{specialEasing:{},easing:at.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||R(),duration:n.duration,tweens:[],createTween:function(e,n){var i=at.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(!function(t,e){var n,i,r,o,s;for(n in t)if(i=at.camelCase(n),r=e[i],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=at.cssHooks[i])&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}(u,c.opts.specialEasing);o<s;o++)if(i=F.prefilters[o].call(c,t,u,c.opts))return at.isFunction(i.stop)&&(at._queueHooks(c.elem,c.opts.queue).stop=at.proxy(i.stop,i)),i;return at.map(u,W,c),at.isFunction(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),at.fx.timer(at.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}function q(t){return(t.match(xt)||[]).join(" ")}function z(t){return t.getAttribute&&t.getAttribute("class")||""}function B(t,e,n,i){var r;if(Array.isArray(e))at.each(e,function(e,r){n||_e.test(t)?i(t,r):B(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==at.type(e))i(t,e);else for(r in e)B(t+"["+r+"]",e[r],n,i)}function Q(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(xt)||[];if(at.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function U(t,e,n,i){function r(a){var l;return o[a]=!0,at.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),l}var o={},s=t===Ne;return r(e.dataTypes[0])||!o["*"]&&r("*")}function V(t,e){var n,i,r=at.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&at.extend(!0,t,i),t}var K=[],X=t.document,Y=Object.getPrototypeOf,G=K.slice,Z=K.concat,J=K.push,tt=K.indexOf,et={},nt=et.toString,it=et.hasOwnProperty,rt=it.toString,ot=rt.call(Object),st={},at=function(t,e){return new at.fn.init(t,e)},lt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ct=/^-ms-/,ut=/-([a-z])/g,ht=function(t,e){return e.toUpperCase()};at.fn=at.prototype={jquery:"3.2.1",constructor:at,length:0,toArray:function(){return G.call(this)},get:function(t){return null==t?G.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=at.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return at.each(this,t)},map:function(t){return this.pushStack(at.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(G.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:J,sort:K.sort,splice:K.splice},at.extend=at.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||at.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(c&&i&&(at.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&at.isPlainObject(n)?n:{},s[e]=at.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},at.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===at.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=at.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==nt.call(t))&&(!(e=Y(t))||"function"==typeof(n=it.call(e,"constructor")&&e.constructor)&&rt.call(n)===ot)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?et[nt.call(t)]||"object":typeof t},globalEval:function(t){n(t)},camelCase:function(t){return t.replace(ct,"ms-").replace(ut,ht)},each:function(t,e){var n,r=0;if(i(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(lt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?at.merge(n,"string"==typeof t?[t]:t):J.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:tt.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var r,o,s=0,a=[];if(i(t))for(r=t.length;s<r;s++)null!=(o=e(t[s],s,n))&&a.push(o);else for(s in t)null!=(o=e(t[s],s,n))&&a.push(o);return Z.apply([],a)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),at.isFunction(t))return i=G.call(arguments,2),r=function(){return t.apply(e||this,i.concat(G.call(arguments)))},r.guid=t.guid=t.guid||at.guid++,r},now:Date.now,support:st}),"function"==typeof Symbol&&(at.fn[Symbol.iterator]=K[Symbol.iterator]),at.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){et["[object "+e+"]"]=e.toLowerCase()});var dt=function(t){function e(t,e,n,i){var r,o,s,a,l,c,u,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&((e?e.ownerDocument||e:M)!==k&&N(e),e=e||k,j)){if(11!==p&&(l=gt.exec(t)))if(r=l[1]){if(9===p){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(d&&(s=d.getElementById(r))&&$(e,s)&&s.id===r)return n.push(s),n}else{if(l[2])return Y.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&w.getElementsByClassName&&e.getElementsByClassName)return Y.apply(n,e.getElementsByClassName(r)),n}if(w.qsa&&!B[t+" "]&&(!L||!L.test(t))){if(1!==p)d=e,u=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(_t,wt):e.setAttribute("id",a=R),o=(c=C(t)).length;o--;)c[o]="#"+a+" "+f(c[o]);u=c.join(","),d=mt.test(t)&&h(e.parentNode)||e}if(u)try{return Y.apply(n,d.querySelectorAll(u)),n}catch(t){}finally{a===R&&e.removeAttribute("id")}}}return D(t.replace(ot,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>b.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[R]=!0,t}function r(t){var e=k.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&xt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function h(t){return t&&void 0!==t.getElementsByTagName&&t}function d(){}function f(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function p(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,a=F++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,l){var c,u,h,d=[W,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(h=e[R]||(e[R]={}),u=h[e.uniqueID]||(h[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=u[o])&&c[0]===W&&c[1]===a)return d[2]=c[2];if(u[o]=d,d[2]=t(e,n,l))return!0}return!1}}function g(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function m(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),c&&e.push(a)));return s}function v(t,n,r,o,s,a){return o&&!o[R]&&(o=v(o)),s&&!s[R]&&(s=v(s,a)),i(function(i,a,l,c){var u,h,d,f=[],p=[],g=a.length,v=i||function(t,n,i){for(var r=0,o=n.length;r<o;r++)e(t,n[r],i);return i}(n||"*",l.nodeType?[l]:l,[]),y=!t||!i&&n?v:m(v,f,t,l,c),_=r?s||(i?t:g||o)?[]:a:y;if(r&&r(y,_,l,c),o)for(u=m(_,p),o(u,[],l,c),h=u.length;h--;)(d=u[h])&&(_[p[h]]=!(y[p[h]]=d));if(i){if(s||t){if(s){for(u=[],h=_.length;h--;)(d=_[h])&&u.push(y[h]=d);s(null,_=[],u,c)}for(h=_.length;h--;)(d=_[h])&&(u=s?Z(i,d):f[h])>-1&&(i[u]=!(a[u]=d))}}else _=m(_===a?_.splice(g,_.length):_),s?s(null,a,_,c):Y.apply(a,_)})}function y(t){for(var e,n,i,r=t.length,o=b.relative[t[0].type],s=o||b.relative[" "],a=o?1:0,l=p(function(t){return t===e},s,!0),c=p(function(t){return Z(e,t)>-1},s,!0),u=[function(t,n,i){var r=!o&&(i||n!==S)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,r}];a<r;a++)if(n=b.relative[t[a].type])u=[p(g(u),n)];else{if((n=b.filter[t[a].type].apply(null,t[a].matches))[R]){for(i=++a;i<r&&!b.relative[t[i].type];i++);return v(a>1&&g(u),a>1&&f(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ot,"$1"),n,a<i&&y(t.slice(a,i)),i<r&&y(t=t.slice(i)),i<r&&f(t))}u.push(n)}return g(u)}var _,w,b,x,T,C,E,D,S,A,I,N,k,O,j,L,P,H,$,R="sizzle"+1*new Date,M=t.document,W=0,F=0,q=n(),z=n(),B=n(),Q=function(t,e){return t===e&&(I=!0),0},U={}.hasOwnProperty,V=[],K=V.pop,X=V.push,Y=V.push,G=V.slice,Z=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",it=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",rt=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),st=new RegExp("^"+tt+"*,"+tt+"*"),at=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ct=new RegExp(it),ut=new RegExp("^"+et+"$"),ht={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+it),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,ft=/^h\d$/i,pt=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,vt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},_t=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,wt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},bt=function(){N()},xt=p(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Y.apply(V=G.call(M.childNodes),M.childNodes),V[M.childNodes.length].nodeType}catch(t){Y={apply:V.length?function(t,e){X.apply(t,G.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}w=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},N=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:M;return i!==k&&9===i.nodeType&&i.documentElement?(k=i,O=k.documentElement,j=!T(k),M!==k&&(n=k.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",bt,!1):n.attachEvent&&n.attachEvent("onunload",bt)),w.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=r(function(t){return t.appendChild(k.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=pt.test(k.getElementsByClassName),w.getById=r(function(t){return O.appendChild(t).id=R,!k.getElementsByName||!k.getElementsByName(R).length}),w.getById?(b.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){return t.getAttribute("id")===e}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&j){var n=e.getElementById(t);return n?[n]:[]}}):(b.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&j){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),b.find.TAG=w.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},b.find.CLASS=w.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&j)return e.getElementsByClassName(t)},P=[],L=[],(w.qsa=pt.test(k.querySelectorAll))&&(r(function(t){O.appendChild(t).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+tt+"*(?:value|"+J+")"),t.querySelectorAll("[id~="+R+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+R+"+*").length||L.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=k.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+tt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),O.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(w.matchesSelector=pt.test(H=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&r(function(t){w.disconnectedMatch=H.call(t,"*"),H.call(t,"[s!='']:x"),P.push("!=",it)}),L=L.length&&new RegExp(L.join("|")),P=P.length&&new RegExp(P.join("|")),e=pt.test(O.compareDocumentPosition),$=e||pt.test(O.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},Q=e?function(t,e){if(t===e)return I=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!w.sortDetached&&e.compareDocumentPosition(t)===n?t===k||t.ownerDocument===M&&$(M,t)?-1:e===k||e.ownerDocument===M&&$(M,e)?1:A?Z(A,t)-Z(A,e):0:4&n?-1:1)}:function(t,e){if(t===e)return I=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!r||!o)return t===k?-1:e===k?1:r?-1:o?1:A?Z(A,t)-Z(A,e):0;if(r===o)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===M?-1:l[i]===M?1:0},k):k},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==k&&N(t),n=n.replace(lt,"='$1']"),w.matchesSelector&&j&&!B[n+" "]&&(!P||!P.test(n))&&(!L||!L.test(n)))try{var i=H.call(t,n);if(i||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,k,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==k&&N(t),$(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==k&&N(t);var n=b.attrHandle[e.toLowerCase()],i=n&&U.call(b.attrHandle,e.toLowerCase())?n(t,e,!j):void 0;return void 0!==i?i:w.attributes||!j?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.escape=function(t){return(t+"").replace(_t,wt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(I=!w.detectDuplicates,A=!w.sortStable&&t.slice(0),t.sort(Q),I){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return A=null,t},x=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=x(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=x(e);return n},(b=e.selectors={cacheLength:50,createPseudo:i,match:ht,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(vt,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(vt,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ht.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ct.test(n)&&(e=C(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(vt,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=q[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&q(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(rt," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,d,f,p,g=o!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,_=!1;if(m){if(o){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(_=(f=(c=(u=(h=(d=m)[R]||(d[R]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===W&&c[1])&&c[2],d=f&&m.childNodes[f];d=++f&&d&&d[g]||(_=f=0)||p.pop();)if(1===d.nodeType&&++_&&d===e){u[t]=[W,f,_];break}}else if(y&&(_=f=(c=(u=(h=(d=e)[R]||(d[R]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===W&&c[1]),!1===_)for(;(d=++f&&d&&d[g]||(_=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++_||(y&&((u=(h=d[R]||(d[R]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]=[W,_]),d!==e)););return(_-=r)===i||_%i==0&&_/i>=0}}},PSEUDO:function(t,n){var r,o=b.pseudos[t]||b.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[R]?o(n):o.length>1?(r=[t,t,"",n],b.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)t[i=Z(t,r[s])]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=E(t.replace(ot,"$1"));return r[R]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(vt,yt),function(e){return(e.textContent||e.innerText||x(e)).indexOf(t)>-1}}),lang:i(function(t){return ut.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(vt,yt).toLowerCase(),function(e){var n;do{if(n=j?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===O},focus:function(t){return t===k.activeElement&&(!k.hasFocus||k.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!b.pseudos.empty(t)},header:function(t){return ft.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[n<0?n+e:n]}),even:u(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=b.pseudos.eq;for(_ in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[_]=a(_);for(_ in{submit:!0,reset:!0})b.pseudos[_]=l(_);return d.prototype=b.filters=b.pseudos,b.setFilters=new d,C=e.tokenize=function(t,n){var i,r,o,s,a,l,c,u=z[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],c=b.preFilter;a;){i&&!(r=st.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=at.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(ot," ")}),a=a.slice(i.length));for(s in b.filter)!(r=ht[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):z(t,l).slice(0)},E=e.compile=function(t,n){var r,o=[],s=[],a=B[t+" "];if(!a){for(n||(n=C(t)),r=n.length;r--;)(a=y(n[r]))[R]?o.push(a):s.push(a);(a=B(t,function(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,l,c){var u,h,d,f=0,p="0",g=i&&[],v=[],y=S,_=i||o&&b.find.TAG("*",c),w=W+=null==y?1:Math.random()||.1,x=_.length;for(c&&(S=s===k||s||c);p!==x&&null!=(u=_[p]);p++){if(o&&u){for(h=0,s||u.ownerDocument===k||(N(u),a=!j);d=t[h++];)if(d(u,s||k,a)){l.push(u);break}c&&(W=w)}r&&((u=!d&&u)&&f--,i&&g.push(u))}if(f+=p,r&&p!==f){for(h=0;d=n[h++];)d(g,v,s,a);if(i){if(f>0)for(;p--;)g[p]||v[p]||(v[p]=K.call(l));v=m(v)}Y.apply(l,v),c&&!i&&v.length>0&&f+n.length>1&&e.uniqueSort(l)}return c&&(W=w,S=y),g};return r?i(s):s}(s,o))).selector=t}return a},D=e.select=function(t,e,n,i){var r,o,s,a,l,c="function"==typeof t&&t,u=!i&&C(t=c.selector||t);if(n=n||[],1===u.length){if((o=u[0]=u[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===e.nodeType&&j&&b.relative[o[1].type]){if(!(e=(b.find.ID(s.matches[0].replace(vt,yt),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ht.needsContext.test(t)?0:o.length;r--&&(s=o[r],!b.relative[a=s.type]);)if((l=b.find[a])&&(i=l(s.matches[0].replace(vt,yt),mt.test(o[0].type)&&h(e.parentNode)||e))){if(o.splice(r,1),!(t=i.length&&f(o)))return Y.apply(n,i),n;break}}return(c||E(t,u))(i,e,!j,n,!e||mt.test(t)&&h(e.parentNode)||e),n},w.sortStable=R.split("").sort(Q).join("")===R,w.detectDuplicates=!!I,N(),w.sortDetached=r(function(t){return 1&t.compareDocumentPosition(k.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(J,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);at.find=dt,at.expr=dt.selectors,at.expr[":"]=at.expr.pseudos,at.uniqueSort=at.unique=dt.uniqueSort,at.text=dt.getText,at.isXMLDoc=dt.isXML,at.contains=dt.contains,at.escapeSelector=dt.escape;var ft=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&at(t).is(n))break;i.push(t)}return i},pt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},gt=at.expr.match.needsContext,mt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,vt=/^.[^:#\[\.,]*$/;at.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?at.find.matchesSelector(i,t)?[i]:[]:at.find.matches(t,at.grep(e,function(t){return 1===t.nodeType}))},at.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(at(t).filter(function(){for(e=0;e<i;e++)if(at.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)at.find(t,r[e],n);return i>1?at.uniqueSort(n):n},filter:function(t){return this.pushStack(o(this,t||[],!1))},not:function(t){return this.pushStack(o(this,t||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&gt.test(t)?at(t):t||[],!1).length}});var yt,_t=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(at.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||yt,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:_t.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof at?e[0]:e,at.merge(this,at.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:X,!0)),mt.test(i[1])&&at.isPlainObject(e))for(i in e)at.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=X.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):at.isFunction(t)?void 0!==n.ready?n.ready(t):t(at):at.makeArray(t,this)}).prototype=at.fn,yt=at(X);var wt=/^(?:parents|prev(?:Until|All))/,bt={children:!0,contents:!0,next:!0,prev:!0};at.fn.extend({has:function(t){var e=at(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(at.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&at(t);if(!gt.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&at.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?at.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?tt.call(at(t),this[0]):tt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(at.uniqueSort(at.merge(this.get(),at(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),at.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ft(t,"parentNode")},parentsUntil:function(t,e,n){return ft(t,"parentNode",n)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return ft(t,"nextSibling")},prevAll:function(t){return ft(t,"previousSibling")},nextUntil:function(t,e,n){return ft(t,"nextSibling",n)},prevUntil:function(t,e,n){return ft(t,"previousSibling",n)},siblings:function(t){return pt((t.parentNode||{}).firstChild,t)},children:function(t){return pt(t.firstChild)},contents:function(t){return r(t,"iframe")?t.contentDocument:(r(t,"template")&&(t=t.content||t),at.merge([],t.childNodes))}},function(t,e){at.fn[t]=function(n,i){var r=at.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=at.filter(i,r)),this.length>1&&(bt[t]||at.uniqueSort(r),wt.test(t)&&r.reverse()),this.pushStack(r)}});var xt=/[^\x20\t\r\n\f]+/g;at.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return at.each(t.match(xt)||[],function(t,n){e[n]=!0}),e}(t):at.extend({},t);var e,n,i,r,o=[],s=[],a=-1,l=function(){for(r=r||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function e(n){at.each(n,function(n,i){at.isFunction(i)?t.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==at.type(i)&&e(i)})}(arguments),n&&!e&&l()),this},remove:function(){return at.each(arguments,function(t,e){for(var n;(n=at.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(t){return t?at.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},at.extend({Deferred:function(e){var n=[["notify","progress",at.Callbacks("memory"),at.Callbacks("memory"),2],["resolve","done",at.Callbacks("once memory"),at.Callbacks("once memory"),0,"resolved"],["reject","fail",at.Callbacks("once memory"),at.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return at.Deferred(function(e){at.each(n,function(n,i){var r=at.isFunction(t[i[4]])&&t[i[4]];o[i[1]](function(){var t=r&&r.apply(this,arguments);t&&at.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,i,r){function o(e,n,i,r){return function(){var c=this,u=arguments,h=function(){var t,h;if(!(e<s)){if((t=i.apply(c,u))===n.promise())throw new TypeError("Thenable self-resolution");h=t&&("object"==typeof t||"function"==typeof t)&&t.then,at.isFunction(h)?r?h.call(t,o(s,n,a,r),o(s,n,l,r)):(s++,h.call(t,o(s,n,a,r),o(s,n,l,r),o(s,n,a,n.notifyWith))):(i!==a&&(c=void 0,u=[t]),(r||n.resolveWith)(c,u))}},d=r?h:function(){try{h()}catch(t){at.Deferred.exceptionHook&&at.Deferred.exceptionHook(t,d.stackTrace),e+1>=s&&(i!==l&&(c=void 0,u=[t]),n.rejectWith(c,u))}};e?d():(at.Deferred.getStackHook&&(d.stackTrace=at.Deferred.getStackHook()),t.setTimeout(d))}}var s=0;return at.Deferred(function(t){n[0][3].add(o(0,t,at.isFunction(r)?r:a,t.notifyWith)),n[1][3].add(o(0,t,at.isFunction(e)?e:a)),n[2][3].add(o(0,t,at.isFunction(i)?i:l))}).promise()},promise:function(t){return null!=t?at.extend(t,r):r}},o={};return at.each(n,function(t,e){var s=e[2],a=e[5];r[e[1]]=s.add,a&&s.add(function(){i=a},n[3-t][2].disable,n[0][2].lock),s.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=s.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=G.call(arguments),o=at.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?G.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(c(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||at.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)c(r[n],s(n),o.reject);return o.promise()}});var Tt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;at.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Tt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},at.readyException=function(e){t.setTimeout(function(){throw e})};var Ct=at.Deferred();at.fn.ready=function(t){return Ct.then(t).catch(function(t){at.readyException(t)}),this},at.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--at.readyWait:at.isReady)||(at.isReady=!0,!0!==t&&--at.readyWait>0||Ct.resolveWith(X,[at]))}}),at.ready.then=Ct.then,"complete"===X.readyState||"loading"!==X.readyState&&!X.documentElement.doScroll?t.setTimeout(at.ready):(X.addEventListener("DOMContentLoaded",u),t.addEventListener("load",u));var Et=function(t,e,n,i,r,o,s){var a=0,l=t.length,c=null==n;if("object"===at.type(n)){r=!0;for(a in n)Et(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,at.isFunction(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(at(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):l?e(t[0],n):o},Dt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};h.uid=1,h.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Dt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[at.camelCase(e)]=n;else for(i in e)r[at.camelCase(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][at.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(at.camelCase):(e=at.camelCase(e))in i?[e]:e.match(xt)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||at.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!at.isEmptyObject(e)}};var St=new h,At=new h,It=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Nt=/[A-Z]/g;at.extend({hasData:function(t){return At.hasData(t)||St.hasData(t)},data:function(t,e,n){return At.access(t,e,n)},removeData:function(t,e){At.remove(t,e)},_data:function(t,e,n){return St.access(t,e,n)},_removeData:function(t,e){St.remove(t,e)}}),at.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=At.get(o),1===o.nodeType&&!St.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=at.camelCase(i.slice(5)),d(o,i,r[i]));St.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){At.set(this,t)}):Et(this,function(e){var n;if(o&&void 0===e){if(void 0!==(n=At.get(o,t)))return n;if(void 0!==(n=d(o,t)))return n}else this.each(function(){At.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){At.remove(this,t)})}}),at.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=St.get(t,e),n&&(!i||Array.isArray(n)?i=St.access(t,e,at.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=at.queue(t,e),i=n.length,r=n.shift(),o=at._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,function(){at.dequeue(t,e)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return St.get(t,n)||St.access(t,n,{empty:at.Callbacks("once memory").add(function(){St.remove(t,[e+"queue",n])})})}}),at.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?at.queue(this[0],t):void 0===e?this:this.each(function(){var n=at.queue(this,t,e);at._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&at.dequeue(this,t)})},dequeue:function(t){return this.each(function(){at.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=at.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=St.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var kt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ot=new RegExp("^(?:([+-])=|)("+kt+")([a-z%]*)$","i"),jt=["Top","Right","Bottom","Left"],Lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at.contains(t.ownerDocument,t)&&"none"===at.css(t,"display")},Pt=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r},Ht={};at.fn.extend({show:function(){return g(this,!0)},hide:function(){return g(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Lt(this)?at(this).show():at(this).hide()})}});var $t=/^(?:checkbox|radio)$/i,Rt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Mt=/^$|\/(?:java|ecma)script/i,Wt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Wt.optgroup=Wt.option,Wt.tbody=Wt.tfoot=Wt.colgroup=Wt.caption=Wt.thead,Wt.th=Wt.td;var Ft=/<|&#?\w+;/;!function(){var t=X.createDocumentFragment().appendChild(X.createElement("div")),e=X.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),st.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",st.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var qt=X.documentElement,zt=/^key/,Bt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qt=/^([^.]*)(?:\.(.+)|)/;at.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,h,d,f,p,g,m=St.get(t);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&at.find.matchesSelector(qt,r),n.guid||(n.guid=at.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==at&&at.event.triggered!==e.type?at.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(xt)||[""]).length;c--;)f=g=(a=Qt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(h=at.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=at.event.special[f]||{},u=at.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&at.expr.match.needsContext.test(r),namespace:p.join(".")},o),(d=l[f])||((d=l[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(f,s)),h.add&&(h.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),at.event.global[f]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,c,u,h,d,f,p,g,m=St.hasData(t)&&St.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(xt)||[""]).length;c--;)if(a=Qt.exec(e[c])||[],f=g=a[1],p=(a[2]||"").split(".").sort(),f){for(h=at.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)u=d[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(o,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(t,u));s&&!d.length&&(h.teardown&&!1!==h.teardown.call(t,p,m.handle)||at.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)at.event.remove(t,f+e[c],n,i,!0);at.isEmptyObject(l)&&St.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=at.event.fix(t),l=new Array(arguments.length),c=(St.get(this,"events")||{})[a.type]||[],u=at.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=at.event.handlers.call(this,a,c),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((at.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?at(r,this).index(c)>-1:at.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(at.Event.prototype,t,{enumerable:!0,configurable:!0,get:at.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[at.expando]?t:new at.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===b()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(t){return r(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},at.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},at.Event=function(t,e){if(!(this instanceof at.Event))return new at.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?_:w,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&at.extend(this,e),this.timeStamp=t&&t.timeStamp||at.now(),this[at.expando]=!0},at.Event.prototype={constructor:at.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=_,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=_,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=_,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},at.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&zt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Bt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},at.event.addProp),at.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){at.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||at.contains(this,i))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),at.fn.extend({on:function(t,e,n,i){return x(this,t,e,n,i)},one:function(t,e,n,i){return x(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,at(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=w),this.each(function(){at.event.remove(this,t,n,e)})}});var Ut=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Vt=/<script|<style|<link/i,Kt=/checked\s*(?:[^=]|=\s*.checked.)/i,Xt=/^true\/(.*)/,Yt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;at.extend({htmlPrefilter:function(t){return t.replace(Ut,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),l=at.contains(t.ownerDocument,t);if(!(st.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||at.isXMLDoc(t)))for(s=m(a),i=0,r=(o=m(t)).length;i<r;i++)S(o[i],s[i]);if(e)if(n)for(o=o||m(t),s=s||m(a),i=0,r=o.length;i<r;i++)D(o[i],s[i]);else D(t,a);return(s=m(a,"script")).length>0&&v(s,!l&&m(t,"script")),a},cleanData:function(t){for(var e,n,i,r=at.event.special,o=0;void 0!==(n=t[o]);o++)if(Dt(n)){if(e=n[St.expando]){if(e.events)for(i in e.events)r[i]?at.event.remove(n,i):at.removeEvent(n,i,e.handle);n[St.expando]=void 0}n[At.expando]&&(n[At.expando]=void 0)}}}),at.fn.extend({detach:function(t){return I(this,t,!0)},remove:function(t){return I(this,t)},text:function(t){return Et(this,function(t){return void 0===t?at.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){T(this,t).appendChild(t)}})},prepend:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=T(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(at.cleanData(m(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return at.clone(this,t,e)})},html:function(t){return Et(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Vt.test(t)&&!Wt[(Rt.exec(t)||["",""])[1].toLowerCase()]){t=at.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(at.cleanData(m(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return A(this,arguments,function(e){var n=this.parentNode;at.inArray(this,t)<0&&(at.cleanData(m(this)),n&&n.replaceChild(e,this))},t)}}),at.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){at.fn[t]=function(t){for(var n,i=[],r=at(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),at(r[s])[e](n),J.apply(i,n.get());return this.pushStack(i)}});var Gt=/^margin/,Zt=new RegExp("^("+kt+")(?!px)[a-z%]+$","i"),Jt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",qt.appendChild(s);var e=t.getComputedStyle(a);n="1%"!==e.top,o="2px"===e.marginLeft,i="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,qt.removeChild(s),a=null}}var n,i,r,o,s=X.createElement("div"),a=X.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",st.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),at.extend(st,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return e(),i},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),o}}))}();var te=/^(none|table(?!-c[ea]).+)/,ee=/^--/,ne={position:"absolute",visibility:"hidden",display:"block"},ie={letterSpacing:"0",fontWeight:"400"},re=["Webkit","Moz","ms"],oe=X.createElement("div").style;at.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=N(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=at.camelCase(e),l=ee.test(e),c=t.style;if(l||(e=O(a)),s=at.cssHooks[e]||at.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:c[e];"string"==(o=typeof n)&&(r=Ot.exec(n))&&r[1]&&(n=f(t,e,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(at.cssNumber[a]?"":"px")),st.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var r,o,s,a=at.camelCase(e);return ee.test(e)||(e=O(a)),(s=at.cssHooks[e]||at.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=N(t,e,i)),"normal"===r&&e in ie&&(r=ie[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),at.each(["height","width"],function(t,e){at.cssHooks[e]={get:function(t,n,i){if(n)return!te.test(at.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?P(t,e,i):Pt(t,ne,function(){return P(t,e,i)})},set:function(t,n,i){var r,o=i&&Jt(t),s=i&&L(t,e,i,"border-box"===at.css(t,"boxSizing",!1,o),o);return s&&(r=Ot.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=at.css(t,e)),j(0,n,s)}}}),at.cssHooks.marginLeft=k(st.reliableMarginLeft,function(t,e){if(e)return(parseFloat(N(t,"marginLeft"))||t.getBoundingClientRect().left-Pt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),at.each({margin:"",padding:"",border:"Width"},function(t,e){at.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+jt[i]+e]=o[i]||o[i-2]||o[0];return r}},Gt.test(t)||(at.cssHooks[t+e].set=j)}),at.fn.extend({css:function(t,e){return Et(this,function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=Jt(t),r=e.length;s<r;s++)o[e[s]]=at.css(t,e[s],!1,i);return o}return void 0!==n?at.style(t,e,n):at.css(t,e)},t,e,arguments.length>1)}}),at.Tween=H,(H.prototype={constructor:H,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||at.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(at.cssNumber[n]?"":"px")},cur:function(){var t=H.propHooks[this.prop];return t&&t.get?t.get(this):H.propHooks._default.get(this)},run:function(t){var e,n=H.propHooks[this.prop];return this.options.duration?this.pos=e=at.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}}).init.prototype=H.prototype,(H.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=at.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){at.fx.step[t.prop]?at.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[at.cssProps[t.prop]]&&!at.cssHooks[t.prop]?t.elem[t.prop]=t.now:at.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=H.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},at.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},at.fx=H.prototype.init,at.fx.step={};var se,ae,le=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;at.Animation=at.extend(F,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return f(n.elem,t,Ot.exec(e),n),n}]},tweener:function(t,e){at.isFunction(t)?(e=t,t=["*"]):t=t.match(xt);for(var n,i=0,r=t.length;i<r;i++)n=t[i],F.tweeners[n]=F.tweeners[n]||[],F.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,a,l,c,u,h="width"in e||"height"in e,d=this,f={},p=t.style,m=t.nodeType&&Lt(t),v=St.get(t,"fxshow");n.queue||(null==(s=at._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,at.queue(t,"fx").length||s.empty.fire()})}));for(i in e)if(r=e[i],le.test(r)){if(delete e[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;m=!0}f[i]=v&&v[i]||at.style(t,i)}if((l=!at.isEmptyObject(e))||!at.isEmptyObject(f)){h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=v&&v.display)&&(c=St.get(t,"display")),"none"===(u=at.css(t,"display"))&&(c?u=c:(g([t],!0),c=t.style.display||c,u=at.css(t,"display"),g([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===at.css(t,"float")&&(l||(d.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1;for(i in f)l||(v?"hidden"in v&&(m=v.hidden):v=St.access(t,"fxshow",{display:c}),o&&(v.hidden=!m),m&&g([t],!0),d.done(function(){m||g([t]),St.remove(t,"fxshow");for(i in f)at.style(t,i,f[i])})),l=W(m?v[i]:0,i,d),i in v||(v[i]=l.start,m&&(l.end=l.start,l.start=0))}}],prefilter:function(t,e){e?F.prefilters.unshift(t):F.prefilters.push(t)}}),at.speed=function(t,e,n){var i=t&&"object"==typeof t?at.extend({},t):{complete:n||!n&&e||at.isFunction(t)&&t,duration:t,easing:n&&e||e&&!at.isFunction(e)&&e};return at.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in at.fx.speeds?i.duration=at.fx.speeds[i.duration]:i.duration=at.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){at.isFunction(i.old)&&i.old.call(this),i.queue&&at.dequeue(this,i.queue)},i},at.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Lt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=at.isEmptyObject(t),o=at.speed(e,n,i),s=function(){var e=F(this,at.extend({},t),o);(r||St.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=at.timers,s=St.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ce.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||at.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=St.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=at.timers,s=i?i.length:0;for(n.finish=!0,at.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),at.each(["toggle","show","hide"],function(t,e){var n=at.fn[e];at.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(M(e,!0),t,i,r)}}),at.each({slideDown:M("show"),slideUp:M("hide"),slideToggle:M("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){at.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),at.timers=[],at.fx.tick=function(){var t,e=0,n=at.timers;for(se=at.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||at.fx.stop(),se=void 0},at.fx.timer=function(t){at.timers.push(t),at.fx.start()},at.fx.interval=13,at.fx.start=function(){ae||(ae=!0,$())},at.fx.stop=function(){ae=null},at.fx.speeds={slow:600,fast:200,_default:400},at.fn.delay=function(e,n){return e=at.fx?at.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var r=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(r)}})},function(){var t=X.createElement("input"),e=X.createElement("select").appendChild(X.createElement("option"));t.type="checkbox",st.checkOn=""!==t.value,st.optSelected=e.selected,(t=X.createElement("input")).value="t",t.type="radio",st.radioValue="t"===t.value}();var ue,he=at.expr.attrHandle;at.fn.extend({attr:function(t,e){return Et(this,at.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){at.removeAttr(this,t)})}}),at.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?at.prop(t,e,n):(1===o&&at.isXMLDoc(t)||(r=at.attrHooks[e.toLowerCase()]||(at.expr.match.bool.test(e)?ue:void 0)),void 0!==n?null===n?void at.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=at.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!st.radioValue&&"radio"===e&&r(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(xt);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),ue={set:function(t,e,n){return!1===e?at.removeAttr(t,n):t.setAttribute(n,n),n}},at.each(at.expr.match.bool.source.match(/\w+/g),function(t,e){var n=he[e]||at.find.attr;he[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=he[s],he[s]=r,r=null!=n(t,e,i)?s:null,he[s]=o),r}});var de=/^(?:input|select|textarea|button)$/i,fe=/^(?:a|area)$/i;at.fn.extend({prop:function(t,e){return Et(this,at.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[at.propFix[t]||t]})}}),at.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&at.isXMLDoc(t)||(e=at.propFix[e]||e,r=at.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=at.find.attr(t,"tabindex");return e?parseInt(e,10):de.test(t.nodeName)||fe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),st.optSelected||(at.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),at.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){at.propFix[this.toLowerCase()]=this}),at.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).addClass(t.call(this,e,z(this)))});if("string"==typeof t&&t)for(e=t.match(xt)||[];n=this[l++];)if(r=z(n),i=1===n.nodeType&&" "+q(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=q(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).removeClass(t.call(this,e,z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(xt)||[];n=this[l++];)if(r=z(n),i=1===n.nodeType&&" "+q(r)+" "){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=q(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):at.isFunction(t)?this.each(function(n){at(this).toggleClass(t.call(this,n,z(this),e),e)}):this.each(function(){var e,i,r,o;if("string"===n)for(i=0,r=at(this),o=t.match(xt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||((e=z(this))&&St.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":St.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+q(z(n))+" ").indexOf(e)>-1)return!0;return!1}});var pe=/\r/g;at.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=at.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,at(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=at.map(r,function(t){return null==t?"":t+""})),(e=at.valHooks[this.type]||at.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return(e=at.valHooks[r.type]||at.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(pe,""):null==n?"":n}}}),at.extend({valHooks:{option:{get:function(t){var e=at.find.attr(t,"value");return null!=e?e:q(at.text(t))}},select:{get:function(t){var e,n,i,o=t.options,s=t.selectedIndex,a="select-one"===t.type,l=a?null:[],c=a?s+1:o.length;for(i=s<0?c:a?s:0;i<c;i++)if(((n=o[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(e=at(n).val(),a)return e;l.push(e)}return l},set:function(t,e){for(var n,i,r=t.options,o=at.makeArray(e),s=r.length;s--;)((i=r[s]).selected=at.inArray(at.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),at.each(["radio","checkbox"],function(){at.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=at.inArray(at(t).val(),e)>-1}},st.checkOn||(at.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var ge=/^(?:focusinfocus|focusoutblur)$/;at.extend(at.event,{trigger:function(e,n,i,r){var o,s,a,l,c,u,h,d=[i||X],f=it.call(e,"type")?e.type:e,p=it.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||X,3!==i.nodeType&&8!==i.nodeType&&!ge.test(f+at.event.triggered)&&(f.indexOf(".")>-1&&(f=(p=f.split(".")).shift(),p.sort()),c=f.indexOf(":")<0&&"on"+f,e=e[at.expando]?e:new at.Event(f,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:at.makeArray(n,[e]),h=at.event.special[f]||{},r||!h.trigger||!1!==h.trigger.apply(i,n))){if(!r&&!h.noBubble&&!at.isWindow(i)){for(l=h.delegateType||f,ge.test(l+f)||(s=s.parentNode);s;s=s.parentNode)d.push(s),a=s;a===(i.ownerDocument||X)&&d.push(a.defaultView||a.parentWindow||t)}for(o=0;(s=d[o++])&&!e.isPropagationStopped();)e.type=o>1?l:h.bindType||f,(u=(St.get(s,"events")||{})[e.type]&&St.get(s,"handle"))&&u.apply(s,n),(u=c&&s[c])&&u.apply&&Dt(s)&&(e.result=u.apply(s,n),!1===e.result&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(d.pop(),n)||!Dt(i)||c&&at.isFunction(i[f])&&!at.isWindow(i)&&((a=i[c])&&(i[c]=null),at.event.triggered=f,i[f](),at.event.triggered=void 0,a&&(i[c]=a)),e.result}},simulate:function(t,e,n){var i=at.extend(new at.Event,n,{type:t,isSimulated:!0});at.event.trigger(i,null,e)}}),at.fn.extend({trigger:function(t,e){return this.each(function(){at.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return at.event.trigger(t,e,n,!0)}}),at.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){at.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),at.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),st.focusin="onfocusin"in t,st.focusin||at.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){at.event.simulate(e,t.target,at.event.fix(t))};at.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=St.access(i,e);r||i.addEventListener(t,n,!0),St.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=St.access(i,e)-1;r?St.access(i,e,r):(i.removeEventListener(t,n,!0),St.remove(i,e))}}});var me=t.location,ve=at.now(),ye=/\?/;at.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||at.error("Invalid XML: "+e),n};var _e=/\[\]$/,we=/\r?\n/g,be=/^(?:submit|button|image|reset|file)$/i,xe=/^(?:input|select|textarea|keygen)/i;at.param=function(t,e){var n,i=[],r=function(t,e){var n=at.isFunction(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!at.isPlainObject(t))at.each(t,function(){r(this.name,this.value)});else for(n in t)B(n,t[n],e,r);return i.join("&")},at.fn.extend({serialize:function(){return at.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=at.prop(this,"elements");return t?at.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!at(this).is(":disabled")&&xe.test(this.nodeName)&&!be.test(t)&&(this.checked||!$t.test(t))}).map(function(t,e){var n=at(this).val();return null==n?null:Array.isArray(n)?at.map(n,function(t){return{name:e.name,value:t.replace(we,"\r\n")}}):{name:e.name,value:n.replace(we,"\r\n")}}).get()}});var Te=/%20/g,Ce=/#.*$/,Ee=/([?&])_=[^&]*/,De=/^(.*?):[ \t]*([^\r\n]*)$/gm,Se=/^(?:GET|HEAD)$/,Ae=/^\/\//,Ie={},Ne={},ke="*/".concat("*"),Oe=X.createElement("a");Oe.href=me.href,at.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:me.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(me.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ke,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":at.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?V(V(t,at.ajaxSettings),e):V(at.ajaxSettings,t)},ajaxPrefilter:Q(Ie),ajaxTransport:Q(Ne),ajax:function(e,n){function i(e,n,i,a){var c,d,f,w,b,x=n;u||(u=!0,l&&t.clearTimeout(l),r=void 0,s=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(w=function(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,T,i)),w=function(t,e,n,i){var r,o,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(p,w,T,c),c?(p.ifModified&&((b=T.getResponseHeader("Last-Modified"))&&(at.lastModified[o]=b),(b=T.getResponseHeader("etag"))&&(at.etag[o]=b)),204===e||"HEAD"===p.type?x="nocontent":304===e?x="notmodified":(x=w.state,d=w.data,c=!(f=w.error))):(f=x,!e&&x||(x="error",e<0&&(e=0))),T.status=e,T.statusText=(n||x)+"",c?v.resolveWith(g,[d,x,T]):v.rejectWith(g,[T,x,f]),T.statusCode(_),_=void 0,h&&m.trigger(c?"ajaxSuccess":"ajaxError",[T,p,c?d:f]),y.fireWith(g,[T,x]),h&&(m.trigger("ajaxComplete",[T,p]),--at.active||at.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,o,s,a,l,c,u,h,d,f,p=at.ajaxSetup({},n),g=p.context||p,m=p.context&&(g.nodeType||g.jquery)?at(g):at.event,v=at.Deferred(),y=at.Callbacks("once memory"),_=p.statusCode||{},w={},b={},x="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=De.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(t,e){return null==u&&(t=b[t.toLowerCase()]=b[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==u&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)T.always(t[T.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||x;return r&&r.abort(e),i(0,e),this}};if(v.promise(T),p.url=((e||p.url||me.href)+"").replace(Ae,me.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(xt)||[""],null==p.crossDomain){c=X.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Oe.protocol+"//"+Oe.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=at.param(p.data,p.traditional)),U(Ie,p,n,T),u)return T;(h=at.event&&p.global)&&0==at.active++&&at.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Se.test(p.type),o=p.url.replace(Ce,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Te,"+")):(f=p.url.slice(o.length),p.data&&(o+=(ye.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Ee,"$1"),f=(ye.test(o)?"&":"?")+"_="+ve+++f),p.url=o+f),p.ifModified&&(at.lastModified[o]&&T.setRequestHeader("If-Modified-Since",at.lastModified[o]),at.etag[o]&&T.setRequestHeader("If-None-Match",at.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ke+"; q=0.01":""):p.accepts["*"]);for(d in p.headers)T.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(g,T,p)||u))return T.abort();if(x="abort",y.add(p.complete),T.done(p.success),T.fail(p.error),r=U(Ne,p,n,T)){if(T.readyState=1,h&&m.trigger("ajaxSend",[T,p]),u)return T;p.async&&p.timeout>0&&(l=t.setTimeout(function(){T.abort("timeout")},p.timeout));try{u=!1,r.send(w,i)}catch(t){if(u)throw t;i(-1,t)}}else i(-1,"No Transport");return T},getJSON:function(t,e,n){return at.get(t,e,n,"json")},getScript:function(t,e){return at.get(t,void 0,e,"script")}}),at.each(["get","post"],function(t,e){at[e]=function(t,n,i,r){return at.isFunction(n)&&(r=r||i,i=n,n=void 0),at.ajax(at.extend({url:t,type:e,dataType:r,data:n,success:i},at.isPlainObject(t)&&t))}}),at._evalUrl=function(t){return at.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},at.fn.extend({wrapAll:function(t){var e;return this[0]&&(at.isFunction(t)&&(t=t.call(this[0])),e=at(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return at.isFunction(t)?this.each(function(e){at(this).wrapInner(t.call(this,e))}):this.each(function(){var e=at(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=at.isFunction(t);return this.each(function(n){at(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){at(this).replaceWith(this.childNodes)}),this}}),at.expr.pseudos.hidden=function(t){return!at.expr.pseudos.visible(t)},at.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},at.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var je={0:200,1223:204},Le=at.ajaxSettings.xhr();st.cors=!!Le&&"withCredentials"in Le,st.ajax=Le=!!Le,at.ajaxTransport(function(e){var n,i;if(st.cors||Le&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(je[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),at.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),at.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return at.globalEval(t),t}}}),at.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),at.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=at("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),X.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Pe=[],He=/(=)\?(?=&|$)|\?\?/;at.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Pe.pop()||at.expando+"_"+ve++;return this[t]=!0,t}}),at.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,s,a=!1!==e.jsonp&&(He.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&He.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=at.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(He,"$1"+r):!1!==e.jsonp&&(e.url+=(ye.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||at.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},i.always(function(){void 0===o?at(t).removeProp(r):t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,Pe.push(r)),s&&at.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),st.createHTMLDocument=function(){var t=X.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),at.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var i,r,o;return e||(st.createHTMLDocument?((i=(e=X.implementation.createHTMLDocument("")).createElement("base")).href=X.location.href,e.head.appendChild(i)):e=X),r=mt.exec(t),o=!n&&[],r?[e.createElement(r[1])]:(r=y([t],e,o),o&&o.length&&at(o).remove(),at.merge([],r.childNodes))},at.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=q(t.slice(a)),t=t.slice(0,a)),at.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&at.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?at("<div>").append(at.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},at.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){at.fn[e]=function(t){return this.on(e,t)}}),at.expr.pseudos.animated=function(t){return at.grep(at.timers,function(e){return t===e.elem}).length},at.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,c=at.css(t,"position"),u=at(t),h={};"static"===c&&(t.style.position="relative"),a=u.offset(),o=at.css(t,"top"),l=at.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(s=(i=u.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),at.isFunction(e)&&(e=e.call(t,n,at.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):u.css(h)}},at.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){at.offset.setOffset(this,t,e)});var e,n,i,r,o=this[0];if(o)return o.getClientRects().length?(i=o.getBoundingClientRect(),e=o.ownerDocument,n=e.documentElement,r=e.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===at.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),r(t[0],"html")||(i=t.offset()),i={top:i.top+at.css(t[0],"borderTopWidth",!0),left:i.left+at.css(t[0],"borderLeftWidth",!0)}),{top:e.top-i.top-at.css(n,"marginTop",!0),left:e.left-i.left-at.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===at.css(t,"position");)t=t.offsetParent;return t||qt})}}),at.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;at.fn[t]=function(i){return Et(this,function(t,i,r){var o;if(at.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r},t,i,arguments.length)}}),at.each(["top","left"],function(t,e){at.cssHooks[e]=k(st.pixelPosition,function(t,n){if(n)return n=N(t,e),Zt.test(n)?at(t).position()[e]+"px":n})}),at.each({Height:"height",Width:"width"},function(t,e){at.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){at.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return Et(this,function(e,n,r){var o;return at.isWindow(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?at.css(e,n,a):at.style(e,n,r,a)},e,s?r:void 0,s)}})}),at.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),at.holdReady=function(t){t?at.readyWait++:at.ready(!0)},at.isArray=Array.isArray,at.parseJSON=JSON.parse,at.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return at});var $e=t.jQuery,Re=t.$;return at.noConflict=function(e){return t.$===at&&(t.$=Re),e&&t.jQuery===at&&(t.jQuery=$e),at},e||(t.jQuery=t.$=at),at}),function(t,e,n,i){function r(e,n){this.settings=null,this.options=t.extend({},r.Defaults,n),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,n){this._handlers[n]=t.proxy(this[n],this)},this)),t.each(r.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(r.Workers,t.proxy(function(e,n){this._pipe.push({filter:n.filter,run:t.proxy(n.run,this)})},this)),this.setup(),this.initialize()}r.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},r.Width={Default:"default",Inner:"inner",Outer:"outer"},r.Type={Event:"event",State:"state"},r.Plugins={},r.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=n>1||t.items.merge,o[i]=r?e*n:this._items[i].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],n=this._items,i=this.settings,r=Math.max(2*i.items,4),o=2*Math.ceil(n.length/2),s=i.loop&&n.length?i.rewind?r:Math.max(r,o):0,a="",l="";for(s/=2;s--;)e.push(this.normalize(e.length/2,!0)),a+=n[e[e.length-1]][0].outerHTML,e.push(this.normalize(n.length-1-(e.length-1)/2,!0)),l=n[e[e.length-1]][0].outerHTML+l;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,r=0,o=[];++n<e;)i=o[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,o.push(i+r*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,r=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,s=this.coordinates(this.current())+o,a=s+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+o*r,(this.op(t,"<=",s)&&this.op(t,">",a)||this.op(e,"<",s)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],r.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,n,r;e=this.$element.find("img"),n=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,r=this.$element.children(n).width(),e.length&&r<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},r.prototype.setup=function(){var e=this.viewport(),n=this.options.responsive,i=-1,r=null;n?(t.each(n,function(t){t<=e&&t>i&&(i=Number(t))}),"function"==typeof(r=t.extend({},this.options,n[i])).stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):r=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=i,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},r.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},r.prototype.prepare=function(e){var n=this.trigger("prepare",{content:e});return n.data||(n.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:n.data}),n.data},r.prototype.update=function(){for(var e=0,n=this._pipe.length,i=t.proxy(function(t){return this[t]},this._invalidated),r={};e<n;)(this._invalidated.all||t.grep(this._pipe[e].filter,i).length>0)&&this._pipe[e].run(r),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},r.prototype.width=function(t){switch(t=t||r.Width.Default){case r.Width.Inner:case r.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},r.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},r.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},r.prototype.onResize=function(){return!!this._items.length&&this._width!==this.$element.width()&&!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))},r.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},r.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),i={x:i[16===i.length?12:4],y:i[16===i.length?13:5]}):(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},r.prototype.onDragMove=function(t){var e=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,o.x=Math.max(Math.min(o.x,e+i),n+i)),this._drag.stage.current=o,this.animate(o.x))},r.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),r=this._drag.stage.current,o=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},r.prototype.closest=function(e,n){var i=-1,r=this.width(),o=this.coordinates();return this.settings.freeDrag||t.each(o,t.proxy(function(t,s){return"left"===n&&e>s-30&&e<s+30?i=t:"right"===n&&e>s-r-30&&e<s-r+30?i=t+1:this.op(e,"<",s)&&this.op(e,">",o[t+1]||s-r)&&(i="left"===n?t+1:t),-1===i},this)),this.settings.loop||(this.op(e,">",o[this.minimum()])?i=e=this.minimum():this.op(e,"<",o[this.maximum()])&&(i=e=this.maximum())),i},r.prototype.animate=function(e){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):n?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},r.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},r.prototype.current=function(t){if(t===i)return this._current;if(0===this._items.length)return i;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==i&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},r.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},r.prototype.reset=function(t){(t=this.normalize(t))!==i&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},r.prototype.normalize=function(t,e){var n=this._items.length,r=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=i:(t<0||t>=n+r)&&(t=((t-r/2)%n+n)%n+r/2),t},r.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},r.prototype.maximum=function(t){var e,n,i,r=this.settings,o=this._coordinates.length;if(r.loop)o=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){for(e=this._items.length,n=this._items[--e].width(),i=this.$element.width();e--&&!((n+=this._items[e].width()+this.settings.margin)>i););o=e+1}else o=r.center?this._items.length-1:this._items.length-r.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},r.prototype.minimum=function(t){return t?0:this._clones.length/2},r.prototype.items=function(t){return t===i?this._items.slice():(t=this.normalize(t,!0),this._items[t])},r.prototype.mergers=function(t){return t===i?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},r.prototype.clones=function(e){var n=this._clones.length/2,r=n+this._items.length,o=function(t){return t%2==0?r+t/2:n-(t+1)/2};return e===i?t.map(this._clones,function(t,e){return o(e)}):t.map(this._clones,function(t,n){return t===e?o(n):null})},r.prototype.speed=function(t){return t!==i&&(this._speed=t),this._speed},r.prototype.coordinates=function(e){var n,r=1,o=e-1;return e===i?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(r=-1,o=e+1),n=this._coordinates[e],n+=(this.width()-n+(this._coordinates[o]||0))/2*r):n=this._coordinates[o]||0,n=Math.ceil(n))},r.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},r.prototype.to=function(t,e){var n=this.current(),i=null,r=t-this.relative(n),o=(r>0)-(r<0),s=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>s/2&&(r+=-1*o*s),t=n+r,(i=((t-a)%s+s)%s+a)!==t&&i-r<=l&&i-r>0&&(n=i-r,t=i,this.reset(n))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},r.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},r.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},r.prototype.onTransitionEnd=function(t){if(t!==i&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},r.prototype.viewport=function(){var i;return this.options.responsiveBaseElement!==e?i=t(this.options.responsiveBaseElement).width():e.innerWidth?i=e.innerWidth:n.documentElement&&n.documentElement.clientWidth?i=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),i},r.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},r.prototype.add=function(e,n){var r=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:n}),e=this.prepare(e),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[n-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(e),this._items.splice(n,0,e),this._mergers.splice(n,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:e,position:n})},r.prototype.remove=function(t){(t=this.normalize(t,!0))!==i&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},r.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,n){this.enter("pre-loading"),n=t(n),t(new Image).one("load",t.proxy(function(t){n.attr("src",t.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},r.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},r.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?t>n:t<n;case">":return i?t<n:t>n;case">=":return i?t<=n:t>=n;case"<=":return i?t>=n:t<=n}},r.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},r.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},r.prototype.trigger=function(e,n,i,o,s){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,i],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",i||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,n));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:r.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},r.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===i&&(this._states.current[e]=0),this._states.current[e]++},this))},r.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},r.prototype.register=function(e){if(e.type===r.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var n=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!n||!n.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:n.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===r.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(n,i){return t.inArray(n,this._states.tags[e.name])===i},this)))},r.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},r.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},r.prototype.pointer=function(t){var n={x:null,y:null};return t=t.originalEvent||t||e.event,(t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(n.x=t.pageX,n.y=t.pageY):(n.x=t.clientX,n.y=t.clientY),n},r.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},r.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=t(this),o=i.data("owl.carousel");o||(o=new r(this,"object"==typeof e&&e),i.data("owl.carousel",o),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,n){o.register({type:r.Type.Event,name:n}),o.$element.on(n+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([n]),o[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},o))})),"string"==typeof e&&"_"!==e.charAt(0)&&o[e].apply(o,n)})},t.fn.owlCarousel.Constructor=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,n;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var n=this._core.settings,i=n.center&&Math.ceil(n.items/2)||n.items,r=n.center&&-1*i||0,o=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+r,s=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);r++<i;)this.load(s/2+this._core.relative(o)),s&&t.each(this._core.clones(this._core.relative(o)),a),o++},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1},r.prototype.load=function(n){var i=this._core.$stage.children().eq(n),r=i&&i.find(".owl-lazy");!r||t.inArray(i.get(0),this._loaded)>-1||(r.each(t.proxy(function(n,i){var r,o=t(i),s=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:s},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:s},"lazy")},this)).attr("src",s):(r=new Image,r.onload=t.proxy(function(){o.css({"background-image":'url("'+s+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:s},"lazy")},this),r.src=s)},this)),this._loaded.push(i.get(0)))},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var e=this._core._current,n=e+this._core.settings.items,i=this._core.$stage.children().toArray().slice(e,n),r=[],o=0;t.each(i,function(e,n){r.push(t(n).height())}),o=Math.max.apply(null,r),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,t(e.content)))}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(t,e){var n=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,s=t.attr("href");if(!s)throw new Error("Missing video URL.");if((i=s.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[s]={type:n,id:i,width:r,height:o},e.attr("data-video",s),this.thumbnail(t,this._videos[s])},r.prototype.thumbnail=function(e,n){var i,r,o,s=n.width&&n.height?'style="width:'+n.width+"px;height:"+n.height+'px;"':"",a=e.find("img"),l="src",c="",u=this._core.settings,h=function(t){r='<div class="owl-video-play-icon"></div>',i=u.lazyLoad?'<div class="owl-video-tn '+c+'" '+l+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(i),e.after(r)};if(e.wrap('<div class="owl-video-wrapper"'+s+"></div>"),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length)return h(a.attr(l)),a.remove(),!1;"youtube"===n.type?(o="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",h(o)):"vimeo"===n.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t[0].thumbnail_large,h(o)}}):"vzaar"===n.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t.framegrab_url,h(o)}})},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(e){var n,i=t(e.target).closest("."+this._core.settings.itemClass),r=this._videos[i.attr("data-video")],o=r.width||"100%",s=r.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),i=this._core.items(this._core.relative(i.index())),this._core.reset(i.index()),"youtube"===r.type?n='<iframe width="'+o+'" height="'+s+'" src="//www.youtube.com/embed/'+r.id+"?autoplay=1&rel=0&v="+r.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===r.type?n='<iframe src="//player.vimeo.com/video/'+r.id+'?autoplay=1" width="'+o+'" height="'+s+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===r.type&&(n='<iframe frameborder="0"height="'+s+'"width="'+o+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+r.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+n+"</div>").insertAfter(i.find(".owl-video")),this._playing=i.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var e=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this.core=e,this.core.options=t.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,n=t.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,s=this.core.settings.animateOut;this.core.current()!==this.previous&&(s&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(t.support.animation.end,n).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(s)),o&&r.one(t.support.animation.end,n).addClass("animated owl-animated-in").addClass(o))}},r.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},r.prototype._getNextTimeout=function(i,r){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||n.hidden||this._core.next(r||this._core.settings.autoplaySpeed)},this),i||this._core.settings.autoplayTimeout)},r.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},r.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},r.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var e,n=this._core.settings;this._controls.$relative=(n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=t("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[t("<div>").addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?t(n.dotsContainer):t("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var i=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},r.prototype.destroy=function(){var t,e,n,i;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},r.prototype.update=function(){var t,e,n=this._core.clones().length/2,i=n+this._core.items().length,r=this._core.maximum(!0),o=this._core.settings,s=o.center||o.autoWidth||o.dotsData?1:o.dotsEach||o.items;if("page"!==o.slideBy&&(o.slideBy=Math.min(o.slideBy,o.items)),o.dots||"page"==o.slideBy)for(this._pages=[],t=n,e=0,0;t<i;t++){if(e>=s||0===e){if(this._pages.push({start:Math.min(r,t-n),end:t-n+s-1}),Math.min(r,t-n)===r)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},r.prototype.draw=function(){var e,n=this._core.settings,i=this._core.items().length<=n.items,r=this._core.relative(this._core.current()),o=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!o&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(e=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(e){var n=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},r.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,n){return t.start<=e&&t.end>=e},this)).pop()},r.prototype.getPosition=function(e){var n,i,r=this._core.settings;return"page"==r.slideBy?(n=t.inArray(this.current(),this._pages),i=this._pages.length,e?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,e?n+=r.slideBy:n-=r.slideBy),n},r.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},r.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},r.prototype.to=function(e,n,i){var r;!i&&this._pages.length?(r=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%r+r)%r].start,n)):t.proxy(this._overrides.to,this._core)(e,n)},t.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=e.content}},this),"changed.owl.carousel":t.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),r=t.map(this._hashes,function(t,e){return t===i?e:null}).join();if(!r||e.location.hash.slice(1)===r)return;e.location.hash=r}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var n=e.location.hash.substring(1),i=this._core.$stage.children(),r=this._hashes[n]&&i.index(this._hashes[n]);void 0!==r&&r!==this._core.current()&&this._core.to(this._core.relative(r),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var n,i;t(e).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){function r(e,n){var r=!1,o=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(o+" ")+o).split(" "),function(t,e){if(s[e]!==i)return r=!n||e,!1}),r}function o(t){return r(t,!0)}var s=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},c={end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}},u=function(){return!!r("transform")},h=function(){return!!r("perspective")},d=function(){return!!r("animation")};(function(){return!!r("transition")})()&&(t.support.transition=new String(o("transition")),t.support.transition.end=l.end[t.support.transition]),d()&&(t.support.animation=new String(o("animation")),t.support.animation.end=c.end[t.support.animation]),u()&&(t.support.transform=new String(o("transform")),t.support.transform3d=h())}(window.Zepto||window.jQuery,window,document),$(document).ready(function(){$(".cross").hide(),$(".menu").hide(),$(".hamburger").click(function(){$(".menu").slideToggle("slow",function(){$(".hamburger").hide(),$(".cross").show()})}),$(".cross").click(function(){$(".menu").slideToggle("slow",function(){$(".cross").hide(),$(".hamburger").show()})}),$(".mouse a").on("click",function(t){t.preventDefault(),$("html, body").animate({scrollTop:$($(this).attr("href")).offset().top},500,"linear")}),$("#services-dropdown").on("click",function(){console.log("dryaaa"),$("#myTab").toggleClass("rolldown")}),$(".nav-link").on("click",function(){console.log("dratuti"),$("#myTab").toggleClass("rolldown")})}),console.log("app.js"),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");+function(t){var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),function(){function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),i=function(t){function e(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function n(t){return(t[0]||t).nodeType}function i(e){var n=this,i=!1;return t(this).one(s.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||s.triggerTransitionEnd(n)},e),this}var r=!1,o={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},s={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");return e||(e=t.getAttribute("href")||"",e=/^#[a-z]/i.test(e)?e:null),e},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(r.end)},supportsTransitionEnd:function(){return Boolean(r)},typeCheckConfig:function(t,i,r){for(var o in r)if(r.hasOwnProperty(o)){var s=r[o],a=i[o],l=a&&n(a)?"element":e(a);if(!new RegExp(s).test(l))throw new Error(t.toUpperCase()+': Option "'+o+'" provided type "'+l+'" but expected type "'+s+'".')}}};return r=function(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in o)if(void 0!==t.style[e])return{end:o[e]};return!1}(),t.fn.emulateTransitionEnd=i,s.supportsTransitionEnd()&&(t.event.special[s.TRANSITION_END]={bindType:r.end,delegateType:r.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}),s}(jQuery),r=(function(e){var r="bs.alert",o=e.fn.alert,s={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},a="alert",l="fade",c="show",u=function(){function o(e){t(this,o),this._element=e}return o.prototype.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},o.prototype.dispose=function(){e.removeData(this._element,r),this._element=null},o.prototype._getRootElement=function(t){var n=i.getSelectorFromElement(t),r=!1;return n&&(r=e(n)[0]),r||(r=e(t).closest("."+a)[0]),r},o.prototype._triggerCloseEvent=function(t){var n=e.Event(s.CLOSE);return e(t).trigger(n),n},o.prototype._removeElement=function(t){var n=this;e(t).removeClass(c),i.supportsTransitionEnd()&&e(t).hasClass(l)?e(t).one(i.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(150):this._destroyElement(t)},o.prototype._destroyElement=function(t){e(t).detach().trigger(s.CLOSED).remove()},o._jQueryInterface=function(t){return this.each(function(){var n=e(this),i=n.data(r);i||(i=new o(this),n.data(r,i)),"close"===t&&i[t](this)})},o._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},n(o,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),o}();e(document).on(s.CLICK_DATA_API,'[data-dismiss="alert"]',u._handleDismiss(new u)),e.fn.alert=u._jQueryInterface,e.fn.alert.Constructor=u,e.fn.alert.noConflict=function(){return e.fn.alert=o,u._jQueryInterface}}(jQuery),function(e){var i="bs.button",r="."+i,o=e.fn.button,s="active",a="btn",l="focus",c='[data-toggle^="button"]',u='[data-toggle="buttons"]',h="input",d=".active",f=".btn",p={CLICK_DATA_API:"click"+r+".data-api",FOCUS_BLUR_DATA_API:"focus"+r+".data-api blur"+r+".data-api"},g=function(){function r(e){t(this,r),this._element=e}return r.prototype.toggle=function(){var t=!0,n=e(this._element).closest(u)[0];if(n){var i=e(this._element).find(h)[0];if(i){if("radio"===i.type)if(i.checked&&e(this._element).hasClass(s))t=!1;else{var r=e(n).find(d)[0];r&&e(r).removeClass(s)}t&&(i.checked=!e(this._element).hasClass(s),e(i).trigger("change")),i.focus()}}this._element.setAttribute("aria-pressed",!e(this._element).hasClass(s)),t&&e(this._element).toggleClass(s)},r.prototype.dispose=function(){e.removeData(this._element,i),this._element=null},r._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(i);n||(n=new r(this),e(this).data(i,n)),"toggle"===t&&n[t]()})},n(r,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),r}();e(document).on(p.CLICK_DATA_API,c,function(t){t.preventDefault();var n=t.target;e(n).hasClass(a)||(n=e(n).closest(f)),g._jQueryInterface.call(e(n),"toggle")}).on(p.FOCUS_BLUR_DATA_API,c,function(t){var n=e(t.target).closest(f)[0];e(n).toggleClass(l,/^focus(in)?$/.test(t.type))}),e.fn.button=g._jQueryInterface,e.fn.button.Constructor=g,e.fn.button.noConflict=function(){return e.fn.button=o,g._jQueryInterface}}(jQuery),function(r){var o="carousel",s="bs.carousel",a="."+s,l=r.fn[o],c={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},u={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},h={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},d={SLIDE:"slide"+a,SLID:"slid"+a,KEYDOWN:"keydown"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a,LOAD_DATA_API:"load"+a+".data-api",CLICK_DATA_API:"click"+a+".data-api"},f="carousel",p="active",g="slide",m="carousel-item-right",v="carousel-item-left",y="carousel-item-next",_="carousel-item-prev",w={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},b=function(){function l(e,n){t(this,l),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(n),this._element=r(e)[0],this._indicatorsElement=r(this._element).find(w.INDICATORS)[0],this._addEventListeners()}return l.prototype.next=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(h.NEXT)},l.prototype.nextWhenVisible=function(){document.hidden||this.next()},l.prototype.prev=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(h.PREVIOUS)},l.prototype.pause=function(t){t||(this._isPaused=!0),r(this._element).find(w.NEXT_PREV)[0]&&i.supportsTransitionEnd()&&(i.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},l.prototype.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},l.prototype.to=function(t){var e=this;this._activeElement=r(this._element).find(w.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)r(this._element).one(d.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=t>n?h.NEXT:h.PREVIOUS;this._slide(i,this._items[t])}},l.prototype.dispose=function(){r(this._element).off(a),r.removeData(this._element,s),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},l.prototype._getConfig=function(t){return t=r.extend({},c,t),i.typeCheckConfig(o,t,u),t},l.prototype._addEventListeners=function(){var t=this;this._config.keyboard&&r(this._element).on(d.KEYDOWN,function(e){return t._keydown(e)}),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||r(this._element).on(d.MOUSEENTER,function(e){return t.pause(e)}).on(d.MOUSELEAVE,function(e){return t.cycle(e)})},l.prototype._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next();break;default:return}},l.prototype._getItemIndex=function(t){return this._items=r.makeArray(r(t).parent().find(w.ITEM)),this._items.indexOf(t)},l.prototype._getItemByDirection=function(t,e){var n=t===h.NEXT,i=t===h.PREVIOUS,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=(r+(t===h.PREVIOUS?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},l.prototype._triggerSlideEvent=function(t,e){var n=r.Event(d.SLIDE,{relatedTarget:t,direction:e});return r(this._element).trigger(n),n},l.prototype._setActiveIndicatorElement=function(t){if(this._indicatorsElement){r(this._indicatorsElement).find(w.ACTIVE).removeClass(p);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&r(e).addClass(p)}},l.prototype._slide=function(t,e){var n=this,o=r(this._element).find(w.ACTIVE_ITEM)[0],s=e||o&&this._getItemByDirection(t,o),a=Boolean(this._interval),l=void 0,c=void 0,u=void 0;if(t===h.NEXT?(l=v,c=y,u=h.LEFT):(l=m,c=_,u=h.RIGHT),s&&r(s).hasClass(p))this._isSliding=!1;else{if(!this._triggerSlideEvent(s,u).isDefaultPrevented()&&o&&s){this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(s);var f=r.Event(d.SLID,{relatedTarget:s,direction:u});i.supportsTransitionEnd()&&r(this._element).hasClass(g)?(r(s).addClass(c),i.reflow(s),r(o).addClass(l),r(s).addClass(l),r(o).one(i.TRANSITION_END,function(){r(s).removeClass(l+" "+c).addClass(p),r(o).removeClass(p+" "+c+" "+l),n._isSliding=!1,setTimeout(function(){return r(n._element).trigger(f)},0)}).emulateTransitionEnd(600)):(r(o).removeClass(p),r(s).addClass(p),this._isSliding=!1,r(this._element).trigger(f)),a&&this.cycle()}}},l._jQueryInterface=function(t){return this.each(function(){var n=r(this).data(s),i=r.extend({},c,r(this).data());"object"===(void 0===t?"undefined":e(t))&&r.extend(i,t);var o="string"==typeof t?t:i.slide;if(n||(n=new l(this,i),r(this).data(s,n)),"number"==typeof t)n.to(t);else if("string"==typeof o){if(void 0===n[o])throw new Error('No method named "'+o+'"');n[o]()}else i.interval&&(n.pause(),n.cycle())})},l._dataApiClickHandler=function(t){var e=i.getSelectorFromElement(this);if(e){var n=r(e)[0];if(n&&r(n).hasClass(f)){var o=r.extend({},r(n).data(),r(this).data()),a=this.getAttribute("data-slide-to");a&&(o.interval=!1),l._jQueryInterface.call(r(n),o),a&&r(n).data(s).to(a),t.preventDefault()}}},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return c}}]),l}();r(document).on(d.CLICK_DATA_API,w.DATA_SLIDE,b._dataApiClickHandler),r(window).on(d.LOAD_DATA_API,function(){r(w.DATA_RIDE).each(function(){var t=r(this);b._jQueryInterface.call(t,t.data())})}),r.fn[o]=b._jQueryInterface,r.fn[o].Constructor=b,r.fn[o].noConflict=function(){return r.fn[o]=l,b._jQueryInterface}}(jQuery),function(r){var o="collapse",s="bs.collapse",a="."+s,l=r.fn[o],c={toggle:!0,parent:""},u={toggle:"boolean",parent:"string"},h={SHOW:"show"+a,SHOWN:"shown"+a,HIDE:"hide"+a,HIDDEN:"hidden"+a,CLICK_DATA_API:"click"+a+".data-api"},d="show",f="collapse",p="collapsing",g="collapsed",m="width",v="height",y=".card > .show, .card > .collapsing",_='[data-toggle="collapse"]',w=function(){function a(e,n){t(this,a),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=r.makeArray(r('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]')),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return a.prototype.toggle=function(){r(this._element).hasClass(d)?this.hide():this.show()},a.prototype.show=function(){var t=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(!r(this._element).hasClass(d)){var e=void 0,n=void 0;if(this._parent&&((e=r.makeArray(r(this._parent).find(y))).length||(e=null)),!(e&&(n=r(e).data(s))&&n._isTransitioning)){var o=r.Event(h.SHOW);if(r(this._element).trigger(o),!o.isDefaultPrevented()){e&&(a._jQueryInterface.call(r(e),"hide"),n||r(e).data(s,null));var l=this._getDimension();r(this._element).removeClass(f).addClass(p),this._element.style[l]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&r(this._triggerArray).removeClass(g).attr("aria-expanded",!0),this.setTransitioning(!0);var c=function(){r(t._element).removeClass(p).addClass(f).addClass(d),t._element.style[l]="",t.setTransitioning(!1),r(t._element).trigger(h.SHOWN)};if(i.supportsTransitionEnd()){var u="scroll"+(l[0].toUpperCase()+l.slice(1));r(this._element).one(i.TRANSITION_END,c).emulateTransitionEnd(600),this._element.style[l]=this._element[u]+"px"}else c()}}}},a.prototype.hide=function(){var t=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(r(this._element).hasClass(d)){var e=r.Event(h.HIDE);if(r(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension(),o=n===m?"offsetWidth":"offsetHeight";this._element.style[n]=this._element[o]+"px",i.reflow(this._element),r(this._element).addClass(p).removeClass(f).removeClass(d),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&r(this._triggerArray).addClass(g).attr("aria-expanded",!1),this.setTransitioning(!0);var s=function(){t.setTransitioning(!1),r(t._element).removeClass(p).addClass(f).trigger(h.HIDDEN)};this._element.style[n]="",i.supportsTransitionEnd()?r(this._element).one(i.TRANSITION_END,s).emulateTransitionEnd(600):s()}}},a.prototype.setTransitioning=function(t){this._isTransitioning=t},a.prototype.dispose=function(){r.removeData(this._element,s),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},a.prototype._getConfig=function(t){return t=r.extend({},c,t),t.toggle=Boolean(t.toggle),i.typeCheckConfig(o,t,u),t},a.prototype._getDimension=function(){return r(this._element).hasClass(m)?m:v},a.prototype._getParent=function(){var t=this,e=r(this._config.parent)[0],n='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return r(e).find(n).each(function(e,n){t._addAriaAndCollapsedClass(a._getTargetFromElement(n),[n])}),e},a.prototype._addAriaAndCollapsedClass=function(t,e){if(t){var n=r(t).hasClass(d);t.setAttribute("aria-expanded",n),e.length&&r(e).toggleClass(g,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(t){var e=i.getSelectorFromElement(t);return e?r(e)[0]:null},a._jQueryInterface=function(t){return this.each(function(){var n=r(this),i=n.data(s),o=r.extend({},c,n.data(),"object"===(void 0===t?"undefined":e(t))&&t);if(!i&&o.toggle&&/show|hide/.test(t)&&(o.toggle=!1),i||(i=new a(this,o),n.data(s,i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t]()}})},n(a,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return c}}]),a}();r(document).on(h.CLICK_DATA_API,_,function(t){t.preventDefault();var e=w._getTargetFromElement(this),n=r(e).data(s)?"toggle":r(this).data();w._jQueryInterface.call(r(e),n)}),r.fn[o]=w._jQueryInterface,r.fn[o].Constructor=w,r.fn[o].noConflict=function(){return r.fn[o]=l,w._jQueryInterface}}(jQuery),function(e){var r="dropdown",o="bs.dropdown",s="."+o,a=e.fn[r],l={HIDE:"hide"+s,HIDDEN:"hidden"+s,SHOW:"show"+s,SHOWN:"shown"+s,CLICK:"click"+s,CLICK_DATA_API:"click"+s+".data-api",FOCUSIN_DATA_API:"focusin"+s+".data-api",KEYDOWN_DATA_API:"keydown"+s+".data-api"},c="dropdown-backdrop",u="disabled",h="show",d=".dropdown-backdrop",f='[data-toggle="dropdown"]',p=".dropdown form",g='[role="menu"]',m='[role="listbox"]',v=".navbar-nav",y='[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a',_=function(){function r(e){t(this,r),this._element=e,this._addEventListeners()}return r.prototype.toggle=function(){if(this.disabled||e(this).hasClass(u))return!1;var t=r._getParentFromElement(this),n=e(t).hasClass(h);if(r._clearMenus(),n)return!1;if("ontouchstart"in document.documentElement&&!e(t).closest(v).length){var i=document.createElement("div");i.className=c,e(i).insertBefore(this),e(i).on("click",r._clearMenus)}var o={relatedTarget:this},s=e.Event(l.SHOW,o);return e(t).trigger(s),!s.isDefaultPrevented()&&(this.focus(),this.setAttribute("aria-expanded",!0),e(t).toggleClass(h),e(t).trigger(e.Event(l.SHOWN,o)),!1)},r.prototype.dispose=function(){e.removeData(this._element,o),e(this._element).off(s),this._element=null},r.prototype._addEventListeners=function(){e(this._element).on(l.CLICK,this.toggle)},r._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(o);if(n||(n=new r(this),e(this).data(o,n)),"string"==typeof t){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t].call(this)}})},r._clearMenus=function(t){if(!t||3!==t.which){var n=e(d)[0];n&&n.parentNode.removeChild(n);for(var i=e.makeArray(e(f)),o=0;o<i.length;o++){var s=r._getParentFromElement(i[o]),a={relatedTarget:i[o]};if(e(s).hasClass(h)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"focusin"===t.type)&&e.contains(s,t.target))){var c=e.Event(l.HIDE,a);e(s).trigger(c),c.isDefaultPrevented()||(i[o].setAttribute("aria-expanded","false"),e(s).removeClass(h).trigger(e.Event(l.HIDDEN,a)))}}}},r._getParentFromElement=function(t){var n=void 0,r=i.getSelectorFromElement(t);return r&&(n=e(r)[0]),n||t.parentNode},r._dataApiKeydownHandler=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(u))){var n=r._getParentFromElement(this),i=e(n).hasClass(h);if(!i&&27!==t.which||i&&27===t.which){if(27===t.which){var o=e(n).find(f)[0];e(o).trigger("focus")}e(this).trigger("click")}else{var s=e(n).find(y).get();if(s.length){var a=s.indexOf(t.target);38===t.which&&a>0&&a--,40===t.which&&a<s.length-1&&a++,a<0&&(a=0),s[a].focus()}}}},n(r,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),r}();e(document).on(l.KEYDOWN_DATA_API,f,_._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,g,_._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,m,_._dataApiKeydownHandler).on(l.CLICK_DATA_API+" "+l.FOCUSIN_DATA_API,_._clearMenus).on(l.CLICK_DATA_API,f,_.prototype.toggle).on(l.CLICK_DATA_API,p,function(t){t.stopPropagation()}),e.fn[r]=_._jQueryInterface,e.fn[r].Constructor=_,e.fn[r].noConflict=function(){return e.fn[r]=a,_._jQueryInterface}}(jQuery),function(r){var o="bs.modal",s="."+o,a=r.fn.modal,l={backdrop:!0,keyboard:!0,focus:!0,show:!0},c={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},u={HIDE:"hide"+s,HIDDEN:"hidden"+s,SHOW:"show"+s,SHOWN:"shown"+s,FOCUSIN:"focusin"+s,RESIZE:"resize"+s,CLICK_DISMISS:"click.dismiss"+s,KEYDOWN_DISMISS:"keydown.dismiss"+s,MOUSEUP_DISMISS:"mouseup.dismiss"+s,MOUSEDOWN_DISMISS:"mousedown.dismiss"+s,CLICK_DATA_API:"click.bs.modal.data-api"},h="modal-scrollbar-measure",d="modal-backdrop",f="modal-open",p="fade",g="show",m={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"},v=function(){function a(e,n){t(this,a),this._config=this._getConfig(n),this._element=e,this._dialog=r(e).find(m.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return a.prototype.toggle=function(t){return this._isShown?this.hide():this.show(t)},a.prototype.show=function(t){var e=this;if(this._isTransitioning)throw new Error("Modal is transitioning");i.supportsTransitionEnd()&&r(this._element).hasClass(p)&&(this._isTransitioning=!0);var n=r.Event(u.SHOW,{relatedTarget:t});r(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),r(document.body).addClass(f),this._setEscapeEvent(),this._setResizeEvent(),r(this._element).on(u.CLICK_DISMISS,m.DATA_DISMISS,function(t){return e.hide(t)}),r(this._dialog).on(u.MOUSEDOWN_DISMISS,function(){r(e._element).one(u.MOUSEUP_DISMISS,function(t){r(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))},a.prototype.hide=function(t){var e=this;if(t&&t.preventDefault(),this._isTransitioning)throw new Error("Modal is transitioning");var n=i.supportsTransitionEnd()&&r(this._element).hasClass(p);n&&(this._isTransitioning=!0);var o=r.Event(u.HIDE);r(this._element).trigger(o),this._isShown&&!o.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),r(document).off(u.FOCUSIN),r(this._element).removeClass(g),r(this._element).off(u.CLICK_DISMISS),r(this._dialog).off(u.MOUSEDOWN_DISMISS),n?r(this._element).one(i.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal())},a.prototype.dispose=function(){r.removeData(this._element,o),r(window,document,this._element,this._backdrop).off(s),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null},a.prototype._getConfig=function(t){return t=r.extend({},l,t),i.typeCheckConfig("modal",t,c),t},a.prototype._showElement=function(t){var e=this,n=i.supportsTransitionEnd()&&r(this._element).hasClass(p);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&i.reflow(this._element),r(this._element).addClass(g),this._config.focus&&this._enforceFocus();var o=r.Event(u.SHOWN,{relatedTarget:t}),s=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,r(e._element).trigger(o)};n?r(this._dialog).one(i.TRANSITION_END,s).emulateTransitionEnd(300):s()},a.prototype._enforceFocus=function(){var t=this;r(document).off(u.FOCUSIN).on(u.FOCUSIN,function(e){document===e.target||t._element===e.target||r(t._element).has(e.target).length||t._element.focus()})},a.prototype._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?r(this._element).on(u.KEYDOWN_DISMISS,function(e){27===e.which&&t.hide()}):this._isShown||r(this._element).off(u.KEYDOWN_DISMISS)},a.prototype._setResizeEvent=function(){var t=this;this._isShown?r(window).on(u.RESIZE,function(e){return t._handleUpdate(e)}):r(window).off(u.RESIZE)},a.prototype._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._isTransitioning=!1,this._showBackdrop(function(){r(document.body).removeClass(f),t._resetAdjustments(),t._resetScrollbar(),r(t._element).trigger(u.HIDDEN)})},a.prototype._removeBackdrop=function(){this._backdrop&&(r(this._backdrop).remove(),this._backdrop=null)},a.prototype._showBackdrop=function(t){var e=this,n=r(this._element).hasClass(p)?p:"";if(this._isShown&&this._config.backdrop){var o=i.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className=d,n&&r(this._backdrop).addClass(n),r(this._backdrop).appendTo(document.body),r(this._element).on(u.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),o&&i.reflow(this._backdrop),r(this._backdrop).addClass(g),!t)return;if(!o)return void t();r(this._backdrop).one(i.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){r(this._backdrop).removeClass(g);var s=function(){e._removeBackdrop(),t&&t()};i.supportsTransitionEnd()&&r(this._element).hasClass(p)?r(this._backdrop).one(i.TRANSITION_END,s).emulateTransitionEnd(150):s()}else t&&t()},a.prototype._handleUpdate=function(){this._adjustDialog()},a.prototype._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},a.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},a.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},a.prototype._setScrollbar=function(){var t=parseInt(r(m.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=t+this._scrollbarWidth+"px")},a.prototype._resetScrollbar=function(){document.body.style.paddingRight=this._originalBodyPadding},a.prototype._getScrollbarWidth=function(){var t=document.createElement("div");t.className=h,document.body.appendChild(t);var e=t.offsetWidth-t.clientWidth;return document.body.removeChild(t),e},a._jQueryInterface=function(t,n){return this.each(function(){var i=r(this).data(o),s=r.extend({},a.Default,r(this).data(),"object"===(void 0===t?"undefined":e(t))&&t);if(i||(i=new a(this,s),r(this).data(o,i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t](n)}else s.show&&i.show(n)})},n(a,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return l}}]),a}();r(document).on(u.CLICK_DATA_API,m.DATA_TOGGLE,function(t){var e=this,n=void 0,s=i.getSelectorFromElement(this);s&&(n=r(s)[0]);var a=r(n).data(o)?"toggle":r.extend({},r(n).data(),r(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var l=r(n).one(u.SHOW,function(t){t.isDefaultPrevented()||l.one(u.HIDDEN,function(){r(e).is(":visible")&&e.focus()})});v._jQueryInterface.call(r(n),a,this)}),r.fn.modal=v._jQueryInterface,r.fn.modal.Constructor=v,r.fn.modal.noConflict=function(){return r.fn.modal=a,v._jQueryInterface}}(jQuery),function(r){var o="scrollspy",s="bs.scrollspy",a="."+s,l=r.fn[o],c={offset:10,method:"auto",target:""},u={offset:"number",method:"string",target:"(string|element)"},h={ACTIVATE:"activate"+a,SCROLL:"scroll"+a,LOAD_DATA_API:"load"+a+".data-api"},d="dropdown-item",f="active",p={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",LIST_ITEM:".list-item",LI:"li",LI_DROPDOWN:"li.dropdown",NAV_LINKS:".nav-link",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},g="offset",m="position",v=function(){function l(e,n){var i=this;t(this,l),this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+p.NAV_LINKS+","+this._config.target+" "+p.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,r(this._scrollElement).on(h.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}return l.prototype.refresh=function(){var t=this,e=this._scrollElement!==this._scrollElement.window?m:g,n="auto"===this._config.method?e:this._config.method,o=n===m?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();r.makeArray(r(this._selector)).map(function(t){var e=void 0,s=i.getSelectorFromElement(t);return s&&(e=r(s)[0]),e&&(e.offsetWidth||e.offsetHeight)?[r(e)[n]().top+o,s]:null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},l.prototype.dispose=function(){r.removeData(this._element,s),r(this._scrollElement).off(a),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},l.prototype._getConfig=function(t){if("string"!=typeof(t=r.extend({},c,t)).target){var e=r(t.target).attr("id");e||(e=i.getUID(o),r(t.target).attr("id",e)),t.target="#"+e}return i.typeCheckConfig(o,t,u),t},l.prototype._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},l.prototype._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},l.prototype._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.offsetHeight},l.prototype._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}}},l.prototype._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",");e=e.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var n=r(e.join(","));n.hasClass(d)?(n.closest(p.DROPDOWN).find(p.DROPDOWN_TOGGLE).addClass(f),n.addClass(f)):n.parents(p.LI).find("> "+p.NAV_LINKS).addClass(f),r(this._scrollElement).trigger(h.ACTIVATE,{relatedTarget:t})},l.prototype._clear=function(){r(this._selector).filter(p.ACTIVE).removeClass(f)},l._jQueryInterface=function(t){return this.each(function(){var n=r(this).data(s),i="object"===(void 0===t?"undefined":e(t))&&t;if(n||(n=new l(this,i),r(this).data(s,n)),"string"==typeof t){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return c}}]),l}();r(window).on(h.LOAD_DATA_API,function(){for(var t=r.makeArray(r(p.DATA_SPY)),e=t.length;e--;){var n=r(t[e]);v._jQueryInterface.call(n,n.data())}}),r.fn[o]=v._jQueryInterface,r.fn[o].Constructor=v,r.fn[o].noConflict=function(){return r.fn[o]=l,v._jQueryInterface}}(jQuery),function(e){var r=".bs.tab",o=e.fn.tab,s={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,CLICK_DATA_API:"click.bs.tab.data-api"},a="dropdown-menu",l="active",c="disabled",u="fade",h="show",d=".dropdown",f="ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)",p="> .nav-item .fade, > .fade",g=".active",m="> .nav-item > .active, > .active",v='[data-toggle="tab"], [data-toggle="pill"]',y=".dropdown-toggle",_="> .dropdown-menu .active",w=function(){function r(e){t(this,r),this._element=e}return r.prototype.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(l)||e(this._element).hasClass(c))){var n=void 0,r=void 0,o=e(this._element).closest(f)[0],a=i.getSelectorFromElement(this._element);o&&(r=(r=e.makeArray(e(o).find(g)))[r.length-1]);var u=e.Event(s.HIDE,{relatedTarget:this._element}),h=e.Event(s.SHOW,{relatedTarget:r});if(r&&e(r).trigger(u),e(this._element).trigger(h),!h.isDefaultPrevented()&&!u.isDefaultPrevented()){a&&(n=e(a)[0]),this._activate(this._element,o);var d=function(){var n=e.Event(s.HIDDEN,{relatedTarget:t._element}),i=e.Event(s.SHOWN,{relatedTarget:r});e(r).trigger(n),e(t._element).trigger(i)};n?this._activate(n,n.parentNode,d):d()}}},r.prototype.dispose=function(){e.removeClass(this._element,"bs.tab"),this._element=null},r.prototype._activate=function(t,n,r){var o=this,s=e(n).find(m)[0],a=r&&i.supportsTransitionEnd()&&(s&&e(s).hasClass(u)||Boolean(e(n).find(p)[0])),l=function(){return o._transitionComplete(t,s,a,r)};s&&a?e(s).one(i.TRANSITION_END,l).emulateTransitionEnd(150):l(),s&&e(s).removeClass(h)},r.prototype._transitionComplete=function(t,n,r,o){if(n){e(n).removeClass(l);var s=e(n.parentNode).find(_)[0];s&&e(s).removeClass(l),n.setAttribute("aria-expanded",!1)}if(e(t).addClass(l),t.setAttribute("aria-expanded",!0),r?(i.reflow(t),e(t).addClass(h)):e(t).removeClass(u),t.parentNode&&e(t.parentNode).hasClass(a)){var c=e(t).closest(d)[0];c&&e(c).find(y).addClass(l),t.setAttribute("aria-expanded",!0)}o&&o()},r._jQueryInterface=function(t){return this.each(function(){var n=e(this),i=n.data("bs.tab");if(i||(i=new r(this),n.data("bs.tab",i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t]()}})},n(r,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),r}();e(document).on(s.CLICK_DATA_API,v,function(t){t.preventDefault(),w._jQueryInterface.call(e(this),"show")}),e.fn.tab=w._jQueryInterface,e.fn.tab.Constructor=w,e.fn.tab.noConflict=function(){return e.fn.tab=o,w._jQueryInterface}}(jQuery),function(r){if("undefined"==typeof Tether)throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");var o="tooltip",s="bs.tooltip",a="."+s,l=r.fn[o],c={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:"0 0",constraints:[],container:!1},u={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"string",constraints:"array",container:"(string|element|boolean)"},h={TOP:"bottom center",RIGHT:"middle left",BOTTOM:"top center",LEFT:"middle right"},d="show",f="out",p={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,INSERTED:"inserted"+a,CLICK:"click"+a,FOCUSIN:"focusin"+a,FOCUSOUT:"focusout"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a},g="fade",m="show",v=".tooltip-inner",y={element:!1,enabled:!1},_="hover",w="focus",b="click",x="manual",T=function(){function l(e,n){t(this,l),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._isTransitioning=!1,this._tether=null,this.element=e,this.config=this._getConfig(n),this.tip=null,this._setListeners()}return l.prototype.enable=function(){this._isEnabled=!0},l.prototype.disable=function(){this._isEnabled=!1},l.prototype.toggleEnabled=function(){this._isEnabled=!this._isEnabled},l.prototype.toggle=function(t){if(t){var e=this.constructor.DATA_KEY,n=r(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),r(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(r(this.getTipElement()).hasClass(m))return void this._leave(null,this);this._enter(null,this)}},l.prototype.dispose=function(){clearTimeout(this._timeout),this.cleanupTether(),r.removeData(this.element,this.constructor.DATA_KEY),r(this.element).off(this.constructor.EVENT_KEY),r(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&r(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._tether=null,this.element=null,this.config=null,this.tip=null},l.prototype.show=function(){var t=this;if("none"===r(this.element).css("display"))throw new Error("Please use show on visible elements");var e=r.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){if(this._isTransitioning)throw new Error("Tooltip is transitioning");r(this.element).trigger(e);var n=r.contains(this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!n)return;var o=this.getTipElement(),s=i.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&r(o).addClass(g);var a="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,c=this._getAttachment(a),u=!1===this.config.container?document.body:r(this.config.container);r(o).data(this.constructor.DATA_KEY,this).appendTo(u),r(this.element).trigger(this.constructor.Event.INSERTED),this._tether=new Tether({attachment:c,element:o,target:this.element,classes:y,classPrefix:"bs-tether",offset:this.config.offset,constraints:this.config.constraints,addTargetClasses:!1}),i.reflow(o),this._tether.position(),r(o).addClass(m);var h=function(){var e=t._hoverState;t._hoverState=null,t._isTransitioning=!1,r(t.element).trigger(t.constructor.Event.SHOWN),e===f&&t._leave(null,t)};if(i.supportsTransitionEnd()&&r(this.tip).hasClass(g))return this._isTransitioning=!0,void r(this.tip).one(i.TRANSITION_END,h).emulateTransitionEnd(l._TRANSITION_DURATION);h()}},l.prototype.hide=function(t){var e=this,n=this.getTipElement(),o=r.Event(this.constructor.Event.HIDE);if(this._isTransitioning)throw new Error("Tooltip is transitioning");var s=function(){e._hoverState!==d&&n.parentNode&&n.parentNode.removeChild(n),e.element.removeAttribute("aria-describedby"),r(e.element).trigger(e.constructor.Event.HIDDEN),e._isTransitioning=!1,e.cleanupTether(),t&&t()};r(this.element).trigger(o),o.isDefaultPrevented()||(r(n).removeClass(m),this._activeTrigger[b]=!1,this._activeTrigger[w]=!1,this._activeTrigger[_]=!1,i.supportsTransitionEnd()&&r(this.tip).hasClass(g)?(this._isTransitioning=!0,r(n).one(i.TRANSITION_END,s).emulateTransitionEnd(150)):s(),this._hoverState="")},l.prototype.isWithContent=function(){return Boolean(this.getTitle())},l.prototype.getTipElement=function(){return this.tip=this.tip||r(this.config.template)[0]},l.prototype.setContent=function(){var t=r(this.getTipElement());this.setElementContent(t.find(v),this.getTitle()),t.removeClass(g+" "+m),this.cleanupTether()},l.prototype.setElementContent=function(t,n){var i=this.config.html;"object"===(void 0===n?"undefined":e(n))&&(n.nodeType||n.jquery)?i?r(n).parent().is(t)||t.empty().append(n):t.text(r(n).text()):t[i?"html":"text"](n)},l.prototype.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},l.prototype.cleanupTether=function(){this._tether&&this._tether.destroy()},l.prototype._getAttachment=function(t){return h[t.toUpperCase()]},l.prototype._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach(function(e){if("click"===e)r(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(e!==x){var n=e===_?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=e===_?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;r(t.element).on(n,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}r(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=r.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},l.prototype._fixTitle=function(){var t=e(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},l.prototype._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||r(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),r(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?w:_]=!0),r(e.getTipElement()).hasClass(m)||e._hoverState===d?e._hoverState=d:(clearTimeout(e._timeout),e._hoverState=d,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===d&&e.show()},e.config.delay.show):e.show())},l.prototype._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||r(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),r(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?w:_]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=f,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===f&&e.hide()},e.config.delay.hide):e.hide())},l.prototype._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},l.prototype._getConfig=function(t){return(t=r.extend({},this.constructor.Default,r(this.element).data(),t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),i.typeCheckConfig(o,t,this.constructor.DefaultType),t},l.prototype._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},l._jQueryInterface=function(t){return this.each(function(){var n=r(this).data(s),i="object"===(void 0===t?"undefined":e(t))&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new l(this,i),r(this).data(s,n)),"string"==typeof t)){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return c}},{key:"NAME",get:function(){return o}},{key:"DATA_KEY",get:function(){return s}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return a}},{key:"DefaultType",get:function(){return u}}]),l}();return r.fn[o]=T._jQueryInterface,r.fn[o].Constructor=T,r.fn[o].noConflict=function(){return r.fn[o]=l,T._jQueryInterface},T}(jQuery));!function(i){var o="popover",s="bs.popover",a="."+s,l=i.fn[o],c=i.extend({},r.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),u=i.extend({},r.DefaultType,{content:"(string|element|function)"}),h="fade",d="show",f=".popover-title",p=".popover-content",g={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,INSERTED:"inserted"+a,CLICK:"click"+a,FOCUSIN:"focusin"+a,FOCUSOUT:"focusout"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a},m=function(r){function l(){return t(this,l),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,r.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(l,r),l.prototype.isWithContent=function(){return this.getTitle()||this._getContent()},l.prototype.getTipElement=function(){return this.tip=this.tip||i(this.config.template)[0]},l.prototype.setContent=function(){var t=i(this.getTipElement());this.setElementContent(t.find(f),this.getTitle()),this.setElementContent(t.find(p),this._getContent()),t.removeClass(h+" "+d),this.cleanupTether()},l.prototype._getContent=function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)},l._jQueryInterface=function(t){return this.each(function(){var n=i(this).data(s),r="object"===(void 0===t?"undefined":e(t))?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new l(this,r),i(this).data(s,n)),"string"==typeof t)){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return c}},{key:"NAME",get:function(){return o}},{key:"DATA_KEY",get:function(){return s}},{key:"Event",get:function(){return g}},{key:"EVENT_KEY",get:function(){return a}},{key:"DefaultType",get:function(){return u}}]),l}(r);i.fn[o]=m._jQueryInterface,i.fn[o].Constructor=m,i.fn[o].noConflict=function(){return i.fn[o]=l,m._jQueryInterface}}(jQuery)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
