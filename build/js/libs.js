if(function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function n(t,e){var n=(e=e||K).createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function i(t){var e=!!t&&"length"in t&&t.length,n=at.type(t);return"function"!==n&&!at.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function o(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function r(t,e,n){return at.isFunction(e)?at.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?at.grep(t,function(t){return t===e!==n}):"string"!=typeof e?at.grep(t,function(t){return tt.call(e,t)>-1!==n}):vt.test(e)?at.filter(e,t,n):(e=at.filter(e,t),at.grep(t,function(t){return tt.call(e,t)>-1!==n&&1===t.nodeType}))}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function a(t){return t}function l(t){throw t}function h(t,e,n,i){var o;try{t&&at.isFunction(o=t.promise)?o.call(t).done(e).fail(n):t&&at.isFunction(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}function u(){K.removeEventListener("DOMContentLoaded",u),t.removeEventListener("load",u),at.ready()}function c(){this.expando=at.expando+c.uid++}function f(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Nt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Dt.test(t)?JSON.parse(t):t)}(n)}catch(t){}St.set(t,e,n)}else n=void 0;return n}function d(t,e,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return at.css(t,e,"")},l=a(),h=n&&n[3]||(at.cssNumber[e]?"":"px"),u=(at.cssNumber[e]||"px"!==h&&+l)&&It.exec(at.css(t,e));if(u&&u[3]!==h){h=h||u[3],n=n||[],u=+l||1;do{u/=r=r||".5",at.style(t,e,u+h)}while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=h,i.start=u,i.end=o)),o}function p(t){var e,n=t.ownerDocument,i=t.nodeName,o=Ht[i];return o||(e=n.body.appendChild(n.createElement(i)),o=at.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),Ht[i]=o,o)}function m(t,e){for(var n,i,o=[],r=0,s=t.length;r<s;r++)(i=t[r]).style&&(n=i.style.display,e?("none"===n&&(o[r]=At.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&Pt(i)&&(o[r]=p(i))):"none"!==n&&(o[r]="none",At.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(t[r].style.display=o[r]);return t}function g(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&o(t,e)?at.merge([t],n):n}function v(t,e){for(var n=0,i=t.length;n<i;n++)At.set(t[n],"globalEval",!e||At.get(e[n],"globalEval"))}function y(t,e,n,i,o){for(var r,s,a,l,h,u,c=e.createDocumentFragment(),f=[],d=0,p=t.length;d<p;d++)if((r=t[d])||0===r)if("object"===at.type(r))at.merge(f,r.nodeType?[r]:r);else if(qt.test(r)){for(s=s||c.appendChild(e.createElement("div")),a=(Rt.exec(r)||["",""])[1].toLowerCase(),l=Wt[a]||Wt._default,s.innerHTML=l[1]+at.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;at.merge(f,s.childNodes),(s=c.firstChild).textContent=""}else f.push(e.createTextNode(r));for(c.textContent="",d=0;r=f[d++];)if(i&&at.inArray(r,i)>-1)o&&o.push(r);else if(h=at.contains(r.ownerDocument,r),s=g(c.appendChild(r),"script"),h&&v(s),n)for(u=0;r=s[u++];)Ft.test(r.type||"")&&n.push(r);return c}function _(){return!0}function b(){return!1}function w(){try{return K.activeElement}catch(t){}}function E(t,e,n,i,o,r){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)E(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=b;else if(!o)return t;return 1===r&&(s=o,(o=function(t){return at().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=at.guid++)),t.each(function(){at.event.add(this,e,o,i,n)})}function C(t,e){return o(t,"table")&&o(11!==e.nodeType?e:e.firstChild,"tr")?at(">tbody",t)[0]||t:t}function T(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function x(t){var e=Kt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function k(t,e){var n,i,o,r,s,a,l,h;if(1===e.nodeType){if(At.hasData(t)&&(r=At.access(t),s=At.set(e,r),h=r.events)){delete s.handle,s.events={};for(o in h)for(n=0,i=h[o].length;n<i;n++)at.event.add(e,o,h[o][n])}St.hasData(t)&&(a=St.access(t),l=at.extend({},a),St.set(e,l))}}function A(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Mt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function S(t,e,i,o){e=J.apply([],e);var r,s,a,l,h,u,c=0,f=t.length,d=f-1,p=e[0],m=at.isFunction(p);if(m||f>1&&"string"==typeof p&&!st.checkClone&&Yt.test(p))return t.each(function(n){var r=t.eq(n);m&&(e[0]=p.call(this,n,r.html())),S(r,e,i,o)});if(f&&(r=y(e,t[0].ownerDocument,!1,t,o),s=r.firstChild,1===r.childNodes.length&&(r=s),s||o)){for(l=(a=at.map(g(r,"script"),T)).length;c<f;c++)h=r,c!==d&&(h=at.clone(h,!0,!0),l&&at.merge(a,g(h,"script"))),i.call(t[c],h,c);if(l)for(u=a[a.length-1].ownerDocument,at.map(a,x),c=0;c<l;c++)h=a[c],Ft.test(h.type||"")&&!At.access(h,"globalEval")&&at.contains(u,h)&&(h.src?at._evalUrl&&at._evalUrl(h.src):n(h.textContent.replace(Xt,""),u))}return t}function D(t,e,n){for(var i,o=e?at.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||at.cleanData(g(i)),i.parentNode&&(n&&at.contains(i.ownerDocument,i)&&v(g(i,"script")),i.parentNode.removeChild(i));return t}function N(t,e,n){var i,o,r,s,a=t.style;return(n=n||Zt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||at.contains(t.ownerDocument,t)||(s=at.style(t,e)),!st.pixelMarginRight()&&Jt.test(s)&&Gt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function O(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function I(t){var e=at.cssProps[t];return e||(e=at.cssProps[t]=function(t){if(t in re)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=oe.length;n--;)if((t=oe[n]+e)in re)return t}(t)||t),e}function L(t,e,n){var i=It.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function P(t,e,n,i,o){var r,s=0;for(r=n===(i?"border":"content")?4:"width"===e?1:0;r<4;r+=2)"margin"===n&&(s+=at.css(t,n+Lt[r],!0,o)),i?("content"===n&&(s-=at.css(t,"padding"+Lt[r],!0,o)),"margin"!==n&&(s-=at.css(t,"border"+Lt[r]+"Width",!0,o))):(s+=at.css(t,"padding"+Lt[r],!0,o),"padding"!==n&&(s+=at.css(t,"border"+Lt[r]+"Width",!0,o)));return s}function j(t,e,n){var i,o=Zt(t),r=N(t,e,o),s="border-box"===at.css(t,"boxSizing",!1,o);return Jt.test(r)?r:(i=s&&(st.boxSizingReliable()||r===t.style[e]),"auto"===r&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)]),(r=parseFloat(r)||0)+P(t,e,n||(s?"border":"content"),i,o)+"px")}function H(t,e,n,i,o){return new H.prototype.init(t,e,n,i,o)}function M(){ae&&(!1===K.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(M):t.setTimeout(M,at.fx.interval),at.fx.tick())}function R(){return t.setTimeout(function(){se=void 0}),se=at.now()}function F(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=Lt[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function W(t,e,n){for(var i,o=(q.tweeners[e]||[]).concat(q.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function q(t,e,n){var i,o,r=0,s=q.prefilters.length,a=at.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=se||R(),n=Math.max(0,h.startTime+h.duration-e),i=1-(n/h.duration||0),r=0,s=h.tweens.length;r<s;r++)h.tweens[r].run(i);return a.notifyWith(t,[h,i,n]),i<1&&s?n:(s||a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h]),!1)},h=a.promise({elem:t,props:at.extend({},e),opts:at.extend(!0,{specialEasing:{},easing:at.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||R(),duration:n.duration,tweens:[],createTween:function(e,n){var i=at.Tween(t,h.opts,e,n,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(i),i},stop:function(e){var n=0,i=e?h.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)h.tweens[n].run(1);return e?(a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h,e])):a.rejectWith(t,[h,e]),this}}),u=h.props;for(!function(t,e){var n,i,o,r,s;for(n in t)if(i=at.camelCase(n),o=e[i],r=t[n],Array.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=at.cssHooks[i])&&"expand"in s){r=s.expand(r),delete t[i];for(n in r)n in t||(t[n]=r[n],e[n]=o)}else e[i]=o}(u,h.opts.specialEasing);r<s;r++)if(i=q.prefilters[r].call(h,t,u,h.opts))return at.isFunction(i.stop)&&(at._queueHooks(h.elem,h.opts.queue).stop=at.proxy(i.stop,i)),i;return at.map(u,W,h),at.isFunction(h.opts.start)&&h.opts.start.call(t,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),at.fx.timer(at.extend(l,{elem:t,anim:h,queue:h.opts.queue})),h}function B(t){return(t.match(Et)||[]).join(" ")}function V(t){return t.getAttribute&&t.getAttribute("class")||""}function U(t,e,n,i){var o;if(Array.isArray(e))at.each(e,function(e,o){n||_e.test(t)?i(t,o):U(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)});else if(n||"object"!==at.type(e))i(t,e);else for(o in e)U(t+"["+o+"]",e[o],n,i)}function z(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(Et)||[];if(at.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function Q(t,e,n,i){function o(a){var l;return r[a]=!0,at.each(t[a]||[],function(t,a){var h=a(e,n,i);return"string"!=typeof h||s||r[h]?s?!(l=h):void 0:(e.dataTypes.unshift(h),o(h),!1)}),l}var r={},s=t===Ne;return o(e.dataTypes[0])||!r["*"]&&o("*")}function $(t,e){var n,i,o=at.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&at.extend(!0,t,i),t}var Y=[],K=t.document,X=Object.getPrototypeOf,G=Y.slice,J=Y.concat,Z=Y.push,tt=Y.indexOf,et={},nt=et.toString,it=et.hasOwnProperty,ot=it.toString,rt=ot.call(Object),st={},at=function(t,e){return new at.fn.init(t,e)},lt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ht=/^-ms-/,ut=/-([a-z])/g,ct=function(t,e){return e.toUpperCase()};at.fn=at.prototype={jquery:"3.2.1",constructor:at,length:0,toArray:function(){return G.call(this)},get:function(t){return null==t?G.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=at.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return at.each(this,t)},map:function(t){return this.pushStack(at.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(G.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:Z,sort:Y.sort,splice:Y.splice},at.extend=at.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,h=!1;for("boolean"==typeof s&&(h=s,s=arguments[a]||{},a++),"object"==typeof s||at.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(h&&i&&(at.isPlainObject(i)||(o=Array.isArray(i)))?(o?(o=!1,r=n&&Array.isArray(n)?n:[]):r=n&&at.isPlainObject(n)?n:{},s[e]=at.extend(h,r,i)):void 0!==i&&(s[e]=i));return s},at.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===at.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=at.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==nt.call(t))&&(!(e=X(t))||"function"==typeof(n=it.call(e,"constructor")&&e.constructor)&&ot.call(n)===rt)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?et[nt.call(t)]||"object":typeof t},globalEval:function(t){n(t)},camelCase:function(t){return t.replace(ht,"ms-").replace(ut,ct)},each:function(t,e){var n,o=0;if(i(t))for(n=t.length;o<n&&!1!==e.call(t[o],o,t[o]);o++);else for(o in t)if(!1===e.call(t[o],o,t[o]))break;return t},trim:function(t){return null==t?"":(t+"").replace(lt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?at.merge(n,"string"==typeof t?[t]:t):Z.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:tt.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!==s&&i.push(t[o]);return i},map:function(t,e,n){var o,r,s=0,a=[];if(i(t))for(o=t.length;s<o;s++)null!=(r=e(t[s],s,n))&&a.push(r);else for(s in t)null!=(r=e(t[s],s,n))&&a.push(r);return J.apply([],a)},guid:1,proxy:function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),at.isFunction(t))return i=G.call(arguments,2),o=function(){return t.apply(e||this,i.concat(G.call(arguments)))},o.guid=t.guid=t.guid||at.guid++,o},now:Date.now,support:st}),"function"==typeof Symbol&&(at.fn[Symbol.iterator]=Y[Symbol.iterator]),at.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){et["[object "+e+"]"]=e.toLowerCase()});var ft=function(t){function e(t,e,n,i){var o,r,s,a,l,h,u,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&((e?e.ownerDocument||e:F)!==O&&N(e),e=e||O,L)){if(11!==p&&(l=mt.exec(t)))if(o=l[1]){if(9===p){if(!(s=e.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(f&&(s=f.getElementById(o))&&M(e,s)&&s.id===o)return n.push(s),n}else{if(l[2])return X.apply(n,e.getElementsByTagName(t)),n;if((o=l[3])&&b.getElementsByClassName&&e.getElementsByClassName)return X.apply(n,e.getElementsByClassName(o)),n}if(b.qsa&&!U[t+" "]&&(!P||!P.test(t))){if(1!==p)f=e,u=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(_t,bt):e.setAttribute("id",a=R),r=(h=T(t)).length;r--;)h[r]="#"+a+" "+d(h[r]);u=h.join(","),f=gt.test(t)&&c(e.parentNode)||e}if(u)try{return X.apply(n,f.querySelectorAll(u)),n}catch(t){}finally{a===R&&e.removeAttribute("id")}}}return k(t.replace(rt,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>w.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[R]=!0,t}function o(t){var e=O.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function r(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function h(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Et(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return i(function(e){return e=+e,i(function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function c(t){return t&&void 0!==t.getElementsByTagName&&t}function f(){}function d(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function p(t,e,n){var i=e.dir,o=e.next,r=o||i,s=n&&"parentNode"===r,a=q++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,o);return!1}:function(e,n,l){var h,u,c,f=[W,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(c=e[R]||(e[R]={}),u=c[e.uniqueID]||(c[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[i]||e;else{if((h=u[r])&&h[0]===W&&h[1]===a)return f[2]=h[2];if(u[r]=f,f[2]=t(e,n,l))return!0}return!1}}function m(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function g(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,h=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),h&&e.push(a)));return s}function v(t,n,o,r,s,a){return r&&!r[R]&&(r=v(r)),s&&!s[R]&&(s=v(s,a)),i(function(i,a,l,h){var u,c,f,d=[],p=[],m=a.length,v=i||function(t,n,i){for(var o=0,r=n.length;o<r;o++)e(t,n[o],i);return i}(n||"*",l.nodeType?[l]:l,[]),y=!t||!i&&n?v:g(v,d,t,l,h),_=o?s||(i?t:m||r)?[]:a:y;if(o&&o(y,_,l,h),r)for(u=g(_,p),r(u,[],l,h),c=u.length;c--;)(f=u[c])&&(_[p[c]]=!(y[p[c]]=f));if(i){if(s||t){if(s){for(u=[],c=_.length;c--;)(f=_[c])&&u.push(y[c]=f);s(null,_=[],u,h)}for(c=_.length;c--;)(f=_[c])&&(u=s?J(i,f):d[c])>-1&&(i[u]=!(a[u]=f))}}else _=g(_===a?_.splice(m,_.length):_),s?s(null,a,_,h):X.apply(a,_)})}function y(t){for(var e,n,i,o=t.length,r=w.relative[t[0].type],s=r||w.relative[" "],a=r?1:0,l=p(function(t){return t===e},s,!0),h=p(function(t){return J(e,t)>-1},s,!0),u=[function(t,n,i){var o=!r&&(i||n!==A)||((e=n).nodeType?l(t,n,i):h(t,n,i));return e=null,o}];a<o;a++)if(n=w.relative[t[a].type])u=[p(m(u),n)];else{if((n=w.filter[t[a].type].apply(null,t[a].matches))[R]){for(i=++a;i<o&&!w.relative[t[i].type];i++);return v(a>1&&m(u),a>1&&d(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(rt,"$1"),n,a<i&&y(t.slice(a,i)),i<o&&y(t=t.slice(i)),i<o&&d(t))}u.push(n)}return m(u)}var _,b,w,E,C,T,x,k,A,S,D,N,O,I,L,P,j,H,M,R="sizzle"+1*new Date,F=t.document,W=0,q=0,B=n(),V=n(),U=n(),z=function(t,e){return t===e&&(D=!0),0},Q={}.hasOwnProperty,$=[],Y=$.pop,K=$.push,X=$.push,G=$.slice,J=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",it=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",ot=new RegExp(tt+"+","g"),rt=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),st=new RegExp("^"+tt+"*,"+tt+"*"),at=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ht=new RegExp(it),ut=new RegExp("^"+et+"$"),ct={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+it),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,dt=/^h\d$/i,pt=/^[^{]+\{\s*\[native \w/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,gt=/[+~]/,vt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},_t=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},wt=function(){N()},Et=p(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{X.apply($=G.call(F.childNodes),F.childNodes),$[F.childNodes.length].nodeType}catch(t){X={apply:$.length?function(t,e){K.apply(t,G.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}b=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},N=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:F;return i!==O&&9===i.nodeType&&i.documentElement?(O=i,I=O.documentElement,L=!C(O),F!==O&&(n=O.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",wt,!1):n.attachEvent&&n.attachEvent("onunload",wt)),b.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=o(function(t){return t.appendChild(O.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=pt.test(O.getElementsByClassName),b.getById=o(function(t){return I.appendChild(t).id=R,!O.getElementsByName||!O.getElementsByName(R).length}),b.getById?(w.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&L){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&L){var n,i,o,r=e.getElementById(t);if(r){if((n=r.getAttributeNode("id"))&&n.value===t)return[r];for(o=e.getElementsByName(t),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===t)return[r]}return[]}}),w.find.TAG=b.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},w.find.CLASS=b.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&L)return e.getElementsByClassName(t)},j=[],P=[],(b.qsa=pt.test(O.querySelectorAll))&&(o(function(t){I.appendChild(t).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||P.push("\\["+tt+"*(?:value|"+Z+")"),t.querySelectorAll("[id~="+R+"-]").length||P.push("~="),t.querySelectorAll(":checked").length||P.push(":checked"),t.querySelectorAll("a#"+R+"+*").length||P.push(".#.+[+~]")}),o(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=O.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&P.push("name"+tt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),I.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),P.push(",.*:")})),(b.matchesSelector=pt.test(H=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&o(function(t){b.disconnectedMatch=H.call(t,"*"),H.call(t,"[s!='']:x"),j.push("!=",it)}),P=P.length&&new RegExp(P.join("|")),j=j.length&&new RegExp(j.join("|")),e=pt.test(I.compareDocumentPosition),M=e||pt.test(I.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},z=e?function(t,e){if(t===e)return D=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===O||t.ownerDocument===F&&M(F,t)?-1:e===O||e.ownerDocument===F&&M(F,e)?1:S?J(S,t)-J(S,e):0:4&n?-1:1)}:function(t,e){if(t===e)return D=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,a=[t],l=[e];if(!o||!r)return t===O?-1:e===O?1:o?-1:r?1:S?J(S,t)-J(S,e):0;if(o===r)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===F?-1:l[i]===F?1:0},O):O},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==O&&N(t),n=n.replace(lt,"='$1']"),b.matchesSelector&&L&&!U[n+" "]&&(!j||!j.test(n))&&(!P||!P.test(n)))try{var i=H.call(t,n);if(i||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,O,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==O&&N(t),M(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==O&&N(t);var n=w.attrHandle[e.toLowerCase()],i=n&&Q.call(w.attrHandle,e.toLowerCase())?n(t,e,!L):void 0;return void 0!==i?i:b.attributes||!L?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.escape=function(t){return(t+"").replace(_t,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,o=0;if(D=!b.detectDuplicates,S=!b.sortStable&&t.slice(0),t.sort(z),D){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return S=null,t},E=e.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=E(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=E(e);return n},(w=e.selectors={cacheLength:50,createPseudo:i,match:ct,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(vt,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(vt,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ct.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=T(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(vt,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=B[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&B(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(o){var r=e.attr(o,t);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(ot," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var h,u,c,f,d,p,m=r!==s?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,_=!1;if(g){if(r){for(;m;){for(f=e;f=f[m];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=m="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?g.firstChild:g.lastChild],s&&y){for(_=(d=(h=(u=(c=(f=g)[R]||(f[R]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]||[])[0]===W&&h[1])&&h[2],f=d&&g.childNodes[d];f=++d&&f&&f[m]||(_=d=0)||p.pop();)if(1===f.nodeType&&++_&&f===e){u[t]=[W,d,_];break}}else if(y&&(_=d=(h=(u=(c=(f=e)[R]||(f[R]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]||[])[0]===W&&h[1]),!1===_)for(;(f=++d&&f&&f[m]||(_=d=0)||p.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++_||(y&&((u=(c=f[R]||(f[R]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]=[W,_]),f!==e)););return(_-=o)===i||_%i==0&&_/i>=0}}},PSEUDO:function(t,n){var o,r=w.pseudos[t]||w.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return r[R]?r(n):r.length>1?(o=[t,t,"",n],w.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,o=r(t,n),s=o.length;s--;)t[i=J(t,o[s])]=!(e[i]=o[s])}):function(t){return r(t,0,o)}):r}},pseudos:{not:i(function(t){var e=[],n=[],o=x(t.replace(rt,"$1"));return o[R]?i(function(t,e,n,i){for(var r,s=o(t,null,i,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))}):function(t,i,r){return e[0]=t,o(e,null,r,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(vt,yt),function(e){return(e.textContent||e.innerText||E(e)).indexOf(t)>-1}}),lang:i(function(t){return ut.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(vt,yt).toLowerCase(),function(e){var n;do{if(n=L?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===I},focus:function(t){return t===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:h(!1),disabled:h(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return dt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[n<0?n+e:n]}),even:u(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq;for(_ in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[_]=a(_);for(_ in{submit:!0,reset:!0})w.pseudos[_]=l(_);return f.prototype=w.filters=w.pseudos,w.setFilters=new f,T=e.tokenize=function(t,n){var i,o,r,s,a,l,h,u=V[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],h=w.preFilter;a;){i&&!(o=st.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=at.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(rt," ")}),a=a.slice(i.length));for(s in w.filter)!(o=ct[s].exec(a))||h[s]&&!(o=h[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):V(t,l).slice(0)},x=e.compile=function(t,n){var o,r=[],s=[],a=U[t+" "];if(!a){for(n||(n=T(t)),o=n.length;o--;)(a=y(n[o]))[R]?r.push(a):s.push(a);(a=U(t,function(t,n){var o=n.length>0,r=t.length>0,s=function(i,s,a,l,h){var u,c,f,d=0,p="0",m=i&&[],v=[],y=A,_=i||r&&w.find.TAG("*",h),b=W+=null==y?1:Math.random()||.1,E=_.length;for(h&&(A=s===O||s||h);p!==E&&null!=(u=_[p]);p++){if(r&&u){for(c=0,s||u.ownerDocument===O||(N(u),a=!L);f=t[c++];)if(f(u,s||O,a)){l.push(u);break}h&&(W=b)}o&&((u=!f&&u)&&d--,i&&m.push(u))}if(d+=p,o&&p!==d){for(c=0;f=n[c++];)f(m,v,s,a);if(i){if(d>0)for(;p--;)m[p]||v[p]||(v[p]=Y.call(l));v=g(v)}X.apply(l,v),h&&!i&&v.length>0&&d+n.length>1&&e.uniqueSort(l)}return h&&(W=b,A=y),m};return o?i(s):s}(s,r))).selector=t}return a},k=e.select=function(t,e,n,i){var o,r,s,a,l,h="function"==typeof t&&t,u=!i&&T(t=h.selector||t);if(n=n||[],1===u.length){if((r=u[0]=u[0].slice(0)).length>2&&"ID"===(s=r[0]).type&&9===e.nodeType&&L&&w.relative[r[1].type]){if(!(e=(w.find.ID(s.matches[0].replace(vt,yt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=ct.needsContext.test(t)?0:r.length;o--&&(s=r[o],!w.relative[a=s.type]);)if((l=w.find[a])&&(i=l(s.matches[0].replace(vt,yt),gt.test(r[0].type)&&c(e.parentNode)||e))){if(r.splice(o,1),!(t=i.length&&d(r)))return X.apply(n,i),n;break}}return(h||x(t,u))(i,e,!L,n,!e||gt.test(t)&&c(e.parentNode)||e),n},b.sortStable=R.split("").sort(z).join("")===R,b.detectDuplicates=!!D,N(),b.sortDetached=o(function(t){return 1&t.compareDocumentPosition(O.createElement("fieldset"))}),o(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||r("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&o(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||r("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),o(function(t){return null==t.getAttribute("disabled")})||r(Z,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);at.find=ft,at.expr=ft.selectors,at.expr[":"]=at.expr.pseudos,at.uniqueSort=at.unique=ft.uniqueSort,at.text=ft.getText,at.isXMLDoc=ft.isXML,at.contains=ft.contains,at.escapeSelector=ft.escape;var dt=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&at(t).is(n))break;i.push(t)}return i},pt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},mt=at.expr.match.needsContext,gt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,vt=/^.[^:#\[\.,]*$/;at.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?at.find.matchesSelector(i,t)?[i]:[]:at.find.matches(t,at.grep(e,function(t){return 1===t.nodeType}))},at.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(at(t).filter(function(){for(e=0;e<i;e++)if(at.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)at.find(t,o[e],n);return i>1?at.uniqueSort(n):n},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&mt.test(t)?at(t):t||[],!1).length}});var yt,_t=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(at.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||yt,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:_t.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof at?e[0]:e,at.merge(this,at.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:K,!0)),gt.test(i[1])&&at.isPlainObject(e))for(i in e)at.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=K.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):at.isFunction(t)?void 0!==n.ready?n.ready(t):t(at):at.makeArray(t,this)}).prototype=at.fn,yt=at(K);var bt=/^(?:parents|prev(?:Until|All))/,wt={children:!0,contents:!0,next:!0,prev:!0};at.fn.extend({has:function(t){var e=at(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(at.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,r=[],s="string"!=typeof t&&at(t);if(!mt.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&at.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?at.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?tt.call(at(t),this[0]):tt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(at.uniqueSort(at.merge(this.get(),at(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),at.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return dt(t,"parentNode")},parentsUntil:function(t,e,n){return dt(t,"parentNode",n)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return dt(t,"nextSibling")},prevAll:function(t){return dt(t,"previousSibling")},nextUntil:function(t,e,n){return dt(t,"nextSibling",n)},prevUntil:function(t,e,n){return dt(t,"previousSibling",n)},siblings:function(t){return pt((t.parentNode||{}).firstChild,t)},children:function(t){return pt(t.firstChild)},contents:function(t){return o(t,"iframe")?t.contentDocument:(o(t,"template")&&(t=t.content||t),at.merge([],t.childNodes))}},function(t,e){at.fn[t]=function(n,i){var o=at.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=at.filter(i,o)),this.length>1&&(wt[t]||at.uniqueSort(o),bt.test(t)&&o.reverse()),this.pushStack(o)}});var Et=/[^\x20\t\r\n\f]+/g;at.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return at.each(t.match(Et)||[],function(t,n){e[n]=!0}),e}(t):at.extend({},t);var e,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},h={add:function(){return r&&(n&&!e&&(a=r.length-1,s.push(n)),function e(n){at.each(n,function(n,i){at.isFunction(i)?t.unique&&h.has(i)||r.push(i):i&&i.length&&"string"!==at.type(i)&&e(i)})}(arguments),n&&!e&&l()),this},remove:function(){return at.each(arguments,function(t,e){for(var n;(n=at.inArray(e,r,n))>-1;)r.splice(n,1),n<=a&&a--}),this},has:function(t){return t?at.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||e||(r=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!i}};return h},at.extend({Deferred:function(e){var n=[["notify","progress",at.Callbacks("memory"),at.Callbacks("memory"),2],["resolve","done",at.Callbacks("once memory"),at.Callbacks("once memory"),0,"resolved"],["reject","fail",at.Callbacks("once memory"),at.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return at.Deferred(function(e){at.each(n,function(n,i){var o=at.isFunction(t[i[4]])&&t[i[4]];r[i[1]](function(){var t=o&&o.apply(this,arguments);t&&at.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[i[0]+"With"](this,o?[t]:arguments)})}),t=null}).promise()},then:function(e,i,o){function r(e,n,i,o){return function(){var h=this,u=arguments,c=function(){var t,c;if(!(e<s)){if((t=i.apply(h,u))===n.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,at.isFunction(c)?o?c.call(t,r(s,n,a,o),r(s,n,l,o)):(s++,c.call(t,r(s,n,a,o),r(s,n,l,o),r(s,n,a,n.notifyWith))):(i!==a&&(h=void 0,u=[t]),(o||n.resolveWith)(h,u))}},f=o?c:function(){try{c()}catch(t){at.Deferred.exceptionHook&&at.Deferred.exceptionHook(t,f.stackTrace),e+1>=s&&(i!==l&&(h=void 0,u=[t]),n.rejectWith(h,u))}};e?f():(at.Deferred.getStackHook&&(f.stackTrace=at.Deferred.getStackHook()),t.setTimeout(f))}}var s=0;return at.Deferred(function(t){n[0][3].add(r(0,t,at.isFunction(o)?o:a,t.notifyWith)),n[1][3].add(r(0,t,at.isFunction(e)?e:a)),n[2][3].add(r(0,t,at.isFunction(i)?i:l))}).promise()},promise:function(t){return null!=t?at.extend(t,o):o}},r={};return at.each(n,function(t,e){var s=e[2],a=e[5];o[e[1]]=s.add,a&&s.add(function(){i=a},n[3-t][2].disable,n[0][2].lock),s.add(e[3].fire),r[e[0]]=function(){return r[e[0]+"With"](this===r?void 0:this,arguments),this},r[e[0]+"With"]=s.fireWith}),o.promise(r),e&&e.call(r,r),r},when:function(t){var e=arguments.length,n=e,i=Array(n),o=G.call(arguments),r=at.Deferred(),s=function(t){return function(n){i[t]=this,o[t]=arguments.length>1?G.call(arguments):n,--e||r.resolveWith(i,o)}};if(e<=1&&(h(t,r.done(s(n)).resolve,r.reject,!e),"pending"===r.state()||at.isFunction(o[n]&&o[n].then)))return r.then();for(;n--;)h(o[n],s(n),r.reject);return r.promise()}});var Ct=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;at.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Ct.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},at.readyException=function(e){t.setTimeout(function(){throw e})};var Tt=at.Deferred();at.fn.ready=function(t){return Tt.then(t).catch(function(t){at.readyException(t)}),this},at.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--at.readyWait:at.isReady)||(at.isReady=!0,!0!==t&&--at.readyWait>0||Tt.resolveWith(K,[at]))}}),at.ready.then=Tt.then,"complete"===K.readyState||"loading"!==K.readyState&&!K.documentElement.doScroll?t.setTimeout(at.ready):(K.addEventListener("DOMContentLoaded",u),t.addEventListener("load",u));var xt=function(t,e,n,i,o,r,s){var a=0,l=t.length,h=null==n;if("object"===at.type(n)){o=!0;for(a in n)xt(t,e,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,at.isFunction(i)||(s=!0),h&&(s?(e.call(t,i),e=null):(h=e,e=function(t,e,n){return h.call(at(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:h?e.call(t):l?e(t[0],n):r},kt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};c.uid=1,c.prototype={cache:function(t){var e=t[this.expando];return e||(e={},kt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[at.camelCase(e)]=n;else for(i in e)o[at.camelCase(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][at.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(at.camelCase):(e=at.camelCase(e))in i?[e]:e.match(Et)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||at.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!at.isEmptyObject(e)}};var At=new c,St=new c,Dt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Nt=/[A-Z]/g;at.extend({hasData:function(t){return St.hasData(t)||At.hasData(t)},data:function(t,e,n){return St.access(t,e,n)},removeData:function(t,e){St.remove(t,e)},_data:function(t,e,n){return At.access(t,e,n)},_removeData:function(t,e){At.remove(t,e)}}),at.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=St.get(r),1===r.nodeType&&!At.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=at.camelCase(i.slice(5)),f(r,i,o[i]));At.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){St.set(this,t)}):xt(this,function(e){var n;if(r&&void 0===e){if(void 0!==(n=St.get(r,t)))return n;if(void 0!==(n=f(r,t)))return n}else this.each(function(){St.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){St.remove(this,t)})}}),at.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=At.get(t,e),n&&(!i||Array.isArray(n)?i=At.access(t,e,at.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=at.queue(t,e),i=n.length,o=n.shift(),r=at._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){at.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return At.get(t,n)||At.access(t,n,{empty:at.Callbacks("once memory").add(function(){At.remove(t,[e+"queue",n])})})}}),at.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?at.queue(this[0],t):void 0===e?this:this.each(function(){var n=at.queue(this,t,e);at._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&at.dequeue(this,t)})},dequeue:function(t){return this.each(function(){at.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=at.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=At.get(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var Ot=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,It=new RegExp("^(?:([+-])=|)("+Ot+")([a-z%]*)$","i"),Lt=["Top","Right","Bottom","Left"],Pt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at.contains(t.ownerDocument,t)&&"none"===at.css(t,"display")},jt=function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];o=n.apply(t,i||[]);for(r in e)t.style[r]=s[r];return o},Ht={};at.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Pt(this)?at(this).show():at(this).hide()})}});var Mt=/^(?:checkbox|radio)$/i,Rt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ft=/^$|\/(?:java|ecma)script/i,Wt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Wt.optgroup=Wt.option,Wt.tbody=Wt.tfoot=Wt.colgroup=Wt.caption=Wt.thead,Wt.th=Wt.td;var qt=/<|&#?\w+;/;!function(){var t=K.createDocumentFragment().appendChild(K.createElement("div")),e=K.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),st.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",st.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Bt=K.documentElement,Vt=/^key/,Ut=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,zt=/^([^.]*)(?:\.(.+)|)/;at.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,h,u,c,f,d,p,m,g=At.get(t);if(g)for(n.handler&&(n=(r=n).handler,o=r.selector),o&&at.find.matchesSelector(Bt,o),n.guid||(n.guid=at.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(e){return void 0!==at&&at.event.triggered!==e.type?at.event.dispatch.apply(t,arguments):void 0}),h=(e=(e||"").match(Et)||[""]).length;h--;)d=m=(a=zt.exec(e[h])||[])[1],p=(a[2]||"").split(".").sort(),d&&(c=at.event.special[d]||{},d=(o?c.delegateType:c.bindType)||d,c=at.event.special[d]||{},u=at.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&at.expr.match.needsContext.test(o),namespace:p.join(".")},r),(f=l[d])||((f=l[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(d,s)),c.add&&(c.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),at.event.global[d]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,h,u,c,f,d,p,m,g=At.hasData(t)&&At.get(t);if(g&&(l=g.events)){for(h=(e=(e||"").match(Et)||[""]).length;h--;)if(a=zt.exec(e[h])||[],d=m=a[1],p=(a[2]||"").split(".").sort(),d){for(c=at.event.special[d]||{},f=l[d=(i?c.delegateType:c.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=f.length;r--;)u=f[r],!o&&m!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(r,1),u.selector&&f.delegateCount--,c.remove&&c.remove.call(t,u));s&&!f.length&&(c.teardown&&!1!==c.teardown.call(t,p,g.handle)||at.removeEvent(t,d,g.handle),delete l[d])}else for(d in l)at.event.remove(t,d+e[h],n,i,!0);at.isEmptyObject(l)&&At.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,r,s,a=at.event.fix(t),l=new Array(arguments.length),h=(At.get(this,"events")||{})[a.type]||[],u=at.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=at.event.handlers.call(this,a,h),e=0;(o=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(i=((at.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,h=t.target;if(l&&h.nodeType&&!("click"===t.type&&t.button>=1))for(;h!==this;h=h.parentNode||this)if(1===h.nodeType&&("click"!==t.type||!0!==h.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=e[n]).selector+" "]&&(s[o]=i.needsContext?at(o,this).index(h)>-1:at.find(o,this,null,[h]).length),s[o]&&r.push(i);r.length&&a.push({elem:h,handlers:r})}return h=this,l<e.length&&a.push({elem:h,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(at.Event.prototype,t,{enumerable:!0,configurable:!0,get:at.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[at.expando]?t:new at.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==w()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===w()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&o(this,"input"))return this.click(),!1},_default:function(t){return o(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},at.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},at.Event=function(t,e){if(!(this instanceof at.Event))return new at.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?_:b,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&at.extend(this,e),this.timeStamp=t&&t.timeStamp||at.now(),this[at.expando]=!0},at.Event.prototype={constructor:at.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=_,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=_,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=_,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},at.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Vt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Ut.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},at.event.addProp),at.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){at.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,o=t.handleObj;return i&&(i===this||at.contains(this,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),at.fn.extend({on:function(t,e,n,i){return E(this,t,e,n,i)},one:function(t,e,n,i){return E(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,at(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=b),this.each(function(){at.event.remove(this,t,n,e)})}});var Qt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,$t=/<script|<style|<link/i,Yt=/checked\s*(?:[^=]|=\s*.checked.)/i,Kt=/^true\/(.*)/,Xt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;at.extend({htmlPrefilter:function(t){return t.replace(Qt,"<$1></$2>")},clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(!0),l=at.contains(t.ownerDocument,t);if(!(st.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||at.isXMLDoc(t)))for(s=g(a),i=0,o=(r=g(t)).length;i<o;i++)A(r[i],s[i]);if(e)if(n)for(r=r||g(t),s=s||g(a),i=0,o=r.length;i<o;i++)k(r[i],s[i]);else k(t,a);return(s=g(a,"script")).length>0&&v(s,!l&&g(t,"script")),a},cleanData:function(t){for(var e,n,i,o=at.event.special,r=0;void 0!==(n=t[r]);r++)if(kt(n)){if(e=n[At.expando]){if(e.events)for(i in e.events)o[i]?at.event.remove(n,i):at.removeEvent(n,i,e.handle);n[At.expando]=void 0}n[St.expando]&&(n[St.expando]=void 0)}}}),at.fn.extend({detach:function(t){return D(this,t,!0)},remove:function(t){return D(this,t)},text:function(t){return xt(this,function(t){return void 0===t?at.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return S(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){C(this,t).appendChild(t)}})},prepend:function(){return S(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return S(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return S(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(at.cleanData(g(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return at.clone(this,t,e)})},html:function(t){return xt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!$t.test(t)&&!Wt[(Rt.exec(t)||["",""])[1].toLowerCase()]){t=at.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(at.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return S(this,arguments,function(e){var n=this.parentNode;at.inArray(this,t)<0&&(at.cleanData(g(this)),n&&n.replaceChild(e,this))},t)}}),at.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){at.fn[t]=function(t){for(var n,i=[],o=at(t),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),at(o[s])[e](n),Z.apply(i,n.get());return this.pushStack(i)}});var Gt=/^margin/,Jt=new RegExp("^("+Ot+")(?!px)[a-z%]+$","i"),Zt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Bt.appendChild(s);var e=t.getComputedStyle(a);n="1%"!==e.top,r="2px"===e.marginLeft,i="4px"===e.width,a.style.marginRight="50%",o="4px"===e.marginRight,Bt.removeChild(s),a=null}}var n,i,o,r,s=K.createElement("div"),a=K.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",st.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),at.extend(st,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return e(),i},pixelMarginRight:function(){return e(),o},reliableMarginLeft:function(){return e(),r}}))}();var te=/^(none|table(?!-c[ea]).+)/,ee=/^--/,ne={position:"absolute",visibility:"hidden",display:"block"},ie={letterSpacing:"0",fontWeight:"400"},oe=["Webkit","Moz","ms"],re=K.createElement("div").style;at.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=N(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=at.camelCase(e),l=ee.test(e),h=t.style;if(l||(e=I(a)),s=at.cssHooks[e]||at.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:h[e];"string"==(r=typeof n)&&(o=It.exec(n))&&o[1]&&(n=d(t,e,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(at.cssNumber[a]?"":"px")),st.clearCloneStyle||""!==n||0!==e.indexOf("background")||(h[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?h.setProperty(e,n):h[e]=n))}},css:function(t,e,n,i){var o,r,s,a=at.camelCase(e);return ee.test(e)||(e=I(a)),(s=at.cssHooks[e]||at.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=N(t,e,i)),"normal"===o&&e in ie&&(o=ie[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),at.each(["height","width"],function(t,e){at.cssHooks[e]={get:function(t,n,i){if(n)return!te.test(at.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?j(t,e,i):jt(t,ne,function(){return j(t,e,i)})},set:function(t,n,i){var o,r=i&&Zt(t),s=i&&P(t,e,i,"border-box"===at.css(t,"boxSizing",!1,r),r);return s&&(o=It.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=at.css(t,e)),L(0,n,s)}}}),at.cssHooks.marginLeft=O(st.reliableMarginLeft,function(t,e){if(e)return(parseFloat(N(t,"marginLeft"))||t.getBoundingClientRect().left-jt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),at.each({margin:"",padding:"",border:"Width"},function(t,e){at.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+Lt[i]+e]=r[i]||r[i-2]||r[0];return o}},Gt.test(t)||(at.cssHooks[t+e].set=L)}),at.fn.extend({css:function(t,e){return xt(this,function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){for(i=Zt(t),o=e.length;s<o;s++)r[e[s]]=at.css(t,e[s],!1,i);return r}return void 0!==n?at.style(t,e,n):at.css(t,e)},t,e,arguments.length>1)}}),at.Tween=H,(H.prototype={constructor:H,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||at.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(at.cssNumber[n]?"":"px")},cur:function(){var t=H.propHooks[this.prop];return t&&t.get?t.get(this):H.propHooks._default.get(this)},run:function(t){var e,n=H.propHooks[this.prop];return this.options.duration?this.pos=e=at.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}}).init.prototype=H.prototype,(H.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=at.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){at.fx.step[t.prop]?at.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[at.cssProps[t.prop]]&&!at.cssHooks[t.prop]?t.elem[t.prop]=t.now:at.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=H.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},at.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},at.fx=H.prototype.init,at.fx.step={};var se,ae,le=/^(?:toggle|show|hide)$/,he=/queueHooks$/;at.Animation=at.extend(q,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return d(n.elem,t,It.exec(e),n),n}]},tweener:function(t,e){at.isFunction(t)?(e=t,t=["*"]):t=t.match(Et);for(var n,i=0,o=t.length;i<o;i++)n=t[i],q.tweeners[n]=q.tweeners[n]||[],q.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,h,u,c="width"in e||"height"in e,f=this,d={},p=t.style,g=t.nodeType&&Pt(t),v=At.get(t,"fxshow");n.queue||(null==(s=at._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,at.queue(t,"fx").length||s.empty.fire()})}));for(i in e)if(o=e[i],le.test(o)){if(delete e[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!v||void 0===v[i])continue;g=!0}d[i]=v&&v[i]||at.style(t,i)}if((l=!at.isEmptyObject(e))||!at.isEmptyObject(d)){c&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(h=v&&v.display)&&(h=At.get(t,"display")),"none"===(u=at.css(t,"display"))&&(h?u=h:(m([t],!0),h=t.style.display||h,u=at.css(t,"display"),m([t]))),("inline"===u||"inline-block"===u&&null!=h)&&"none"===at.css(t,"float")&&(l||(f.done(function(){p.display=h}),null==h&&(u=p.display,h="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1;for(i in d)l||(v?"hidden"in v&&(g=v.hidden):v=At.access(t,"fxshow",{display:h}),r&&(v.hidden=!g),g&&m([t],!0),f.done(function(){g||m([t]),At.remove(t,"fxshow");for(i in d)at.style(t,i,d[i])})),l=W(g?v[i]:0,i,f),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(t,e){e?q.prefilters.unshift(t):q.prefilters.push(t)}}),at.speed=function(t,e,n){var i=t&&"object"==typeof t?at.extend({},t):{complete:n||!n&&e||at.isFunction(t)&&t,duration:t,easing:n&&e||e&&!at.isFunction(e)&&e};return at.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in at.fx.speeds?i.duration=at.fx.speeds[i.duration]:i.duration=at.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){at.isFunction(i.old)&&i.old.call(this),i.queue&&at.dequeue(this,i.queue)},i},at.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Pt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=at.isEmptyObject(t),r=at.speed(e,n,i),s=function(){var e=q(this,at.extend({},t),r);(o||At.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=at.timers,s=At.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&he.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||at.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=At.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=at.timers,s=i?i.length:0;for(n.finish=!0,at.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),at.each(["toggle","show","hide"],function(t,e){var n=at.fn[e];at.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(F(e,!0),t,i,o)}}),at.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){at.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),at.timers=[],at.fx.tick=function(){var t,e=0,n=at.timers;for(se=at.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||at.fx.stop(),se=void 0},at.fx.timer=function(t){at.timers.push(t),at.fx.start()},at.fx.interval=13,at.fx.start=function(){ae||(ae=!0,M())},at.fx.stop=function(){ae=null},at.fx.speeds={slow:600,fast:200,_default:400},at.fn.delay=function(e,n){return e=at.fx?at.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})},function(){var t=K.createElement("input"),e=K.createElement("select").appendChild(K.createElement("option"));t.type="checkbox",st.checkOn=""!==t.value,st.optSelected=e.selected,(t=K.createElement("input")).value="t",t.type="radio",st.radioValue="t"===t.value}();var ue,ce=at.expr.attrHandle;at.fn.extend({attr:function(t,e){return xt(this,at.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){at.removeAttr(this,t)})}}),at.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?at.prop(t,e,n):(1===r&&at.isXMLDoc(t)||(o=at.attrHooks[e.toLowerCase()]||(at.expr.match.bool.test(e)?ue:void 0)),void 0!==n?null===n?void at.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=at.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!st.radioValue&&"radio"===e&&o(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(Et);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),ue={set:function(t,e,n){return!1===e?at.removeAttr(t,n):t.setAttribute(n,n),n}},at.each(at.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ce[e]||at.find.attr;ce[e]=function(t,e,i){var o,r,s=e.toLowerCase();return i||(r=ce[s],ce[s]=o,o=null!=n(t,e,i)?s:null,ce[s]=r),o}});var fe=/^(?:input|select|textarea|button)$/i,de=/^(?:a|area)$/i;at.fn.extend({prop:function(t,e){return xt(this,at.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[at.propFix[t]||t]})}}),at.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&at.isXMLDoc(t)||(e=at.propFix[e]||e,o=at.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=at.find.attr(t,"tabindex");return e?parseInt(e,10):fe.test(t.nodeName)||de.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),st.optSelected||(at.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),at.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){at.propFix[this.toLowerCase()]=this}),at.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).addClass(t.call(this,e,V(this)))});if("string"==typeof t&&t)for(e=t.match(Et)||[];n=this[l++];)if(o=V(n),i=1===n.nodeType&&" "+B(o)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=B(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).removeClass(t.call(this,e,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(Et)||[];n=this[l++];)if(o=V(n),i=1===n.nodeType&&" "+B(o)+" "){for(s=0;r=e[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=B(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):at.isFunction(t)?this.each(function(n){at(this).toggleClass(t.call(this,n,V(this),e),e)}):this.each(function(){var e,i,o,r;if("string"===n)for(i=0,o=at(this),r=t.match(Et)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=V(this))&&At.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":At.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+B(V(n))+" ").indexOf(e)>-1)return!0;return!1}});var pe=/\r/g;at.fn.extend({val:function(t){var e,n,i,o=this[0];{if(arguments.length)return i=at.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,at(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=at.map(o,function(t){return null==t?"":t+""})),(e=at.valHooks[this.type]||at.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return(e=at.valHooks[o.type]||at.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(pe,""):null==n?"":n}}}),at.extend({valHooks:{option:{get:function(t){var e=at.find.attr(t,"value");return null!=e?e:B(at.text(t))}},select:{get:function(t){var e,n,i,r=t.options,s=t.selectedIndex,a="select-one"===t.type,l=a?null:[],h=a?s+1:r.length;for(i=s<0?h:a?s:0;i<h;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!o(n.parentNode,"optgroup"))){if(e=at(n).val(),a)return e;l.push(e)}return l},set:function(t,e){for(var n,i,o=t.options,r=at.makeArray(e),s=o.length;s--;)((i=o[s]).selected=at.inArray(at.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),at.each(["radio","checkbox"],function(){at.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=at.inArray(at(t).val(),e)>-1}},st.checkOn||(at.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var me=/^(?:focusinfocus|focusoutblur)$/;at.extend(at.event,{trigger:function(e,n,i,o){var r,s,a,l,h,u,c,f=[i||K],d=it.call(e,"type")?e.type:e,p=it.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||K,3!==i.nodeType&&8!==i.nodeType&&!me.test(d+at.event.triggered)&&(d.indexOf(".")>-1&&(d=(p=d.split(".")).shift(),p.sort()),h=d.indexOf(":")<0&&"on"+d,e=e[at.expando]?e:new at.Event(d,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:at.makeArray(n,[e]),c=at.event.special[d]||{},o||!c.trigger||!1!==c.trigger.apply(i,n))){if(!o&&!c.noBubble&&!at.isWindow(i)){for(l=c.delegateType||d,me.test(l+d)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(i.ownerDocument||K)&&f.push(a.defaultView||a.parentWindow||t)}for(r=0;(s=f[r++])&&!e.isPropagationStopped();)e.type=r>1?l:c.bindType||d,(u=(At.get(s,"events")||{})[e.type]&&At.get(s,"handle"))&&u.apply(s,n),(u=h&&s[h])&&u.apply&&kt(s)&&(e.result=u.apply(s,n),!1===e.result&&e.preventDefault());return e.type=d,o||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),n)||!kt(i)||h&&at.isFunction(i[d])&&!at.isWindow(i)&&((a=i[h])&&(i[h]=null),at.event.triggered=d,i[d](),at.event.triggered=void 0,a&&(i[h]=a)),e.result}},simulate:function(t,e,n){var i=at.extend(new at.Event,n,{type:t,isSimulated:!0});at.event.trigger(i,null,e)}}),at.fn.extend({trigger:function(t,e){return this.each(function(){at.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return at.event.trigger(t,e,n,!0)}}),at.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){at.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),at.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),st.focusin="onfocusin"in t,st.focusin||at.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){at.event.simulate(e,t.target,at.event.fix(t))};at.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=At.access(i,e);o||i.addEventListener(t,n,!0),At.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=At.access(i,e)-1;o?At.access(i,e,o):(i.removeEventListener(t,n,!0),At.remove(i,e))}}});var ge=t.location,ve=at.now(),ye=/\?/;at.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||at.error("Invalid XML: "+e),n};var _e=/\[\]$/,be=/\r?\n/g,we=/^(?:submit|button|image|reset|file)$/i,Ee=/^(?:input|select|textarea|keygen)/i;at.param=function(t,e){var n,i=[],o=function(t,e){var n=at.isFunction(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!at.isPlainObject(t))at.each(t,function(){o(this.name,this.value)});else for(n in t)U(n,t[n],e,o);return i.join("&")},at.fn.extend({serialize:function(){return at.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=at.prop(this,"elements");return t?at.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!at(this).is(":disabled")&&Ee.test(this.nodeName)&&!we.test(t)&&(this.checked||!Mt.test(t))}).map(function(t,e){var n=at(this).val();return null==n?null:Array.isArray(n)?at.map(n,function(t){return{name:e.name,value:t.replace(be,"\r\n")}}):{name:e.name,value:n.replace(be,"\r\n")}}).get()}});var Ce=/%20/g,Te=/#.*$/,xe=/([?&])_=[^&]*/,ke=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ae=/^(?:GET|HEAD)$/,Se=/^\/\//,De={},Ne={},Oe="*/".concat("*"),Ie=K.createElement("a");Ie.href=ge.href,at.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ge.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ge.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Oe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":at.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?$($(t,at.ajaxSettings),e):$(at.ajaxSettings,t)},ajaxPrefilter:z(De),ajaxTransport:z(Ne),ajax:function(e,n){function i(e,n,i,a){var h,f,d,b,w,E=n;u||(u=!0,l&&t.clearTimeout(l),o=void 0,s=a||"",C.readyState=e>0?4:0,h=e>=200&&e<300||304===e,i&&(b=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(p,C,i)),b=function(t,e,n,i){var o,r,s,a,l,h={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)h[s.toLowerCase()]=t.converters[s];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=h[l+" "+r]||h["* "+r]))for(o in h)if((a=o.split(" "))[1]===r&&(s=h[l+" "+a[0]]||h["* "+a[0]])){!0===s?s=h[o]:!0!==h[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(p,b,C,h),h?(p.ifModified&&((w=C.getResponseHeader("Last-Modified"))&&(at.lastModified[r]=w),(w=C.getResponseHeader("etag"))&&(at.etag[r]=w)),204===e||"HEAD"===p.type?E="nocontent":304===e?E="notmodified":(E=b.state,f=b.data,h=!(d=b.error))):(d=E,!e&&E||(E="error",e<0&&(e=0))),C.status=e,C.statusText=(n||E)+"",h?v.resolveWith(m,[f,E,C]):v.rejectWith(m,[C,E,d]),C.statusCode(_),_=void 0,c&&g.trigger(h?"ajaxSuccess":"ajaxError",[C,p,h?f:d]),y.fireWith(m,[C,E]),c&&(g.trigger("ajaxComplete",[C,p]),--at.active||at.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var o,r,s,a,l,h,u,c,f,d,p=at.ajaxSetup({},n),m=p.context||p,g=p.context&&(m.nodeType||m.jquery)?at(m):at.event,v=at.Deferred(),y=at.Callbacks("once memory"),_=p.statusCode||{},b={},w={},E="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=ke.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(t,e){return null==u&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==u&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)C.always(t[C.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||E;return o&&o.abort(e),i(0,e),this}};if(v.promise(C),p.url=((e||p.url||ge.href)+"").replace(Se,ge.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(Et)||[""],null==p.crossDomain){h=K.createElement("a");try{h.href=p.url,h.href=h.href,p.crossDomain=Ie.protocol+"//"+Ie.host!=h.protocol+"//"+h.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=at.param(p.data,p.traditional)),Q(De,p,n,C),u)return C;(c=at.event&&p.global)&&0==at.active++&&at.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ae.test(p.type),r=p.url.replace(Te,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ce,"+")):(d=p.url.slice(r.length),p.data&&(r+=(ye.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(xe,"$1"),d=(ye.test(r)?"&":"?")+"_="+ve+++d),p.url=r+d),p.ifModified&&(at.lastModified[r]&&C.setRequestHeader("If-Modified-Since",at.lastModified[r]),at.etag[r]&&C.setRequestHeader("If-None-Match",at.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Oe+"; q=0.01":""):p.accepts["*"]);for(f in p.headers)C.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(m,C,p)||u))return C.abort();if(E="abort",y.add(p.complete),C.done(p.success),C.fail(p.error),o=Q(Ne,p,n,C)){if(C.readyState=1,c&&g.trigger("ajaxSend",[C,p]),u)return C;p.async&&p.timeout>0&&(l=t.setTimeout(function(){C.abort("timeout")},p.timeout));try{u=!1,o.send(b,i)}catch(t){if(u)throw t;i(-1,t)}}else i(-1,"No Transport");return C},getJSON:function(t,e,n){return at.get(t,e,n,"json")},getScript:function(t,e){return at.get(t,void 0,e,"script")}}),at.each(["get","post"],function(t,e){at[e]=function(t,n,i,o){return at.isFunction(n)&&(o=o||i,i=n,n=void 0),at.ajax(at.extend({url:t,type:e,dataType:o,data:n,success:i},at.isPlainObject(t)&&t))}}),at._evalUrl=function(t){return at.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},at.fn.extend({wrapAll:function(t){var e;return this[0]&&(at.isFunction(t)&&(t=t.call(this[0])),e=at(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return at.isFunction(t)?this.each(function(e){at(this).wrapInner(t.call(this,e))}):this.each(function(){var e=at(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=at.isFunction(t);return this.each(function(n){at(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){at(this).replaceWith(this.childNodes)}),this}}),at.expr.pseudos.hidden=function(t){return!at.expr.pseudos.visible(t)},at.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},at.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Le={0:200,1223:204},Pe=at.ajaxSettings.xhr();st.cors=!!Pe&&"withCredentials"in Pe,st.ajax=Pe=!!Pe,at.ajaxTransport(function(e){var n,i;if(st.cors||Pe&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(s in o)a.setRequestHeader(s,o[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Le[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),at.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),at.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return at.globalEval(t),t}}}),at.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),at.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,o){e=at("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),K.head.appendChild(e[0])},abort:function(){n&&n()}}}});var je=[],He=/(=)\?(?=&|$)|\?\?/;at.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=je.pop()||at.expando+"_"+ve++;return this[t]=!0,t}}),at.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,s,a=!1!==e.jsonp&&(He.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&He.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=at.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(He,"$1"+o):!1!==e.jsonp&&(e.url+=(ye.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||at.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){s=arguments},i.always(function(){void 0===r?at(t).removeProp(o):t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,je.push(o)),s&&at.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),st.createHTMLDocument=function(){var t=K.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),at.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var i,o,r;return e||(st.createHTMLDocument?((i=(e=K.implementation.createHTMLDocument("")).createElement("base")).href=K.location.href,e.head.appendChild(i)):e=K),o=gt.exec(t),r=!n&&[],o?[e.createElement(o[1])]:(o=y([t],e,r),r&&r.length&&at(r).remove(),at.merge([],o.childNodes))},at.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");return a>-1&&(i=B(t.slice(a)),t=t.slice(0,a)),at.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&at.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?at("<div>").append(at.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},at.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){at.fn[e]=function(t){return this.on(e,t)}}),at.expr.pseudos.animated=function(t){return at.grep(at.timers,function(e){return t===e.elem}).length},at.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,h=at.css(t,"position"),u=at(t),c={};"static"===h&&(t.style.position="relative"),a=u.offset(),r=at.css(t,"top"),l=at.css(t,"left"),("absolute"===h||"fixed"===h)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),at.isFunction(e)&&(e=e.call(t,n,at.extend({},a))),null!=e.top&&(c.top=e.top-a.top+s),null!=e.left&&(c.left=e.left-a.left+o),"using"in e?e.using.call(t,c):u.css(c)}},at.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){at.offset.setOffset(this,t,e)});var e,n,i,o,r=this[0];if(r)return r.getClientRects().length?(i=r.getBoundingClientRect(),e=r.ownerDocument,n=e.documentElement,o=e.defaultView,{top:i.top+o.pageYOffset-n.clientTop,left:i.left+o.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===at.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),o(t[0],"html")||(i=t.offset()),i={top:i.top+at.css(t[0],"borderTopWidth",!0),left:i.left+at.css(t[0],"borderLeftWidth",!0)}),{top:e.top-i.top-at.css(n,"marginTop",!0),left:e.left-i.left-at.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===at.css(t,"position");)t=t.offsetParent;return t||Bt})}}),at.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;at.fn[t]=function(i){return xt(this,function(t,i,o){var r;if(at.isWindow(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o},t,i,arguments.length)}}),at.each(["top","left"],function(t,e){at.cssHooks[e]=O(st.pixelPosition,function(t,n){if(n)return n=N(t,e),Jt.test(n)?at(t).position()[e]+"px":n})}),at.each({Height:"height",Width:"width"},function(t,e){at.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){at.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return xt(this,function(e,n,o){var r;return at.isWindow(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===o?at.css(e,n,a):at.style(e,n,o,a)},e,s?o:void 0,s)}})}),at.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),at.holdReady=function(t){t?at.readyWait++:at.ready(!0)},at.isArray=Array.isArray,at.parseJSON=JSON.parse,at.nodeName=o,"function"==typeof define&&define.amd&&define("jquery",[],function(){return at});var Me=t.jQuery,Re=t.$;return at.noConflict=function(e){return t.$===at&&(t.$=Re),e&&t.jQuery===at&&(t.jQuery=Me),at},e||(t.jQuery=t.$=at),at}),function(t,e){"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e(require,exports,module):t.Tether=e()}(this,function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t){var e=t.getBoundingClientRect(),n={};for(var i in e)n[i]=e[i];if(t.ownerDocument!==document){var r=t.ownerDocument.defaultView.frameElement;if(r){var s=o(r);n.top+=s.top,n.bottom+=s.top,n.left+=s.left,n.right+=s.left}}return n}function r(t){var e=(getComputedStyle(t)||{}).position,n=[];if("fixed"===e)return[t];for(var i=t;(i=i.parentNode)&&i&&1===i.nodeType;){var o=void 0;try{o=getComputedStyle(i)}catch(t){}if(void 0===o||null===o)return n.push(i),n;var r=o,s=r.overflow,a=r.overflowX,l=r.overflowY;/(auto|scroll|overlay)/.test(s+l+a)&&("absolute"!==e||["relative","absolute","fixed"].indexOf(o.position)>=0)&&n.push(i)}return n.push(t.ownerDocument.body),t.ownerDocument!==document&&n.push(t.ownerDocument.defaultView),n}function s(){C&&document.body.removeChild(C),C=null}function a(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var n=e.documentElement,i=o(t),r=k();return i.top-=r.top,i.left-=r.left,void 0===i.width&&(i.width=document.body.scrollWidth-i.left-i.right),void 0===i.height&&(i.height=document.body.scrollHeight-i.top-i.bottom),i.top=i.top-n.clientTop,i.left=i.left-n.clientLeft,i.right=e.body.clientWidth-i.width-i.left,i.bottom=e.body.clientHeight-i.height-i.top,i}function l(t){return t.offsetParent||document.documentElement}function h(){if(A)return A;var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");u(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var n=t.offsetWidth;e.style.overflow="scroll";var i=t.offsetWidth;n===i&&(i=e.clientWidth),document.body.removeChild(e);var o=n-i;return A={width:o,height:o}}function u(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var n in e)({}).hasOwnProperty.call(e,n)&&(t[n]=e[n])}),t}function c(t,e){if(void 0!==t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var n=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),i=p(t).replace(n," ");m(t,i)}}function f(t,e){if(void 0!==t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{c(t,e);var n=p(t)+" "+e;m(t,n)}}function d(t,e){if(void 0!==t.classList)return t.classList.contains(e);var n=p(t);return new RegExp("(^| )"+e+"( |$)","gi").test(n)}function p(t){return t.className instanceof t.ownerDocument.defaultView.SVGAnimatedString?t.className.baseVal:t.className}function m(t,e){t.setAttribute("class",e)}function g(t,e,n){n.forEach(function(n){-1===e.indexOf(n)&&d(t,n)&&c(t,n)}),e.forEach(function(e){d(t,e)||f(t,e)})}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+n>=e&&e>=t-n}function y(){return"object"==typeof performance&&"function"==typeof performance.now?performance.now():+new Date}function _(){for(var t={top:0,left:0},e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];return n.forEach(function(e){var n=e.top,i=e.left;"string"==typeof n&&(n=parseFloat(n,10)),"string"==typeof i&&(i=parseFloat(i,10)),t.top+=n,t.left+=i}),t}function b(t,e){return"string"==typeof t.left&&-1!==t.left.indexOf("%")&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&-1!==t.top.indexOf("%")&&(t.top=parseFloat(t.top,10)/100*e.height),t}var w=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),E=void 0;void 0===E&&(E={modules:[]});var C=null,T=function(){var t=0;return function(){return++t}}(),x={},k=function(){var t=C;t&&document.body.contains(t)||((t=document.createElement("div")).setAttribute("data-tether-id",T()),u(t.style,{top:0,left:0,position:"absolute"}),document.body.appendChild(t),C=t);var e=t.getAttribute("data-tether-id");return void 0===x[e]&&(x[e]=o(t),D(function(){delete x[e]})),x[e]},A=null,S=[],D=function(t){S.push(t)},N=function(){for(var t=void 0;t=S.pop();)t()},O=function(){function t(){i(this,t)}return w(t,[{key:"on",value:function(t,e,n){var i=!(arguments.length<=3||void 0===arguments[3])&&arguments[3];void 0===this.bindings&&(this.bindings={}),void 0===this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:i})}},{key:"once",value:function(t,e,n){this.on(t,e,n,!0)}},{key:"off",value:function(t,e){if(void 0!==this.bindings&&void 0!==this.bindings[t])if(void 0===e)delete this.bindings[t];else for(var n=0;n<this.bindings[t].length;)this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):++n}},{key:"trigger",value:function(t){if(void 0!==this.bindings&&this.bindings[t]){for(var e=0,n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],s=r.handler,a=r.ctx,l=r.once,h=a;void 0===h&&(h=this),s.apply(h,i),l?this.bindings[t].splice(e,1):++e}}}}]),t}();E.Utils={getActualBoundingClientRect:o,getScrollParents:r,getBounds:a,getOffsetParent:l,extend:u,addClass:f,removeClass:c,hasClass:d,updateClasses:g,defer:D,flush:N,uniqueId:T,Evented:O,getScrollBarSize:h,removeUtilElements:s};var I=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw r}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),L=(w=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),function(t,e,n){for(var i=!0;i;){var o=t,r=e,s=n;i=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,r);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return;t=h,e=r,n=s,i=!0,a=h=void 0}});if(void 0===E)throw new Error("You must include the utils.js file before tether.js");var r=(Q=E.Utils).getScrollParents,l=(a=Q.getBounds,Q.getOffsetParent),f=(u=Q.extend,Q.addClass),c=Q.removeClass,h=(g=Q.updateClasses,D=Q.defer,N=Q.flush,Q.getScrollBarSize),s=Q.removeUtilElements,P=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","WebkitTransform","OTransform","MozTransform","msTransform"],n=0;n<e.length;++n){var i=e[n];if(void 0!==t.style[i])return i}}(),j=[],H=function(){j.forEach(function(t){t.position(!1)}),N()};!function(){var t=null,e=null,n=null,i=function i(){if(void 0!==e&&e>16)return e=Math.min(e-16,250),void(n=setTimeout(i,250));void 0!==t&&y()-t<10||(null!=n&&(clearTimeout(n),n=null),t=y(),H(),e=y()-t)};"undefined"!=typeof window&&void 0!==window.addEventListener&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,i)})}();var M={center:"center",left:"right",right:"left"},R={middle:"middle",top:"bottom",bottom:"top"},F={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},W=function(t){var e=t.left,n=t.top;return void 0!==F[t.left]&&(e=F[t.left]),void 0!==F[t.top]&&(n=F[t.top]),{left:e,top:n}},q=function(t){var e=t.split(" "),n=I(e,2);return{top:n[0],left:n[1]}},B=q,V=function(t){function e(t){var n=this;i(this,e),L(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this.position=this.position.bind(this),j.push(this),this.history=[],this.setOptions(t,!1),E.modules.forEach(function(t){void 0!==t.initialize&&t.initialize.call(n)}),this.position()}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,O),w(e,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return void 0!==e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,n=arguments.length<=1||void 0===arguments[1]||arguments[1];this.options=u({offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"},t);var i=this.options,o=i.element,s=i.target,a=i.targetModifier;if(this.element=o,this.target=s,this.targetModifier=a,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if(void 0===e[t])throw new Error("Tether Error: Both element and target must be defined");void 0!==e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),f(this.element,this.getClass("element")),!1!==this.options.addTargetClasses&&f(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=B(this.options.targetAttachment),this.attachment=B(this.options.attachment),this.offset=q(this.options.offset),this.targetOffset=q(this.options.targetOffset),void 0!==this.scrollParents&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParents=[this.target]:this.scrollParents=r(this.target),!1!==this.options.enabled&&this.enable(n)}},{key:"getTargetBounds",value:function(){if(void 0===this.targetModifier)return a(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};return(r={height:(t=a(this.target)).height,width:t.width,top:t.top,left:t.left}).height=Math.min(r.height,t.height-(pageYOffset-t.top)),r.height=Math.min(r.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),r.height=Math.min(innerHeight,r.height),r.height-=2,r.width=Math.min(r.width,t.width-(pageXOffset-t.left)),r.width=Math.min(r.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),r.width=Math.min(innerWidth,r.width),r.width-=2,r.top<pageYOffset&&(r.top=pageYOffset),r.left<pageXOffset&&(r.left=pageXOffset),r}if("scroll-handle"===this.targetModifier){var t=void 0,e=this.target;e===document.body?(e=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=a(e);var n=getComputedStyle(e),i=0;(e.scrollWidth>e.clientWidth||[n.overflow,n.overflowX].indexOf("scroll")>=0||this.target!==document.body)&&(i=15);var o=t.height-parseFloat(n.borderTopWidth)-parseFloat(n.borderBottomWidth)-i,r={width:15,height:.975*o*(o/e.scrollHeight),left:t.left+t.width-parseFloat(n.borderLeftWidth)-15},s=0;o<408&&this.target===document.body&&(s=-11e-5*Math.pow(o,2)-.00727*o+22.58),this.target!==document.body&&(r.height=Math.max(r.height,24));var l=this.target.scrollTop/(e.scrollHeight-o);return r.top=l*(o-r.height-s)+t.top+parseFloat(n.borderTopWidth),this.target===document.body&&(r.height=Math.max(r.height,24)),r}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return void 0===this._cache&&(this._cache={}),void 0===this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];!1!==this.options.addTargetClasses&&f(this.target,this.getClass("enabled")),f(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParents.forEach(function(e){e!==t.target.ownerDocument&&e.addEventListener("scroll",t.position)}),e&&this.position()}},{key:"disable",value:function(){var t=this;c(this.target,this.getClass("enabled")),c(this.element,this.getClass("enabled")),this.enabled=!1,void 0!==this.scrollParents&&this.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.position)})}},{key:"destroy",value:function(){var t=this;this.disable(),j.forEach(function(e,n){e===t&&j.splice(n,1)}),0===j.length&&s()}},{key:"updateAttachClasses",value:function(t,e){var n=this;t=t||this.attachment,e=e||this.targetAttachment;void 0!==this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),void 0===this._addAttachClasses&&(this._addAttachClasses=[]);var i=this._addAttachClasses;t.top&&i.push(this.getClass("element-attached")+"-"+t.top),t.left&&i.push(this.getClass("element-attached")+"-"+t.left),e.top&&i.push(this.getClass("target-attached")+"-"+e.top),e.left&&i.push(this.getClass("target-attached")+"-"+e.left);var o=[];["left","top","bottom","right","middle","center"].forEach(function(t){o.push(n.getClass("element-attached")+"-"+t),o.push(n.getClass("target-attached")+"-"+t)}),D(function(){void 0!==n._addAttachClasses&&(g(n.element,n._addAttachClasses,o),!1!==n.options.addTargetClasses&&g(n.target,n._addAttachClasses,o),delete n._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];if(this.enabled){this.clearCache();var n=function(t,e){var n=t.left,i=t.top;return"auto"===n&&(n=M[e.left]),"auto"===i&&(i=R[e.top]),{left:n,top:i}}(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,n);var i=this.cache("element-bounds",function(){return a(t.element)}),o=i.width,r=i.height;if(0===o&&0===r&&void 0!==this.lastSize){var s=this.lastSize;o=s.width,r=s.height}else this.lastSize={width:o,height:r};var u=this.cache("target-bounds",function(){return t.getTargetBounds()}),c=u,f=b(W(this.attachment),{width:o,height:r}),d=b(W(n),c),p=b(this.offset,{width:o,height:r}),m=b(this.targetOffset,c);f=_(f,p),d=_(d,m);for(var g=u.left+d.left-f.left,v=u.top+d.top-f.top,y=0;y<E.modules.length;++y){var w=E.modules[y].position.call(this,{left:g,top:v,targetAttachment:n,targetPos:u,elementPos:i,offset:f,targetOffset:d,manualOffset:p,manualTargetOffset:m,scrollbarSize:k,attachment:this.attachment});if(!1===w)return!1;void 0!==w&&"object"==typeof w&&(v=w.top,g=w.left)}var C={page:{top:v,left:g},viewport:{top:v-pageYOffset,bottom:pageYOffset-v-r+innerHeight,left:g-pageXOffset,right:pageXOffset-g-o+innerWidth}},T=this.target.ownerDocument,x=T.defaultView,k=void 0;return x.innerHeight>T.documentElement.clientHeight&&(k=this.cache("scrollbar-size",h),C.viewport.bottom-=k.height),x.innerWidth>T.documentElement.clientWidth&&(k=this.cache("scrollbar-size",h),C.viewport.right-=k.width),-1!==["","static"].indexOf(T.body.style.position)&&-1!==["","static"].indexOf(T.body.parentElement.style.position)||(C.page.bottom=T.body.scrollHeight-v-r,C.page.right=T.body.scrollWidth-g-o),void 0!==this.options.optimizations&&!1!==this.options.optimizations.moveElement&&void 0===this.targetModifier&&function(){var e=t.cache("target-offsetparent",function(){return l(t.target)}),n=t.cache("target-offsetparent-bounds",function(){return a(e)}),i=getComputedStyle(e),o=n,r={};if(["Top","Left","Bottom","Right"].forEach(function(t){r[t.toLowerCase()]=parseFloat(i["border"+t+"Width"])}),n.right=T.body.scrollWidth-n.left-o.width+r.right,n.bottom=T.body.scrollHeight-n.top-o.height+r.bottom,C.page.top>=n.top+r.top&&C.page.bottom>=n.bottom&&C.page.left>=n.left+r.left&&C.page.right>=n.right){var s=e.scrollTop,h=e.scrollLeft;C.offset={top:C.page.top-n.top+s-r.top,left:C.page.left-n.left+h-r.left}}}(),this.move(C),this.history.unshift(C),this.history.length>3&&this.history.pop(),e&&N(),!0}}},{key:"move",value:function(t){var e=this;if(void 0!==this.element.parentNode){var n={};for(var i in t){n[i]={};for(var o in t[i]){for(var r=!1,s=0;s<this.history.length;++s){var a=this.history[s];if(void 0!==a[i]&&!v(a[i][o],t[i][o])){r=!0;break}}r||(n[i][o]=!0)}}var h={top:"",left:"",right:"",bottom:""},c=function(t,n){if(!1!==(void 0!==e.options.optimizations?e.options.optimizations.gpu:null)){var i=void 0,o=void 0;if(t.top?(h.top=0,i=n.top):(h.bottom=0,i=-n.bottom),t.left?(h.left=0,o=n.left):(h.right=0,o=-n.right),window.matchMedia){window.matchMedia("only screen and (min-resolution: 1.3dppx)").matches||window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3)").matches||(o=Math.round(o),i=Math.round(i))}h[P]="translateX("+o+"px) translateY("+i+"px)","msTransform"!==P&&(h[P]+=" translateZ(0)")}else t.top?h.top=n.top+"px":h.bottom=n.bottom+"px",t.left?h.left=n.left+"px":h.right=n.right+"px"},f=!1;if((n.page.top||n.page.bottom)&&(n.page.left||n.page.right)?(h.position="absolute",c(n.page,t.page)):(n.viewport.top||n.viewport.bottom)&&(n.viewport.left||n.viewport.right)?(h.position="fixed",c(n.viewport,t.viewport)):void 0!==n.offset&&n.offset.top&&n.offset.left?function(){h.position="absolute";var i=e.cache("target-offsetparent",function(){return l(e.target)});l(e.element)!==i&&D(function(){e.element.parentNode.removeChild(e.element),i.appendChild(e.element)}),c(n.offset,t.offset),f=!0}():(h.position="absolute",c({top:!0,left:!0},t.page)),!f)if(this.options.bodyElement)this.element.parentNode!==this.options.bodyElement&&this.options.bodyElement.appendChild(this.element);else{for(var d=!0,p=this.element.parentNode;p&&1===p.nodeType&&"BODY"!==p.tagName;){if("static"!==getComputedStyle(p).position){d=!1;break}p=p.parentNode}d||(this.element.parentNode.removeChild(this.element),this.element.ownerDocument.body.appendChild(this.element))}var m={},g=!1;for(var o in h){var y=h[o];this.element.style[o]!==y&&(g=!0,m[o]=y)}g&&D(function(){u(e.element.style,m),e.trigger("repositioned")})}}}]),e}();V.modules=[],E.position=H;var U=u(V,E),u=(I=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw r}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=(Q=E.Utils).getBounds,Q.extend),z=(g=Q.updateClasses,D=Q.defer,["left","top","right","bottom"]);E.modules.push({position:function(t){var e=this,n=t.top,i=t.left,o=t.targetAttachment;if(!this.options.constraints)return!0;var r=this.cache("element-bounds",function(){return a(e.element)}),s=r.height,l=r.width;if(0===l&&0===s&&void 0!==this.lastSize){var h=this.lastSize;l=h.width,s=h.height}var c=this.cache("target-bounds",function(){return e.getTargetBounds()}),f=c.height,d=c.width,p=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,n=t.pinnedClass;e&&p.push(e),n&&p.push(n)}),p.forEach(function(t){["left","top","right","bottom"].forEach(function(e){p.push(t+"-"+e)})});var m=[],v=u({},o),y=u({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,h=t.attachment,u=t.pin;void 0===h&&(h="");var c=void 0,p=void 0;if(h.indexOf(" ")>=0){var g=h.split(" "),_=I(g,2);p=_[0],c=_[1]}else c=p=h;var b=function(t,e){return"scrollParent"===e?e=t.scrollParents[0]:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),void 0!==e.nodeType&&function(){var t=e,n=a(e),i=n,o=getComputedStyle(e);if(e=[i.left,i.top,n.width+i.left,n.height+i.top],t.ownerDocument!==document){var r=t.ownerDocument.defaultView;e[0]+=r.pageXOffset,e[1]+=r.pageYOffset,e[2]+=r.pageXOffset,e[3]+=r.pageYOffset}z.forEach(function(t,n){"Top"===(t=t[0].toUpperCase()+t.substr(1))||"Left"===t?e[n]+=parseFloat(o["border"+t+"Width"]):e[n]-=parseFloat(o["border"+t+"Width"])})}(),e}(e,r);"target"!==p&&"both"!==p||(n<b[1]&&"top"===v.top&&(n+=f,v.top="bottom"),n+s>b[3]&&"bottom"===v.top&&(n-=f,v.top="top")),"together"===p&&("top"===v.top&&("bottom"===y.top&&n<b[1]?(n+=f,v.top="bottom",n+=s,y.top="top"):"top"===y.top&&n+s>b[3]&&n-(s-f)>=b[1]&&(n-=s-f,v.top="bottom",y.top="bottom")),"bottom"===v.top&&("top"===y.top&&n+s>b[3]?(n-=f,v.top="top",n-=s,y.top="bottom"):"bottom"===y.top&&n<b[1]&&n+(2*s-f)<=b[3]&&(n+=s-f,v.top="top",y.top="top")),"middle"===v.top&&(n+s>b[3]&&"top"===y.top?(n-=s,y.top="bottom"):n<b[1]&&"bottom"===y.top&&(n+=s,y.top="top"))),"target"!==c&&"both"!==c||(i<b[0]&&"left"===v.left&&(i+=d,v.left="right"),i+l>b[2]&&"right"===v.left&&(i-=d,v.left="left")),"together"===c&&(i<b[0]&&"left"===v.left?"right"===y.left?(i+=d,v.left="right",i+=l,y.left="left"):"left"===y.left&&(i+=d,v.left="right",i-=l,y.left="right"):i+l>b[2]&&"right"===v.left?"left"===y.left?(i-=d,v.left="left",i-=l,y.left="right"):"right"===y.left&&(i-=d,v.left="left",i+=l,y.left="left"):"center"===v.left&&(i+l>b[2]&&"left"===y.left?(i-=l,y.left="right"):i<b[0]&&"right"===y.left&&(i+=l,y.left="left"))),"element"!==p&&"both"!==p||(n<b[1]&&"bottom"===y.top&&(n+=s,y.top="top"),n+s>b[3]&&"top"===y.top&&(n-=s,y.top="bottom")),"element"!==c&&"both"!==c||(i<b[0]&&("right"===y.left?(i+=l,y.left="left"):"center"===y.left&&(i+=l/2,y.left="left")),i+l>b[2]&&("left"===y.left?(i-=l,y.left="right"):"center"===y.left&&(i-=l/2,y.left="right"))),"string"==typeof u?u=u.split(",").map(function(t){return t.trim()}):!0===u&&(u=["top","left","right","bottom"]),u=u||[];var w=[],E=[];n<b[1]&&(u.indexOf("top")>=0?(n=b[1],w.push("top")):E.push("top")),n+s>b[3]&&(u.indexOf("bottom")>=0?(n=b[3]-s,w.push("bottom")):E.push("bottom")),i<b[0]&&(u.indexOf("left")>=0?(i=b[0],w.push("left")):E.push("left")),i+l>b[2]&&(u.indexOf("right")>=0?(i=b[2]-l,w.push("right")):E.push("right")),w.length&&function(){var t=void 0;t=void 0!==e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),m.push(t),w.forEach(function(e){m.push(t+"-"+e)})}(),E.length&&function(){var t=void 0;t=void 0!==e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),m.push(t),E.forEach(function(e){m.push(t+"-"+e)})}(),(w.indexOf("left")>=0||w.indexOf("right")>=0)&&(y.left=v.left=!1),(w.indexOf("top")>=0||w.indexOf("bottom")>=0)&&(y.top=v.top=!1),v.top===o.top&&v.left===o.left&&y.top===e.attachment.top&&y.left===e.attachment.left||(e.updateAttachClasses(y,v),e.trigger("update",{attachment:y,targetAttachment:v}))}),D(function(){!1!==e.options.addTargetClasses&&g(e.target,m,p),g(e.element,m,p)}),{top:n,left:i}}});var Q,a=(Q=E.Utils).getBounds,g=Q.updateClasses;D=Q.defer;E.modules.push({position:function(t){var e=this,n=t.top,i=t.left,o=this.cache("element-bounds",function(){return a(e.element)}),r=o.height,s=o.width,l=this.getTargetBounds(),h=n+r,u=i+s,c=[];n<=l.bottom&&h>=l.top&&["left","right"].forEach(function(t){var e=l[t];e!==i&&e!==u||c.push(t)}),i<=l.right&&u>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];e!==n&&e!==h||c.push(t)});var f=[],d=[];return f.push(this.getClass("abutted")),["left","top","right","bottom"].forEach(function(t){f.push(e.getClass("abutted")+"-"+t)}),c.length&&d.push(this.getClass("abutted")),c.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),D(function(){!1!==e.options.addTargetClasses&&g(e.target,d,f),g(e.element,d,f)}),!0}});I=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw r}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return E.modules.push({position:function(t){var e=t.top,n=t.left;if(this.options.shift){var i=this.options.shift;"function"==typeof this.options.shift&&(i=this.options.shift.call(this,{top:e,left:n}));var o=void 0,r=void 0;if("string"==typeof i){(i=i.split(" "))[1]=i[1]||i[0];var s=I(i,2);o=s[0],r=s[1],o=parseFloat(o,10),r=parseFloat(r,10)}else o=i.top,r=i.left;return e+=o,n+=r,{top:e,left:n}}}}),U}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Popper=e()}(this,function(){"use strict";function t(t){return t&&"[object Function]"==={}.toString.call(t)}function e(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function n(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function i(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var o=e(t),r=o.overflow,s=o.overflowX,a=o.overflowY;return/(auto|scroll)/.test(r+a+s)?t:i(n(t))}function o(t){var n=t&&t.offsetParent,i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===e(n,"position")?o(n):n:t?t.ownerDocument.documentElement:document.documentElement}function r(t){return null===t.parentNode?t:r(t.parentNode)}function s(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,a=n?e:t,l=document.createRange();l.setStart(i,0),l.setEnd(a,0);var h=l.commonAncestorContainer;if(t!==h&&e!==h||i.contains(a))return function(t){var e=t.nodeName;return"BODY"!==e&&("HTML"===e||o(t.firstElementChild)===t)}(h)?h:o(h);var u=r(t);return u.host?s(u.host,e):s(t,r(e).host)}function a(t){var e="top"===(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function l(t,e){var n="x"===e?"Left":"Top",i="Left"==n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function h(t,e,n,i){return H(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],V()?n["offset"+t]+i["margin"+("Height"===t?"Top":"Left")]+i["margin"+("Height"===t?"Bottom":"Right")]:0)}function u(){var t=document.body,e=document.documentElement,n=V()&&getComputedStyle(e);return{height:h("Height",t,e,n),width:h("Width",t,e,n)}}function c(t){return $({},t,{right:t.left+t.width,bottom:t.top+t.height})}function f(t){var n={};if(V())try{n=t.getBoundingClientRect();var i=a(t,"top"),o=a(t,"left");n.top+=i,n.left+=o,n.bottom+=i,n.right+=o}catch(t){}else n=t.getBoundingClientRect();var r={left:n.left,top:n.top,width:n.right-n.left,height:n.bottom-n.top},s="HTML"===t.nodeName?u():{},h=s.width||t.clientWidth||r.right-r.left,f=s.height||t.clientHeight||r.bottom-r.top,d=t.offsetWidth-h,p=t.offsetHeight-f;if(d||p){var m=e(t);d-=l(m,"x"),p-=l(m,"y"),r.width-=d,r.height-=p}return c(r)}function d(t,n){var o=V(),r="HTML"===n.nodeName,s=f(t),l=f(n),h=i(t),u=e(n),d=parseFloat(u.borderTopWidth,10),p=parseFloat(u.borderLeftWidth,10),m=c({top:s.top-l.top-d,left:s.left-l.left-p,width:s.width,height:s.height});if(m.marginTop=0,m.marginLeft=0,!o&&r){var g=parseFloat(u.marginTop,10),v=parseFloat(u.marginLeft,10);m.top-=d-g,m.bottom-=d-g,m.left-=p-v,m.right-=p-v,m.marginTop=g,m.marginLeft=v}return(o?n.contains(h):n===h&&"BODY"!==h.nodeName)&&(m=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=a(e,"top"),o=a(e,"left"),r=n?-1:1;return t.top+=i*r,t.bottom+=i*r,t.left+=o*r,t.right+=o*r,t}(m,n)),m}function p(t){var i=t.nodeName;return"BODY"!==i&&"HTML"!==i&&("fixed"===e(t,"position")||p(n(t)))}function m(t,e,o,r){var l={top:0,left:0},h=s(t,e);if("viewport"===r)l=function(t){var e=t.ownerDocument.documentElement,n=d(t,e),i=H(e.clientWidth,window.innerWidth||0),o=H(e.clientHeight,window.innerHeight||0),r=a(e),s=a(e,"left");return c({top:r-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:i,height:o})}(h);else{var f;"scrollParent"===r?"BODY"===(f=i(n(e))).nodeName&&(f=t.ownerDocument.documentElement):f="window"===r?t.ownerDocument.documentElement:r;var m=d(f,h);if("HTML"!==f.nodeName||p(h))l=m;else{var g=u(),v=g.height,y=g.width;l.top+=m.top-m.marginTop,l.bottom=v+m.top,l.left+=m.left-m.marginLeft,l.right=y+m.left}}return l.left+=o,l.top+=o,l.right-=o,l.bottom-=o,l}function g(t,e,n,i,o){var r=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=m(n,i,r,o),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},l=Object.keys(a).map(function(t){return $({key:t},a[t],{area:function(t){return t.width*t.height}(a[t])})}).sort(function(t,e){return e.area-t.area}),h=l.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),u=0<h.length?h[0].key:l[0].key,c=t.split("-")[1];return u+(c?"-"+c:"")}function v(t,e,n){return d(n,s(e,n))}function y(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),i=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function _(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function b(t,e,n){n=n.split("-")[0];var i=y(t),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),s=r?"top":"left",a=r?"left":"top",l=r?"height":"width",h=r?"width":"height";return o[s]=e[s]+e[l]/2-i[l]/2,o[a]=n===a?e[a]-i[h]:e[_(a)],o}function w(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function E(e,n,i){return(void 0===i?e:e.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=w(t,function(t){return t[e]===n});return t.indexOf(i)}(e,"name",i))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=e.function||e.fn;e.enabled&&t(i)&&(n.offsets.popper=c(n.offsets.popper),n.offsets.reference=c(n.offsets.reference),n=i(n,e))}),n}function C(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function T(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length-1;i++){var o=e[i],r=o?""+o+n:t;if(void 0!==document.body.style[r])return r}return null}function x(t){var e=t.ownerDocument;return e?e.defaultView:window}function k(t,e,n,o){var r="BODY"===t.nodeName,s=r?t.ownerDocument.defaultView:t;s.addEventListener(e,n,{passive:!0}),r||k(i(s.parentNode),e,n,o),o.push(s)}function A(){this.state.eventsEnabled||(this.state=function(t,e,n,o){n.updateBound=o,x(t).addEventListener("resize",n.updateBound,{passive:!0});var r=i(t);return k(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}(this.reference,this.options,this.state,this.scheduleUpdate))}function S(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function(t,e){return x(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e}(this.reference,this.state))}function D(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function N(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&D(e[n])&&(i="px"),t.style[n]=e[n]+i})}function O(t,e,n){var i=w(t,function(t){return t.name===e}),o=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!o){var r="`"+e+"`";console.warn("`"+n+"` modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}function I(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=K.indexOf(t),i=K.slice(n+1).concat(K.slice(0,n));return e?i.reverse():i}function L(t,e,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),s=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=s.indexOf(w(s,function(t){return-1!==t.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,h=-1===a?[s]:[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))];return(h=h.map(function(t,i){var o=(1===i?!r:r)?"height":"width",s=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],s=o[2];if(!r)return t;if(0===s.indexOf("%")){var a;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return c(a)[e]/100*r}if("vh"===s||"vw"===s)return("vh"===s?H(document.documentElement.clientHeight,window.innerHeight||0):H(document.documentElement.clientWidth,window.innerWidth||0))/100*r;return r}(t,o,e,n)})})).forEach(function(t,e){t.forEach(function(n,i){D(n)&&(o[e]+=n*("-"===t[i-1]?-1:1))})}),o}for(var P=Math.min,j=Math.floor,H=Math.max,M="undefined"!=typeof window&&"undefined"!=typeof document,R=["Edge","Trident","Firefox"],F=0,W=0;W<R.length;W+=1)if(M&&0<=navigator.userAgent.indexOf(R[W])){F=1;break}var q,B=M&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},F))}},V=function(){return void 0==q&&(q=-1!==navigator.appVersion.indexOf("MSIE 10")),q},U=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},z=function(){function t(t,e){for(var n,i=0;i<e.length;i++)n=e[i],n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Q=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},$=Object.assign||function(t){for(var e,n=1;n<arguments.length;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Y=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],K=Y.slice(3),X="flip",G="clockwise",J="counterclockwise",Z=function(){function e(n,i){var o=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};U(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(o.update)},this.update=B(this.update.bind(this)),this.options=$({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=n&&n.jquery?n[0]:n,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys($({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){o.options.modifiers[t]=$({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return $({name:t},o.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(e){e.enabled&&t(e.onLoad)&&e.onLoad(o.reference,o.popper,o.options,e,o.state)}),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return z(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=v(this.state,this.popper,this.reference),t.placement=g(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.offsets.popper=b(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position="absolute",t=E(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,C(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[T("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return A.call(this)}},{key:"disableEventListeners",value:function(){return S.call(this)}}]),e}();return Z.Utils=("undefined"==typeof window?global:window).PopperUtils,Z.placements=Y,Z.Defaults={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var o=t.offsets,r=o.reference,s=o.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",h=a?"width":"height",u={start:Q({},l,r[l]),end:Q({},l,r[l]+r[h]-s[h])};t.offsets.popper=$({},s,u[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n,i=e.offset,o=t.placement,r=t.offsets,s=r.popper,a=r.reference,l=o.split("-")[0];return n=D(+i)?[+i,0]:L(i,s,a,l),"left"===l?(s.top+=n[0],s.left-=n[1]):"right"===l?(s.top+=n[0],s.left+=n[1]):"top"===l?(s.left+=n[0],s.top-=n[1]):"bottom"===l&&(s.left+=n[0],s.top+=n[1]),t.popper=s,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||o(t.instance.popper);t.instance.reference===n&&(n=o(n));var i=m(t.instance.popper,t.instance.reference,e.padding,n);e.boundaries=i;var r=e.priority,s=t.offsets.popper,a={primary:function(t){var n=s[t];return s[t]<i[t]&&!e.escapeWithReference&&(n=H(s[t],i[t])),Q({},t,n)},secondary:function(t){var n="right"===t?"left":"top",o=s[n];return s[t]>i[t]&&!e.escapeWithReference&&(o=P(s[n],i[t]-("right"===t?s.width:s.height))),Q({},n,o)}};return r.forEach(function(t){var e=-1===["left","top"].indexOf(t)?"secondary":"primary";s=$({},s,a[e](t))}),t.offsets.popper=s,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,o=t.placement.split("-")[0],r=j,s=-1!==["top","bottom"].indexOf(o),a=s?"right":"bottom",l=s?"left":"top",h=s?"width":"height";return n[a]<r(i[l])&&(t.offsets.popper[l]=r(i[l])-n[h]),n[l]>r(i[a])&&(t.offsets.popper[l]=r(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,n){var i;if(!O(t.instance.modifiers,"arrow","keepTogether"))return t;var o=n.element;if("string"==typeof o){if(!(o=t.instance.popper.querySelector(o)))return t}else if(!t.instance.popper.contains(o))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],s=t.offsets,a=s.popper,l=s.reference,h=-1!==["left","right"].indexOf(r),u=h?"height":"width",f=h?"Top":"Left",d=f.toLowerCase(),p=h?"left":"top",m=h?"bottom":"right",g=y(o)[u];l[m]-g<a[d]&&(t.offsets.popper[d]-=a[d]-(l[m]-g)),l[d]+g>a[m]&&(t.offsets.popper[d]+=l[d]+g-a[m]),t.offsets.popper=c(t.offsets.popper);var v=l[d]+l[u]/2-g/2,_=e(t.instance.popper),b=parseFloat(_["margin"+f],10),w=parseFloat(_["border"+f+"Width"],10),E=v-t.offsets.popper[d]-b-w;return E=H(P(a[u]-g,E),0),t.arrowElement=o,t.offsets.arrow=(i={},Q(i,d,Math.round(E)),Q(i,p,""),i),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(C(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=m(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement),i=t.placement.split("-")[0],o=_(i),r=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case X:s=[i,o];break;case G:s=I(i);break;case J:s=I(i,!0);break;default:s=e.behavior}return s.forEach(function(a,l){if(i!==a||s.length===l+1)return t;i=t.placement.split("-")[0],o=_(i);var h=t.offsets.popper,u=t.offsets.reference,c=j,f="left"===i&&c(h.right)>c(u.left)||"right"===i&&c(h.left)<c(u.right)||"top"===i&&c(h.bottom)>c(u.top)||"bottom"===i&&c(h.top)<c(u.bottom),d=c(h.left)<c(n.left),p=c(h.right)>c(n.right),m=c(h.top)<c(n.top),g=c(h.bottom)>c(n.bottom),v="left"===i&&d||"right"===i&&p||"top"===i&&m||"bottom"===i&&g,y=-1!==["top","bottom"].indexOf(i),w=!!e.flipVariations&&(y&&"start"===r&&d||y&&"end"===r&&p||!y&&"start"===r&&m||!y&&"end"===r&&g);(f||v||w)&&(t.flipped=!0,(f||v)&&(i=s[l+1]),w&&(r=function(t){return"end"===t?"start":"start"===t?"end":t}(r)),t.placement=i+(r?"-"+r:""),t.offsets.popper=$({},t.offsets.popper,b(t.instance.popper,t.offsets.reference,t.placement)),t=E(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,o=i.popper,r=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[s?"left":"top"]=r[n]-(a?o[s?"width":"height"]:0),t.placement=_(e),t.offsets.popper=c(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!O(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=w(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,s=w(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==s&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a,l,h=void 0===s?e.gpuAcceleration:s,u=f(o(t.instance.popper)),c={position:r.position},d=j(r.left),p=j(r.top),m=j(r.bottom),g=j(r.right),v="bottom"===n?"top":"bottom",y="right"===i?"left":"right",_=T("transform");if(l="bottom"==v?-u.height+m:p,a="right"==y?-u.width+g:d,h&&_)c[_]="translate3d("+a+"px, "+l+"px, 0)",c[v]=0,c[y]=0,c.willChange="transform";else{var b="bottom"==v?-1:1,E="right"==y?-1:1;c[v]=l*b,c[y]=a*E,c.willChange=v+", "+y}var C={"x-placement":t.placement};return t.attributes=$({},C,t.attributes),t.styles=$({},c,t.styles),t.arrowStyles=$({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){return N(t.instance.popper,t.styles),function(t,e){Object.keys(e).forEach(function(n){!1===e[n]?t.removeAttribute(n):t.setAttribute(n,e[n])})}(t.instance.popper,t.attributes),t.arrowElement&&Object.keys(t.arrowStyles).length&&N(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,o){var r=v(0,e,t),s=g(n.placement,r,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),N(e,{position:"absolute"}),n},gpuAcceleration:void 0}}},Z}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");+function(t){var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),function(){function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),i=function(t){function e(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function n(t){return(t[0]||t).nodeType}function i(e){var n=this,i=!1;return t(this).one(s.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||s.triggerTransitionEnd(n)},e),this}var o=!1,r={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},s={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");return e||(e=t.getAttribute("href")||"",e=/^#[a-z]/i.test(e)?e:null),e},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(o.end)},supportsTransitionEnd:function(){return Boolean(o)},typeCheckConfig:function(t,i,o){for(var r in o)if(o.hasOwnProperty(r)){var s=o[r],a=i[r],l=a&&n(a)?"element":e(a);if(!new RegExp(s).test(l))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+l+'" but expected type "'+s+'".')}}};return o=function(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in r)if(void 0!==t.style[e])return{end:r[e]};return!1}(),t.fn.emulateTransitionEnd=i,s.supportsTransitionEnd()&&(t.event.special[s.TRANSITION_END]={bindType:o.end,delegateType:o.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}),s}(jQuery),o=(function(e){var o="bs.alert",r=e.fn.alert,s={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},a="alert",l="fade",h="show",u=function(){function r(e){t(this,r),this._element=e}return r.prototype.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},r.prototype.dispose=function(){e.removeData(this._element,o),this._element=null},r.prototype._getRootElement=function(t){var n=i.getSelectorFromElement(t),o=!1;return n&&(o=e(n)[0]),o||(o=e(t).closest("."+a)[0]),o},r.prototype._triggerCloseEvent=function(t){var n=e.Event(s.CLOSE);return e(t).trigger(n),n},r.prototype._removeElement=function(t){var n=this;e(t).removeClass(h),i.supportsTransitionEnd()&&e(t).hasClass(l)?e(t).one(i.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(150):this._destroyElement(t)},r.prototype._destroyElement=function(t){e(t).detach().trigger(s.CLOSED).remove()},r._jQueryInterface=function(t){return this.each(function(){var n=e(this),i=n.data(o);i||(i=new r(this),n.data(o,i)),"close"===t&&i[t](this)})},r._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},n(r,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),r}();e(document).on(s.CLICK_DATA_API,'[data-dismiss="alert"]',u._handleDismiss(new u)),e.fn.alert=u._jQueryInterface,e.fn.alert.Constructor=u,e.fn.alert.noConflict=function(){return e.fn.alert=r,u._jQueryInterface}}(jQuery),function(e){var i="bs.button",o="."+i,r=e.fn.button,s="active",a="btn",l="focus",h='[data-toggle^="button"]',u='[data-toggle="buttons"]',c="input",f=".active",d=".btn",p={CLICK_DATA_API:"click"+o+".data-api",FOCUS_BLUR_DATA_API:"focus"+o+".data-api blur"+o+".data-api"},m=function(){function o(e){t(this,o),this._element=e}return o.prototype.toggle=function(){var t=!0,n=e(this._element).closest(u)[0];if(n){var i=e(this._element).find(c)[0];if(i){if("radio"===i.type)if(i.checked&&e(this._element).hasClass(s))t=!1;else{var o=e(n).find(f)[0];o&&e(o).removeClass(s)}t&&(i.checked=!e(this._element).hasClass(s),e(i).trigger("change")),i.focus()}}this._element.setAttribute("aria-pressed",!e(this._element).hasClass(s)),t&&e(this._element).toggleClass(s)},o.prototype.dispose=function(){e.removeData(this._element,i),this._element=null},o._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(i);n||(n=new o(this),e(this).data(i,n)),"toggle"===t&&n[t]()})},n(o,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),o}();e(document).on(p.CLICK_DATA_API,h,function(t){t.preventDefault();var n=t.target;e(n).hasClass(a)||(n=e(n).closest(d)),m._jQueryInterface.call(e(n),"toggle")}).on(p.FOCUS_BLUR_DATA_API,h,function(t){var n=e(t.target).closest(d)[0];e(n).toggleClass(l,/^focus(in)?$/.test(t.type))}),e.fn.button=m._jQueryInterface,e.fn.button.Constructor=m,e.fn.button.noConflict=function(){return e.fn.button=r,m._jQueryInterface}}(jQuery),function(o){var r="carousel",s="bs.carousel",a="."+s,l=o.fn[r],h={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},u={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},f={SLIDE:"slide"+a,SLID:"slid"+a,KEYDOWN:"keydown"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a,LOAD_DATA_API:"load"+a+".data-api",CLICK_DATA_API:"click"+a+".data-api"},d="carousel",p="active",m="slide",g="carousel-item-right",v="carousel-item-left",y="carousel-item-next",_="carousel-item-prev",b={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},w=function(){function l(e,n){t(this,l),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(n),this._element=o(e)[0],this._indicatorsElement=o(this._element).find(b.INDICATORS)[0],this._addEventListeners()}return l.prototype.next=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(c.NEXT)},l.prototype.nextWhenVisible=function(){document.hidden||this.next()},l.prototype.prev=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(c.PREVIOUS)},l.prototype.pause=function(t){t||(this._isPaused=!0),o(this._element).find(b.NEXT_PREV)[0]&&i.supportsTransitionEnd()&&(i.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},l.prototype.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},l.prototype.to=function(t){var e=this;this._activeElement=o(this._element).find(b.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)o(this._element).one(f.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=t>n?c.NEXT:c.PREVIOUS;this._slide(i,this._items[t])}},l.prototype.dispose=function(){o(this._element).off(a),o.removeData(this._element,s),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},l.prototype._getConfig=function(t){return t=o.extend({},h,t),i.typeCheckConfig(r,t,u),t},l.prototype._addEventListeners=function(){var t=this;this._config.keyboard&&o(this._element).on(f.KEYDOWN,function(e){return t._keydown(e)}),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||o(this._element).on(f.MOUSEENTER,function(e){return t.pause(e)}).on(f.MOUSELEAVE,function(e){return t.cycle(e)})},l.prototype._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next();break;default:return}},l.prototype._getItemIndex=function(t){return this._items=o.makeArray(o(t).parent().find(b.ITEM)),this._items.indexOf(t)},l.prototype._getItemByDirection=function(t,e){var n=t===c.NEXT,i=t===c.PREVIOUS,o=this._getItemIndex(e),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return e;var s=(o+(t===c.PREVIOUS?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},l.prototype._triggerSlideEvent=function(t,e){var n=o.Event(f.SLIDE,{relatedTarget:t,direction:e});return o(this._element).trigger(n),n},l.prototype._setActiveIndicatorElement=function(t){if(this._indicatorsElement){o(this._indicatorsElement).find(b.ACTIVE).removeClass(p);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&o(e).addClass(p)}},l.prototype._slide=function(t,e){var n=this,r=o(this._element).find(b.ACTIVE_ITEM)[0],s=e||r&&this._getItemByDirection(t,r),a=Boolean(this._interval),l=void 0,h=void 0,u=void 0;if(t===c.NEXT?(l=v,h=y,u=c.LEFT):(l=g,h=_,u=c.RIGHT),s&&o(s).hasClass(p))this._isSliding=!1;else{if(!this._triggerSlideEvent(s,u).isDefaultPrevented()&&r&&s){this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(s);var d=o.Event(f.SLID,{relatedTarget:s,direction:u});i.supportsTransitionEnd()&&o(this._element).hasClass(m)?(o(s).addClass(h),i.reflow(s),o(r).addClass(l),o(s).addClass(l),o(r).one(i.TRANSITION_END,function(){o(s).removeClass(l+" "+h).addClass(p),o(r).removeClass(p+" "+h+" "+l),n._isSliding=!1,setTimeout(function(){return o(n._element).trigger(d)},0)}).emulateTransitionEnd(600)):(o(r).removeClass(p),o(s).addClass(p),this._isSliding=!1,o(this._element).trigger(d)),a&&this.cycle()}}},l._jQueryInterface=function(t){return this.each(function(){var n=o(this).data(s),i=o.extend({},h,o(this).data());"object"===(void 0===t?"undefined":e(t))&&o.extend(i,t);var r="string"==typeof t?t:i.slide;if(n||(n=new l(this,i),o(this).data(s,n)),"number"==typeof t)n.to(t);else if("string"==typeof r){if(void 0===n[r])throw new Error('No method named "'+r+'"');n[r]()}else i.interval&&(n.pause(),n.cycle())})},l._dataApiClickHandler=function(t){var e=i.getSelectorFromElement(this);if(e){var n=o(e)[0];if(n&&o(n).hasClass(d)){var r=o.extend({},o(n).data(),o(this).data()),a=this.getAttribute("data-slide-to");a&&(r.interval=!1),l._jQueryInterface.call(o(n),r),a&&o(n).data(s).to(a),t.preventDefault()}}},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return h}}]),l}();o(document).on(f.CLICK_DATA_API,b.DATA_SLIDE,w._dataApiClickHandler),o(window).on(f.LOAD_DATA_API,function(){o(b.DATA_RIDE).each(function(){var t=o(this);w._jQueryInterface.call(t,t.data())})}),o.fn[r]=w._jQueryInterface,o.fn[r].Constructor=w,o.fn[r].noConflict=function(){return o.fn[r]=l,w._jQueryInterface}}(jQuery),function(o){var r="collapse",s="bs.collapse",a="."+s,l=o.fn[r],h={toggle:!0,parent:""},u={toggle:"boolean",parent:"string"},c={SHOW:"show"+a,SHOWN:"shown"+a,HIDE:"hide"+a,HIDDEN:"hidden"+a,CLICK_DATA_API:"click"+a+".data-api"},f="show",d="collapse",p="collapsing",m="collapsed",g="width",v="height",y=".card > .show, .card > .collapsing",_='[data-toggle="collapse"]',b=function(){function a(e,n){t(this,a),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=o.makeArray(o('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]')),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return a.prototype.toggle=function(){o(this._element).hasClass(f)?this.hide():this.show()},a.prototype.show=function(){var t=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(!o(this._element).hasClass(f)){var e=void 0,n=void 0;if(this._parent&&((e=o.makeArray(o(this._parent).find(y))).length||(e=null)),!(e&&(n=o(e).data(s))&&n._isTransitioning)){var r=o.Event(c.SHOW);if(o(this._element).trigger(r),!r.isDefaultPrevented()){e&&(a._jQueryInterface.call(o(e),"hide"),n||o(e).data(s,null));var l=this._getDimension();o(this._element).removeClass(d).addClass(p),this._element.style[l]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&o(this._triggerArray).removeClass(m).attr("aria-expanded",!0),this.setTransitioning(!0);var h=function(){o(t._element).removeClass(p).addClass(d).addClass(f),t._element.style[l]="",t.setTransitioning(!1),o(t._element).trigger(c.SHOWN)};if(i.supportsTransitionEnd()){var u="scroll"+(l[0].toUpperCase()+l.slice(1));o(this._element).one(i.TRANSITION_END,h).emulateTransitionEnd(600),this._element.style[l]=this._element[u]+"px"}else h()}}}},a.prototype.hide=function(){var t=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(o(this._element).hasClass(f)){var e=o.Event(c.HIDE);if(o(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension(),r=n===g?"offsetWidth":"offsetHeight";this._element.style[n]=this._element[r]+"px",i.reflow(this._element),o(this._element).addClass(p).removeClass(d).removeClass(f),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&o(this._triggerArray).addClass(m).attr("aria-expanded",!1),this.setTransitioning(!0);var s=function(){t.setTransitioning(!1),o(t._element).removeClass(p).addClass(d).trigger(c.HIDDEN)};this._element.style[n]="",i.supportsTransitionEnd()?o(this._element).one(i.TRANSITION_END,s).emulateTransitionEnd(600):s()}}},a.prototype.setTransitioning=function(t){this._isTransitioning=t},a.prototype.dispose=function(){o.removeData(this._element,s),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},a.prototype._getConfig=function(t){return t=o.extend({},h,t),t.toggle=Boolean(t.toggle),i.typeCheckConfig(r,t,u),t},a.prototype._getDimension=function(){return o(this._element).hasClass(g)?g:v},a.prototype._getParent=function(){var t=this,e=o(this._config.parent)[0],n='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return o(e).find(n).each(function(e,n){t._addAriaAndCollapsedClass(a._getTargetFromElement(n),[n])}),e},a.prototype._addAriaAndCollapsedClass=function(t,e){if(t){var n=o(t).hasClass(f);t.setAttribute("aria-expanded",n),e.length&&o(e).toggleClass(m,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(t){var e=i.getSelectorFromElement(t);return e?o(e)[0]:null},a._jQueryInterface=function(t){return this.each(function(){var n=o(this),i=n.data(s),r=o.extend({},h,n.data(),"object"===(void 0===t?"undefined":e(t))&&t);if(!i&&r.toggle&&/show|hide/.test(t)&&(r.toggle=!1),i||(i=new a(this,r),n.data(s,i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t]()}})},n(a,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return h}}]),a}();o(document).on(c.CLICK_DATA_API,_,function(t){t.preventDefault();var e=b._getTargetFromElement(this),n=o(e).data(s)?"toggle":o(this).data();b._jQueryInterface.call(o(e),n)}),o.fn[r]=b._jQueryInterface,o.fn[r].Constructor=b,o.fn[r].noConflict=function(){return o.fn[r]=l,b._jQueryInterface}}(jQuery),function(e){var o="dropdown",r="bs.dropdown",s="."+r,a=e.fn[o],l={HIDE:"hide"+s,HIDDEN:"hidden"+s,SHOW:"show"+s,SHOWN:"shown"+s,CLICK:"click"+s,CLICK_DATA_API:"click"+s+".data-api",FOCUSIN_DATA_API:"focusin"+s+".data-api",KEYDOWN_DATA_API:"keydown"+s+".data-api"},h="dropdown-backdrop",u="disabled",c="show",f=".dropdown-backdrop",d='[data-toggle="dropdown"]',p=".dropdown form",m='[role="menu"]',g='[role="listbox"]',v=".navbar-nav",y='[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a',_=function(){function o(e){t(this,o),this._element=e,this._addEventListeners()}return o.prototype.toggle=function(){if(this.disabled||e(this).hasClass(u))return!1;var t=o._getParentFromElement(this),n=e(t).hasClass(c);if(o._clearMenus(),n)return!1;if("ontouchstart"in document.documentElement&&!e(t).closest(v).length){var i=document.createElement("div");i.className=h,e(i).insertBefore(this),e(i).on("click",o._clearMenus)}var r={relatedTarget:this},s=e.Event(l.SHOW,r);return e(t).trigger(s),!s.isDefaultPrevented()&&(this.focus(),this.setAttribute("aria-expanded",!0),e(t).toggleClass(c),e(t).trigger(e.Event(l.SHOWN,r)),!1)},o.prototype.dispose=function(){e.removeData(this._element,r),e(this._element).off(s),this._element=null},o.prototype._addEventListeners=function(){e(this._element).on(l.CLICK,this.toggle)},o._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(r);if(n||(n=new o(this),e(this).data(r,n)),"string"==typeof t){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t].call(this)}})},o._clearMenus=function(t){if(!t||3!==t.which){var n=e(f)[0];n&&n.parentNode.removeChild(n);for(var i=e.makeArray(e(d)),r=0;r<i.length;r++){var s=o._getParentFromElement(i[r]),a={relatedTarget:i[r]};if(e(s).hasClass(c)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"focusin"===t.type)&&e.contains(s,t.target))){var h=e.Event(l.HIDE,a);e(s).trigger(h),h.isDefaultPrevented()||(i[r].setAttribute("aria-expanded","false"),e(s).removeClass(c).trigger(e.Event(l.HIDDEN,a)))}}}},o._getParentFromElement=function(t){var n=void 0,o=i.getSelectorFromElement(t);return o&&(n=e(o)[0]),n||t.parentNode},o._dataApiKeydownHandler=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(u))){var n=o._getParentFromElement(this),i=e(n).hasClass(c);if(!i&&27!==t.which||i&&27===t.which){if(27===t.which){var r=e(n).find(d)[0];e(r).trigger("focus")}e(this).trigger("click")}else{var s=e(n).find(y).get();if(s.length){var a=s.indexOf(t.target);38===t.which&&a>0&&a--,40===t.which&&a<s.length-1&&a++,a<0&&(a=0),s[a].focus()}}}},n(o,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),o}();e(document).on(l.KEYDOWN_DATA_API,d,_._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,m,_._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,g,_._dataApiKeydownHandler).on(l.CLICK_DATA_API+" "+l.FOCUSIN_DATA_API,_._clearMenus).on(l.CLICK_DATA_API,d,_.prototype.toggle).on(l.CLICK_DATA_API,p,function(t){t.stopPropagation()}),e.fn[o]=_._jQueryInterface,e.fn[o].Constructor=_,e.fn[o].noConflict=function(){return e.fn[o]=a,_._jQueryInterface}}(jQuery),function(o){var r="bs.modal",s="."+r,a=o.fn.modal,l={backdrop:!0,keyboard:!0,focus:!0,show:!0},h={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},u={HIDE:"hide"+s,HIDDEN:"hidden"+s,SHOW:"show"+s,SHOWN:"shown"+s,FOCUSIN:"focusin"+s,RESIZE:"resize"+s,CLICK_DISMISS:"click.dismiss"+s,KEYDOWN_DISMISS:"keydown.dismiss"+s,MOUSEUP_DISMISS:"mouseup.dismiss"+s,MOUSEDOWN_DISMISS:"mousedown.dismiss"+s,CLICK_DATA_API:"click.bs.modal.data-api"},c="modal-scrollbar-measure",f="modal-backdrop",d="modal-open",p="fade",m="show",g={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"},v=function(){function a(e,n){t(this,a),this._config=this._getConfig(n),this._element=e,this._dialog=o(e).find(g.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return a.prototype.toggle=function(t){return this._isShown?this.hide():this.show(t)},a.prototype.show=function(t){var e=this;if(this._isTransitioning)throw new Error("Modal is transitioning");i.supportsTransitionEnd()&&o(this._element).hasClass(p)&&(this._isTransitioning=!0);var n=o.Event(u.SHOW,{relatedTarget:t});o(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),o(document.body).addClass(d),this._setEscapeEvent(),this._setResizeEvent(),o(this._element).on(u.CLICK_DISMISS,g.DATA_DISMISS,function(t){return e.hide(t)}),o(this._dialog).on(u.MOUSEDOWN_DISMISS,function(){o(e._element).one(u.MOUSEUP_DISMISS,function(t){o(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))},a.prototype.hide=function(t){var e=this;if(t&&t.preventDefault(),this._isTransitioning)throw new Error("Modal is transitioning");var n=i.supportsTransitionEnd()&&o(this._element).hasClass(p);n&&(this._isTransitioning=!0);var r=o.Event(u.HIDE);o(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),o(document).off(u.FOCUSIN),o(this._element).removeClass(m),o(this._element).off(u.CLICK_DISMISS),o(this._dialog).off(u.MOUSEDOWN_DISMISS),n?o(this._element).one(i.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal())},a.prototype.dispose=function(){o.removeData(this._element,r),o(window,document,this._element,this._backdrop).off(s),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null},a.prototype._getConfig=function(t){return t=o.extend({},l,t),i.typeCheckConfig("modal",t,h),t},a.prototype._showElement=function(t){var e=this,n=i.supportsTransitionEnd()&&o(this._element).hasClass(p);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&i.reflow(this._element),o(this._element).addClass(m),this._config.focus&&this._enforceFocus();var r=o.Event(u.SHOWN,{relatedTarget:t}),s=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,o(e._element).trigger(r)};n?o(this._dialog).one(i.TRANSITION_END,s).emulateTransitionEnd(300):s()},a.prototype._enforceFocus=function(){var t=this;o(document).off(u.FOCUSIN).on(u.FOCUSIN,function(e){document===e.target||t._element===e.target||o(t._element).has(e.target).length||t._element.focus()})},a.prototype._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?o(this._element).on(u.KEYDOWN_DISMISS,function(e){27===e.which&&t.hide()}):this._isShown||o(this._element).off(u.KEYDOWN_DISMISS)},a.prototype._setResizeEvent=function(){var t=this;this._isShown?o(window).on(u.RESIZE,function(e){return t._handleUpdate(e)}):o(window).off(u.RESIZE)},a.prototype._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._isTransitioning=!1,this._showBackdrop(function(){o(document.body).removeClass(d),t._resetAdjustments(),t._resetScrollbar(),o(t._element).trigger(u.HIDDEN)})},a.prototype._removeBackdrop=function(){this._backdrop&&(o(this._backdrop).remove(),this._backdrop=null)},a.prototype._showBackdrop=function(t){var e=this,n=o(this._element).hasClass(p)?p:"";if(this._isShown&&this._config.backdrop){var r=i.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className=f,n&&o(this._backdrop).addClass(n),o(this._backdrop).appendTo(document.body),o(this._element).on(u.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),r&&i.reflow(this._backdrop),o(this._backdrop).addClass(m),!t)return;if(!r)return void t();o(this._backdrop).one(i.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){o(this._backdrop).removeClass(m);var s=function(){e._removeBackdrop(),t&&t()};i.supportsTransitionEnd()&&o(this._element).hasClass(p)?o(this._backdrop).one(i.TRANSITION_END,s).emulateTransitionEnd(150):s()}else t&&t()},a.prototype._handleUpdate=function(){this._adjustDialog()},a.prototype._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},a.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},a.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},a.prototype._setScrollbar=function(){var t=parseInt(o(g.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=t+this._scrollbarWidth+"px")},a.prototype._resetScrollbar=function(){document.body.style.paddingRight=this._originalBodyPadding},a.prototype._getScrollbarWidth=function(){var t=document.createElement("div");t.className=c,document.body.appendChild(t);var e=t.offsetWidth-t.clientWidth;return document.body.removeChild(t),e},a._jQueryInterface=function(t,n){return this.each(function(){var i=o(this).data(r),s=o.extend({},a.Default,o(this).data(),"object"===(void 0===t?"undefined":e(t))&&t);if(i||(i=new a(this,s),o(this).data(r,i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t](n)}else s.show&&i.show(n)})},n(a,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return l}}]),a}();o(document).on(u.CLICK_DATA_API,g.DATA_TOGGLE,function(t){var e=this,n=void 0,s=i.getSelectorFromElement(this);s&&(n=o(s)[0]);var a=o(n).data(r)?"toggle":o.extend({},o(n).data(),o(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var l=o(n).one(u.SHOW,function(t){t.isDefaultPrevented()||l.one(u.HIDDEN,function(){o(e).is(":visible")&&e.focus()})});v._jQueryInterface.call(o(n),a,this)}),o.fn.modal=v._jQueryInterface,o.fn.modal.Constructor=v,o.fn.modal.noConflict=function(){return o.fn.modal=a,v._jQueryInterface}}(jQuery),function(o){var r="scrollspy",s="bs.scrollspy",a="."+s,l=o.fn[r],h={offset:10,method:"auto",target:""},u={offset:"number",method:"string",target:"(string|element)"},c={ACTIVATE:"activate"+a,SCROLL:"scroll"+a,LOAD_DATA_API:"load"+a+".data-api"},f="dropdown-item",d="active",p={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",LIST_ITEM:".list-item",LI:"li",LI_DROPDOWN:"li.dropdown",NAV_LINKS:".nav-link",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},m="offset",g="position",v=function(){function l(e,n){var i=this;t(this,l),this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+p.NAV_LINKS+","+this._config.target+" "+p.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,o(this._scrollElement).on(c.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}return l.prototype.refresh=function(){var t=this,e=this._scrollElement!==this._scrollElement.window?g:m,n="auto"===this._config.method?e:this._config.method,r=n===g?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();o.makeArray(o(this._selector)).map(function(t){var e=void 0,s=i.getSelectorFromElement(t);return s&&(e=o(s)[0]),e&&(e.offsetWidth||e.offsetHeight)?[o(e)[n]().top+r,s]:null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},l.prototype.dispose=function(){o.removeData(this._element,s),o(this._scrollElement).off(a),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},l.prototype._getConfig=function(t){if("string"!=typeof(t=o.extend({},h,t)).target){var e=o(t.target).attr("id");e||(e=i.getUID(r),o(t.target).attr("id",e)),t.target="#"+e}return i.typeCheckConfig(r,t,u),t},l.prototype._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},l.prototype._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},l.prototype._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.offsetHeight},l.prototype._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}}},l.prototype._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",");e=e.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var n=o(e.join(","));n.hasClass(f)?(n.closest(p.DROPDOWN).find(p.DROPDOWN_TOGGLE).addClass(d),n.addClass(d)):n.parents(p.LI).find("> "+p.NAV_LINKS).addClass(d),o(this._scrollElement).trigger(c.ACTIVATE,{relatedTarget:t})},l.prototype._clear=function(){o(this._selector).filter(p.ACTIVE).removeClass(d)},l._jQueryInterface=function(t){return this.each(function(){var n=o(this).data(s),i="object"===(void 0===t?"undefined":e(t))&&t;if(n||(n=new l(this,i),o(this).data(s,n)),"string"==typeof t){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return h}}]),l}();o(window).on(c.LOAD_DATA_API,function(){for(var t=o.makeArray(o(p.DATA_SPY)),e=t.length;e--;){var n=o(t[e]);v._jQueryInterface.call(n,n.data())}}),o.fn[r]=v._jQueryInterface,o.fn[r].Constructor=v,o.fn[r].noConflict=function(){return o.fn[r]=l,v._jQueryInterface}}(jQuery),function(e){var o=".bs.tab",r=e.fn.tab,s={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,CLICK_DATA_API:"click.bs.tab.data-api"},a="dropdown-menu",l="active",h="disabled",u="fade",c="show",f=".dropdown",d="ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)",p="> .nav-item .fade, > .fade",m=".active",g="> .nav-item > .active, > .active",v='[data-toggle="tab"], [data-toggle="pill"]',y=".dropdown-toggle",_="> .dropdown-menu .active",b=function(){function o(e){t(this,o),this._element=e}return o.prototype.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(l)||e(this._element).hasClass(h))){var n=void 0,o=void 0,r=e(this._element).closest(d)[0],a=i.getSelectorFromElement(this._element);r&&(o=(o=e.makeArray(e(r).find(m)))[o.length-1]);var u=e.Event(s.HIDE,{relatedTarget:this._element}),c=e.Event(s.SHOW,{relatedTarget:o});if(o&&e(o).trigger(u),e(this._element).trigger(c),!c.isDefaultPrevented()&&!u.isDefaultPrevented()){a&&(n=e(a)[0]),this._activate(this._element,r);var f=function(){var n=e.Event(s.HIDDEN,{relatedTarget:t._element}),i=e.Event(s.SHOWN,{relatedTarget:o});e(o).trigger(n),e(t._element).trigger(i)};n?this._activate(n,n.parentNode,f):f()}}},o.prototype.dispose=function(){e.removeClass(this._element,"bs.tab"),this._element=null},o.prototype._activate=function(t,n,o){var r=this,s=e(n).find(g)[0],a=o&&i.supportsTransitionEnd()&&(s&&e(s).hasClass(u)||Boolean(e(n).find(p)[0])),l=function(){return r._transitionComplete(t,s,a,o)};s&&a?e(s).one(i.TRANSITION_END,l).emulateTransitionEnd(150):l(),s&&e(s).removeClass(c)},o.prototype._transitionComplete=function(t,n,o,r){if(n){e(n).removeClass(l);var s=e(n.parentNode).find(_)[0];s&&e(s).removeClass(l),n.setAttribute("aria-expanded",!1)}if(e(t).addClass(l),t.setAttribute("aria-expanded",!0),o?(i.reflow(t),e(t).addClass(c)):e(t).removeClass(u),t.parentNode&&e(t.parentNode).hasClass(a)){var h=e(t).closest(f)[0];h&&e(h).find(y).addClass(l),t.setAttribute("aria-expanded",!0)}r&&r()},o._jQueryInterface=function(t){return this.each(function(){var n=e(this),i=n.data("bs.tab");if(i||(i=new o(this),n.data("bs.tab",i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t]()}})},n(o,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),o}();e(document).on(s.CLICK_DATA_API,v,function(t){t.preventDefault(),b._jQueryInterface.call(e(this),"show")}),e.fn.tab=b._jQueryInterface,e.fn.tab.Constructor=b,e.fn.tab.noConflict=function(){return e.fn.tab=r,b._jQueryInterface}}(jQuery),function(o){if("undefined"==typeof Tether)throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");var r="tooltip",s="bs.tooltip",a="."+s,l=o.fn[r],h={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:"0 0",constraints:[],container:!1},u={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"string",constraints:"array",container:"(string|element|boolean)"},c={TOP:"bottom center",RIGHT:"middle left",BOTTOM:"top center",LEFT:"middle right"},f="show",d="out",p={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,INSERTED:"inserted"+a,CLICK:"click"+a,FOCUSIN:"focusin"+a,FOCUSOUT:"focusout"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a},m="fade",g="show",v=".tooltip-inner",y={element:!1,enabled:!1},_="hover",b="focus",w="click",E="manual",C=function(){function l(e,n){t(this,l),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._isTransitioning=!1,this._tether=null,this.element=e,this.config=this._getConfig(n),this.tip=null,this._setListeners()}return l.prototype.enable=function(){this._isEnabled=!0},l.prototype.disable=function(){this._isEnabled=!1},l.prototype.toggleEnabled=function(){this._isEnabled=!this._isEnabled},l.prototype.toggle=function(t){if(t){var e=this.constructor.DATA_KEY,n=o(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),o(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(o(this.getTipElement()).hasClass(g))return void this._leave(null,this);this._enter(null,this)}},l.prototype.dispose=function(){clearTimeout(this._timeout),this.cleanupTether(),o.removeData(this.element,this.constructor.DATA_KEY),o(this.element).off(this.constructor.EVENT_KEY),o(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&o(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._tether=null,this.element=null,this.config=null,this.tip=null},l.prototype.show=function(){var t=this;if("none"===o(this.element).css("display"))throw new Error("Please use show on visible elements");var e=o.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){if(this._isTransitioning)throw new Error("Tooltip is transitioning");o(this.element).trigger(e);var n=o.contains(this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!n)return;var r=this.getTipElement(),s=i.getUID(this.constructor.NAME);r.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&o(r).addClass(m);var a="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,h=this._getAttachment(a),u=!1===this.config.container?document.body:o(this.config.container);o(r).data(this.constructor.DATA_KEY,this).appendTo(u),o(this.element).trigger(this.constructor.Event.INSERTED),this._tether=new Tether({attachment:h,element:r,target:this.element,classes:y,classPrefix:"bs-tether",offset:this.config.offset,constraints:this.config.constraints,addTargetClasses:!1}),i.reflow(r),this._tether.position(),o(r).addClass(g);var c=function(){var e=t._hoverState;t._hoverState=null,t._isTransitioning=!1,o(t.element).trigger(t.constructor.Event.SHOWN),e===d&&t._leave(null,t)};if(i.supportsTransitionEnd()&&o(this.tip).hasClass(m))return this._isTransitioning=!0,void o(this.tip).one(i.TRANSITION_END,c).emulateTransitionEnd(l._TRANSITION_DURATION);c()}},l.prototype.hide=function(t){var e=this,n=this.getTipElement(),r=o.Event(this.constructor.Event.HIDE);if(this._isTransitioning)throw new Error("Tooltip is transitioning");var s=function(){e._hoverState!==f&&n.parentNode&&n.parentNode.removeChild(n),e.element.removeAttribute("aria-describedby"),o(e.element).trigger(e.constructor.Event.HIDDEN),e._isTransitioning=!1,e.cleanupTether(),t&&t()};o(this.element).trigger(r),r.isDefaultPrevented()||(o(n).removeClass(g),this._activeTrigger[w]=!1,this._activeTrigger[b]=!1,this._activeTrigger[_]=!1,i.supportsTransitionEnd()&&o(this.tip).hasClass(m)?(this._isTransitioning=!0,o(n).one(i.TRANSITION_END,s).emulateTransitionEnd(150)):s(),this._hoverState="")},l.prototype.isWithContent=function(){return Boolean(this.getTitle())},l.prototype.getTipElement=function(){return this.tip=this.tip||o(this.config.template)[0]},l.prototype.setContent=function(){var t=o(this.getTipElement());this.setElementContent(t.find(v),this.getTitle()),t.removeClass(m+" "+g),this.cleanupTether()},l.prototype.setElementContent=function(t,n){var i=this.config.html;"object"===(void 0===n?"undefined":e(n))&&(n.nodeType||n.jquery)?i?o(n).parent().is(t)||t.empty().append(n):t.text(o(n).text()):t[i?"html":"text"](n)},l.prototype.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},l.prototype.cleanupTether=function(){this._tether&&this._tether.destroy()},l.prototype._getAttachment=function(t){return c[t.toUpperCase()]},l.prototype._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach(function(e){if("click"===e)o(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(e!==E){var n=e===_?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=e===_?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;o(t.element).on(n,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}o(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=o.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},l.prototype._fixTitle=function(){var t=e(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},l.prototype._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||o(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),o(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?b:_]=!0),o(e.getTipElement()).hasClass(g)||e._hoverState===f?e._hoverState=f:(clearTimeout(e._timeout),e._hoverState=f,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===f&&e.show()},e.config.delay.show):e.show())},l.prototype._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||o(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),o(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?b:_]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=d,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===d&&e.hide()},e.config.delay.hide):e.hide())},l.prototype._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},l.prototype._getConfig=function(t){return(t=o.extend({},this.constructor.Default,o(this.element).data(),t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),i.typeCheckConfig(r,t,this.constructor.DefaultType),t},l.prototype._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},l._jQueryInterface=function(t){return this.each(function(){var n=o(this).data(s),i="object"===(void 0===t?"undefined":e(t))&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new l(this,i),o(this).data(s,n)),"string"==typeof t)){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return h}},{key:"NAME",get:function(){return r}},{key:"DATA_KEY",get:function(){return s}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return a}},{key:"DefaultType",get:function(){return u}}]),l}();return o.fn[r]=C._jQueryInterface,o.fn[r].Constructor=C,o.fn[r].noConflict=function(){return o.fn[r]=l,C._jQueryInterface},C}(jQuery));!function(i){var r="popover",s="bs.popover",a="."+s,l=i.fn[r],h=i.extend({},o.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),u=i.extend({},o.DefaultType,{content:"(string|element|function)"}),c="fade",f="show",d=".popover-title",p=".popover-content",m={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,INSERTED:"inserted"+a,CLICK:"click"+a,FOCUSIN:"focusin"+a,FOCUSOUT:"focusout"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a},g=function(o){function l(){return t(this,l),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,o.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(l,o),l.prototype.isWithContent=function(){return this.getTitle()||this._getContent()},l.prototype.getTipElement=function(){return this.tip=this.tip||i(this.config.template)[0]},l.prototype.setContent=function(){var t=i(this.getTipElement());this.setElementContent(t.find(d),this.getTitle()),this.setElementContent(t.find(p),this._getContent()),t.removeClass(c+" "+f),this.cleanupTether()},l.prototype._getContent=function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)},l._jQueryInterface=function(t){return this.each(function(){var n=i(this).data(s),o="object"===(void 0===t?"undefined":e(t))?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new l(this,o),i(this).data(s,n)),"string"==typeof t)){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},n(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return h}},{key:"NAME",get:function(){return r}},{key:"DATA_KEY",get:function(){return s}},{key:"Event",get:function(){return m}},{key:"EVENT_KEY",get:function(){return a}},{key:"DefaultType",get:function(){return u}}]),l}(o);i.fn[r]=g._jQueryInterface,i.fn[r].Constructor=g,i.fn[r].noConflict=function(){return i.fn[r]=l,g._jQueryInterface}}(jQuery)}();var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},windowIsDefined="object"===("undefined"==typeof window?"undefined":_typeof(window));!function(t){if("function"==typeof define&&define.amd)define(["jquery"],t);else if("object"===("undefined"==typeof module?"undefined":_typeof(module))&&module.exports){var e;try{e=require("jquery")}catch(t){e=null}module.exports=t(e)}else window&&(window.Slider=t(window.jQuery))}(function(t){windowIsDefined&&!window.console&&(window.console={}),windowIsDefined&&!window.console.log&&(window.console.log=function(){}),windowIsDefined&&!window.console.warn&&(window.console.warn=function(){});var e;return function(t){var e=Array.prototype.slice;!function(t){if(t){var n="undefined"==typeof console?function(){}:function(t){console.error(t)};t.bridget=function(i,o){(function(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})})(o),function(i,o){t.fn[i]=function(r){if("string"==typeof r){for(var s=e.call(arguments,1),a=0,l=this.length;l>a;a++){var h=this[a],u=t.data(h,i);if(u)if(t.isFunction(u[r])&&"_"!==r.charAt(0)){var c=u[r].apply(u,s);if(void 0!==c&&c!==u)return c}else n("no such method '"+r+"' for "+i+" instance");else n("cannot call methods on "+i+" prior to initialization; attempted to call '"+r+"'")}return this}var f=this.map(function(){var e=t.data(this,i);return e?(e.option(r),e._init()):(e=new o(this,r),t.data(this,i,e)),t(this)});return!f||f.length>1?f:f[0]}}(i,o)},t.bridget}}(t)}(t),function(t){function n(e,n){function i(t,e){var n="data-slider-"+e.replace(/_/g,"-"),i=t.getAttribute(n);try{return JSON.parse(i)}catch(t){return i}}this._state={value:null,enabled:null,offset:null,size:null,percentage:null,inDrag:!1,over:!1},this.ticksCallbackMap={},this.handleCallbackMap={},"string"==typeof e?this.element=document.querySelector(e):e instanceof HTMLElement&&(this.element=e),n=n||{};for(var r=Object.keys(this.defaultOptions),s=0;s<r.length;s++){var a=r[s],l=n[a];l=null!==(l=void 0!==l?l:i(this.element,a))?l:this.defaultOptions[a],this.options||(this.options={}),this.options[a]=l}"auto"===this.options.rtl&&(this.options.rtl="rtl"===window.getComputedStyle(this.element).direction),"vertical"!==this.options.orientation||"top"!==this.options.tooltip_position&&"bottom"!==this.options.tooltip_position?"horizontal"!==this.options.orientation||"left"!==this.options.tooltip_position&&"right"!==this.options.tooltip_position||(this.options.tooltip_position="top"):this.options.rtl?this.options.tooltip_position="left":this.options.tooltip_position="right";var h,u,c,f,d,p=this.element.style.width,m=!1,g=this.element.parentNode;if(this.sliderElem)m=!0;else{this.sliderElem=document.createElement("div"),this.sliderElem.className="slider";var v=document.createElement("div");v.className="slider-track",(u=document.createElement("div")).className="slider-track-low",(h=document.createElement("div")).className="slider-selection",(c=document.createElement("div")).className="slider-track-high",(f=document.createElement("div")).className="slider-handle min-slider-handle",f.setAttribute("role","slider"),f.setAttribute("aria-valuemin",this.options.min),f.setAttribute("aria-valuemax",this.options.max),(d=document.createElement("div")).className="slider-handle max-slider-handle",d.setAttribute("role","slider"),d.setAttribute("aria-valuemin",this.options.min),d.setAttribute("aria-valuemax",this.options.max),v.appendChild(u),v.appendChild(h),v.appendChild(c),this.rangeHighlightElements=[];var y=this.options.rangeHighlights;if(Array.isArray(y)&&y.length>0)for(var _=0;_<y.length;_++){var b=document.createElement("div"),w=y[_].class||"";b.className="slider-rangeHighlight slider-selection "+w,this.rangeHighlightElements.push(b),v.appendChild(b)}var E=Array.isArray(this.options.labelledby);if(E&&this.options.labelledby[0]&&f.setAttribute("aria-labelledby",this.options.labelledby[0]),E&&this.options.labelledby[1]&&d.setAttribute("aria-labelledby",this.options.labelledby[1]),!E&&this.options.labelledby&&(f.setAttribute("aria-labelledby",this.options.labelledby),d.setAttribute("aria-labelledby",this.options.labelledby)),this.ticks=[],Array.isArray(this.options.ticks)&&this.options.ticks.length>0){for(this.ticksContainer=document.createElement("div"),this.ticksContainer.className="slider-tick-container",s=0;s<this.options.ticks.length;s++){var C=document.createElement("div");if(C.className="slider-tick",this.options.ticks_tooltip){var T=this._addTickListener(),x=T.addMouseEnter(this,C,s),k=T.addMouseLeave(this,C);this.ticksCallbackMap[s]={mouseEnter:x,mouseLeave:k}}this.ticks.push(C),this.ticksContainer.appendChild(C)}h.className+=" tick-slider-selection"}if(this.tickLabels=[],Array.isArray(this.options.ticks_labels)&&this.options.ticks_labels.length>0)for(this.tickLabelContainer=document.createElement("div"),this.tickLabelContainer.className="slider-tick-label-container",s=0;s<this.options.ticks_labels.length;s++){var A=document.createElement("div"),S=0===this.options.ticks_positions.length,D=this.options.reversed&&S?this.options.ticks_labels.length-(s+1):s;A.className="slider-tick-label",A.innerHTML=this.options.ticks_labels[D],this.tickLabels.push(A),this.tickLabelContainer.appendChild(A)}var N=function(t){var e=document.createElement("div");e.className="tooltip-arrow";var n=document.createElement("div");n.className="tooltip-inner",t.appendChild(e),t.appendChild(n)},O=document.createElement("div");O.className="tooltip tooltip-main",O.setAttribute("role","presentation"),N(O);var I=document.createElement("div");I.className="tooltip tooltip-min",I.setAttribute("role","presentation"),N(I);var L=document.createElement("div");L.className="tooltip tooltip-max",L.setAttribute("role","presentation"),N(L),this.sliderElem.appendChild(v),this.sliderElem.appendChild(O),this.sliderElem.appendChild(I),this.sliderElem.appendChild(L),this.tickLabelContainer&&this.sliderElem.appendChild(this.tickLabelContainer),this.ticksContainer&&this.sliderElem.appendChild(this.ticksContainer),this.sliderElem.appendChild(f),this.sliderElem.appendChild(d),g.insertBefore(this.sliderElem,this.element),this.element.style.display="none"}if(t&&(this.$element=t(this.element),this.$sliderElem=t(this.sliderElem)),this.eventToCallbackMap={},this.sliderElem.id=this.options.id,this.touchCapable="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch,this.touchX=0,this.touchY=0,this.tooltip=this.sliderElem.querySelector(".tooltip-main"),this.tooltipInner=this.tooltip.querySelector(".tooltip-inner"),this.tooltip_min=this.sliderElem.querySelector(".tooltip-min"),this.tooltipInner_min=this.tooltip_min.querySelector(".tooltip-inner"),this.tooltip_max=this.sliderElem.querySelector(".tooltip-max"),this.tooltipInner_max=this.tooltip_max.querySelector(".tooltip-inner"),o[this.options.scale]&&(this.options.scale=o[this.options.scale]),!0===m&&(this._removeClass(this.sliderElem,"slider-horizontal"),this._removeClass(this.sliderElem,"slider-vertical"),this._removeClass(this.sliderElem,"slider-rtl"),this._removeClass(this.tooltip,"hide"),this._removeClass(this.tooltip_min,"hide"),this._removeClass(this.tooltip_max,"hide"),["left","right","top","width","height"].forEach(function(t){this._removeProperty(this.trackLow,t),this._removeProperty(this.trackSelection,t),this._removeProperty(this.trackHigh,t)},this),[this.handle1,this.handle2].forEach(function(t){this._removeProperty(t,"left"),this._removeProperty(t,"right"),this._removeProperty(t,"top")},this),[this.tooltip,this.tooltip_min,this.tooltip_max].forEach(function(t){this._removeProperty(t,"left"),this._removeProperty(t,"right"),this._removeProperty(t,"top"),this._removeClass(t,"right"),this._removeClass(t,"left"),this._removeClass(t,"top")},this)),"vertical"===this.options.orientation?(this._addClass(this.sliderElem,"slider-vertical"),this.stylePos="top",this.mousePos="pageY",this.sizePos="offsetHeight"):(this._addClass(this.sliderElem,"slider-horizontal"),this.sliderElem.style.width=p,this.options.orientation="horizontal",this.options.rtl?this.stylePos="right":this.stylePos="left",this.mousePos="pageX",this.sizePos="offsetWidth"),this.options.rtl&&this._addClass(this.sliderElem,"slider-rtl"),this._setTooltipPosition(),Array.isArray(this.options.ticks)&&this.options.ticks.length>0&&(this.options.max=Math.max.apply(Math,this.options.ticks),this.options.min=Math.min.apply(Math,this.options.ticks)),Array.isArray(this.options.value)?(this.options.range=!0,this._state.value=this.options.value):this.options.range?this._state.value=[this.options.value,this.options.max]:this._state.value=this.options.value,this.trackLow=u||this.trackLow,this.trackSelection=h||this.trackSelection,this.trackHigh=c||this.trackHigh,"none"===this.options.selection?(this._addClass(this.trackLow,"hide"),this._addClass(this.trackSelection,"hide"),this._addClass(this.trackHigh,"hide")):("after"===this.options.selection||"before"===this.options.selection)&&(this._removeClass(this.trackLow,"hide"),this._removeClass(this.trackSelection,"hide"),this._removeClass(this.trackHigh,"hide")),this.handle1=f||this.handle1,this.handle2=d||this.handle2,!0===m)for(this._removeClass(this.handle1,"round triangle"),this._removeClass(this.handle2,"round triangle hide"),s=0;s<this.ticks.length;s++)this._removeClass(this.ticks[s],"round triangle hide");if(-1!==["round","triangle","custom"].indexOf(this.options.handle))for(this._addClass(this.handle1,this.options.handle),this._addClass(this.handle2,this.options.handle),s=0;s<this.ticks.length;s++)this._addClass(this.ticks[s],this.options.handle);if(this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos],this.setValue(this._state.value),this.handle1Keydown=this._keydown.bind(this,0),this.handle1.addEventListener("keydown",this.handle1Keydown,!1),this.handle2Keydown=this._keydown.bind(this,1),this.handle2.addEventListener("keydown",this.handle2Keydown,!1),this.mousedown=this._mousedown.bind(this),this.touchstart=this._touchstart.bind(this),this.touchmove=this._touchmove.bind(this),this.touchCapable){var P=!1;try{var j=Object.defineProperty({},"passive",{get:function(){P=!0}});window.addEventListener("test",null,j)}catch(t){}var H=!!P&&{passive:!0};this.sliderElem.addEventListener("touchstart",this.touchstart,H),this.sliderElem.addEventListener("touchmove",this.touchmove,H)}if(this.sliderElem.addEventListener("mousedown",this.mousedown,!1),this.resize=this._resize.bind(this),window.addEventListener("resize",this.resize,!1),"hide"===this.options.tooltip)this._addClass(this.tooltip,"hide"),this._addClass(this.tooltip_min,"hide"),this._addClass(this.tooltip_max,"hide");else if("always"===this.options.tooltip)this._showTooltip(),this._alwaysShowTooltip=!0;else{if(this.showTooltip=this._showTooltip.bind(this),this.hideTooltip=this._hideTooltip.bind(this),this.options.ticks_tooltip){var M=this._addTickListener(),R=M.addMouseEnter(this,this.handle1),F=M.addMouseLeave(this,this.handle1);this.handleCallbackMap.handle1={mouseEnter:R,mouseLeave:F},R=M.addMouseEnter(this,this.handle2),F=M.addMouseLeave(this,this.handle2),this.handleCallbackMap.handle2={mouseEnter:R,mouseLeave:F}}else this.sliderElem.addEventListener("mouseenter",this.showTooltip,!1),this.sliderElem.addEventListener("mouseleave",this.hideTooltip,!1);this.handle1.addEventListener("focus",this.showTooltip,!1),this.handle1.addEventListener("blur",this.hideTooltip,!1),this.handle2.addEventListener("focus",this.showTooltip,!1),this.handle2.addEventListener("blur",this.hideTooltip,!1)}this.options.enabled?this.enable():this.disable()}var i=function(t){return"Invalid input value '"+t+"' passed in"},o={linear:{toValue:function(t){var e=t/100*(this.options.max-this.options.min),n=!0;if(this.options.ticks_positions.length>0){for(var i,o,r,s=0,a=1;a<this.options.ticks_positions.length;a++)if(t<=this.options.ticks_positions[a]){i=this.options.ticks[a-1],r=this.options.ticks_positions[a-1],o=this.options.ticks[a],s=this.options.ticks_positions[a];break}e=i+(t-r)/(s-r)*(o-i),n=!1}var l=(n?this.options.min:0)+Math.round(e/this.options.step)*this.options.step;return l<this.options.min?this.options.min:l>this.options.max?this.options.max:l},toPercentage:function(t){if(this.options.max===this.options.min)return 0;if(this.options.ticks_positions.length>0){for(var e,n,i,o=0,r=0;r<this.options.ticks.length;r++)if(t<=this.options.ticks[r]){e=r>0?this.options.ticks[r-1]:0,i=r>0?this.options.ticks_positions[r-1]:0,n=this.options.ticks[r],o=this.options.ticks_positions[r];break}if(r>0){return i+(t-e)/(n-e)*(o-i)}}return 100*(t-this.options.min)/(this.options.max-this.options.min)}},logarithmic:{toValue:function(t){var e=0===this.options.min?0:Math.log(this.options.min),n=Math.log(this.options.max),i=Math.exp(e+(n-e)*t/100);return Math.round(i)===this.options.max?this.options.max:(i=this.options.min+Math.round((i-this.options.min)/this.options.step)*this.options.step)<this.options.min?this.options.min:i>this.options.max?this.options.max:i},toPercentage:function(t){if(this.options.max===this.options.min)return 0;var e=Math.log(this.options.max),n=0===this.options.min?0:Math.log(this.options.min);return 100*((0===t?0:Math.log(t))-n)/(e-n)}}};if(e=function(t,e){return n.call(this,t,e),this},e.prototype={_init:function(){},constructor:e,defaultOptions:{id:"",min:0,max:10,step:1,precision:0,orientation:"horizontal",value:5,range:!1,selection:"before",tooltip:"show",tooltip_split:!1,handle:"round",reversed:!1,rtl:"auto",enabled:!0,formatter:function(t){return Array.isArray(t)?t[0]+" : "+t[1]:t},natural_arrow_keys:!1,ticks:[],ticks_positions:[],ticks_labels:[],ticks_snap_bounds:0,ticks_tooltip:!1,scale:"linear",focus:!1,tooltip_position:null,labelledby:null,rangeHighlights:[]},getElement:function(){return this.sliderElem},getValue:function(){return this.options.range?this._state.value:this._state.value[0]},setValue:function(t,e,n){t||(t=0);var i=this.getValue();this._state.value=this._validateInputValue(t);var o=this._applyPrecision.bind(this);this.options.range?(this._state.value[0]=o(this._state.value[0]),this._state.value[1]=o(this._state.value[1]),this._state.value[0]=Math.max(this.options.min,Math.min(this.options.max,this._state.value[0])),this._state.value[1]=Math.max(this.options.min,Math.min(this.options.max,this._state.value[1]))):(this._state.value=o(this._state.value),this._state.value=[Math.max(this.options.min,Math.min(this.options.max,this._state.value))],this._addClass(this.handle2,"hide"),"after"===this.options.selection?this._state.value[1]=this.options.max:this._state.value[1]=this.options.min),this.options.max>this.options.min?this._state.percentage=[this._toPercentage(this._state.value[0]),this._toPercentage(this._state.value[1]),100*this.options.step/(this.options.max-this.options.min)]:this._state.percentage=[0,0,100],this._layout();var r=this.options.range?this._state.value:this._state.value[0];return this._setDataVal(r),!0===e&&this._trigger("slide",r),i!==r&&!0===n&&this._trigger("change",{oldValue:i,newValue:r}),this},destroy:function(){this._removeSliderEventHandlers(),this.sliderElem.parentNode.removeChild(this.sliderElem),this.element.style.display="",this._cleanUpEventCallbacksMap(),this.element.removeAttribute("data"),t&&(this._unbindJQueryEventHandlers(),this.$element.removeData("slider"))},disable:function(){return this._state.enabled=!1,this.handle1.removeAttribute("tabindex"),this.handle2.removeAttribute("tabindex"),this._addClass(this.sliderElem,"slider-disabled"),this._trigger("slideDisabled"),this},enable:function(){return this._state.enabled=!0,this.handle1.setAttribute("tabindex",0),this.handle2.setAttribute("tabindex",0),this._removeClass(this.sliderElem,"slider-disabled"),this._trigger("slideEnabled"),this},toggle:function(){return this._state.enabled?this.disable():this.enable(),this},isEnabled:function(){return this._state.enabled},on:function(t,e){return this._bindNonQueryEventHandler(t,e),this},off:function(e,n){t?(this.$element.off(e,n),this.$sliderElem.off(e,n)):this._unbindNonQueryEventHandler(e,n)},getAttribute:function(t){return t?this.options[t]:this.options},setAttribute:function(t,e){return this.options[t]=e,this},refresh:function(){return this._removeSliderEventHandlers(),n.call(this,this.element,this.options),t&&t.data(this.element,"slider",this),this},relayout:function(){return this._resize(),this._layout(),this},_removeSliderEventHandlers:function(){if(this.handle1.removeEventListener("keydown",this.handle1Keydown,!1),this.handle2.removeEventListener("keydown",this.handle2Keydown,!1),this.options.ticks_tooltip){for(var t=this.ticksContainer.getElementsByClassName("slider-tick"),e=0;e<t.length;e++)t[e].removeEventListener("mouseenter",this.ticksCallbackMap[e].mouseEnter,!1),t[e].removeEventListener("mouseleave",this.ticksCallbackMap[e].mouseLeave,!1);this.handle1.removeEventListener("mouseenter",this.handleCallbackMap.handle1.mouseEnter,!1),this.handle2.removeEventListener("mouseenter",this.handleCallbackMap.handle2.mouseEnter,!1),this.handle1.removeEventListener("mouseleave",this.handleCallbackMap.handle1.mouseLeave,!1),this.handle2.removeEventListener("mouseleave",this.handleCallbackMap.handle2.mouseLeave,!1)}this.handleCallbackMap=null,this.ticksCallbackMap=null,this.showTooltip&&(this.handle1.removeEventListener("focus",this.showTooltip,!1),this.handle2.removeEventListener("focus",this.showTooltip,!1)),this.hideTooltip&&(this.handle1.removeEventListener("blur",this.hideTooltip,!1),this.handle2.removeEventListener("blur",this.hideTooltip,!1)),this.showTooltip&&this.sliderElem.removeEventListener("mouseenter",this.showTooltip,!1),this.hideTooltip&&this.sliderElem.removeEventListener("mouseleave",this.hideTooltip,!1),this.sliderElem.removeEventListener("touchstart",this.touchstart,!1),this.sliderElem.removeEventListener("touchmove",this.touchmove,!1),this.sliderElem.removeEventListener("mousedown",this.mousedown,!1),window.removeEventListener("resize",this.resize,!1)},_bindNonQueryEventHandler:function(t,e){void 0===this.eventToCallbackMap[t]&&(this.eventToCallbackMap[t]=[]),this.eventToCallbackMap[t].push(e)},_unbindNonQueryEventHandler:function(t,e){var n=this.eventToCallbackMap[t];if(void 0!==n)for(var i=0;i<n.length;i++)if(n[i]===e){n.splice(i,1);break}},_cleanUpEventCallbacksMap:function(){for(var t=Object.keys(this.eventToCallbackMap),e=0;e<t.length;e++){var n=t[e];delete this.eventToCallbackMap[n]}},_showTooltip:function(){!1===this.options.tooltip_split?(this._addClass(this.tooltip,"in"),this.tooltip_min.style.display="none",this.tooltip_max.style.display="none"):(this._addClass(this.tooltip_min,"in"),this._addClass(this.tooltip_max,"in"),this.tooltip.style.display="none"),this._state.over=!0},_hideTooltip:function(){!1===this._state.inDrag&&!0!==this.alwaysShowTooltip&&(this._removeClass(this.tooltip,"in"),this._removeClass(this.tooltip_min,"in"),this._removeClass(this.tooltip_max,"in")),this._state.over=!1},_setToolTipOnMouseOver:function(t){function e(t,e){return e?[100-t.percentage[0],this.options.range?100-t.percentage[1]:t.percentage[1]]:[t.percentage[0],t.percentage[1]]}var n=this.options.formatter(t?t.value[0]:this._state.value[0]),i=t?e(t,this.options.reversed):e(this._state,this.options.reversed);this._setText(this.tooltipInner,n),this.tooltip.style[this.stylePos]=i[0]+"%"},_addTickListener:function(){return{addMouseEnter:function(t,e,n){var i=function(){var e=t._state,i=n>=0?n:this.attributes["aria-valuenow"].value,o=parseInt(i,10);e.value[0]=o,e.percentage[0]=t.options.ticks_positions[o],t._setToolTipOnMouseOver(e),t._showTooltip()};return e.addEventListener("mouseenter",i,!1),i},addMouseLeave:function(t,e){var n=function(){t._hideTooltip()};return e.addEventListener("mouseleave",n,!1),n}}},_layout:function(){var t;if(t=this.options.reversed?[100-this._state.percentage[0],this.options.range?100-this._state.percentage[1]:this._state.percentage[1]]:[this._state.percentage[0],this._state.percentage[1]],this.handle1.style[this.stylePos]=t[0]+"%",this.handle1.setAttribute("aria-valuenow",this._state.value[0]),isNaN(this.options.formatter(this._state.value[0]))&&this.handle1.setAttribute("aria-valuetext",this.options.formatter(this._state.value[0])),this.handle2.style[this.stylePos]=t[1]+"%",this.handle2.setAttribute("aria-valuenow",this._state.value[1]),isNaN(this.options.formatter(this._state.value[1]))&&this.handle2.setAttribute("aria-valuetext",this.options.formatter(this._state.value[1])),this.rangeHighlightElements.length>0&&Array.isArray(this.options.rangeHighlights)&&this.options.rangeHighlights.length>0)for(var e=0;e<this.options.rangeHighlights.length;e++){var n=this._toPercentage(this.options.rangeHighlights[e].start),i=this._toPercentage(this.options.rangeHighlights[e].end);if(this.options.reversed){var o=100-i;i=100-n,n=o}var r=this._createHighlightRange(n,i);r?"vertical"===this.options.orientation?(this.rangeHighlightElements[e].style.top=r.start+"%",this.rangeHighlightElements[e].style.height=r.size+"%"):(this.options.rtl?this.rangeHighlightElements[e].style.right=r.start+"%":this.rangeHighlightElements[e].style.left=r.start+"%",this.rangeHighlightElements[e].style.width=r.size+"%"):this.rangeHighlightElements[e].style.display="none"}if(Array.isArray(this.options.ticks)&&this.options.ticks.length>0){var s,a="vertical"===this.options.orientation?"height":"width";s="vertical"===this.options.orientation?"marginTop":this.options.rtl?"marginRight":"marginLeft";var l=this._state.size/(this.options.ticks.length-1);if(this.tickLabelContainer){var h=0;if(0===this.options.ticks_positions.length)"vertical"!==this.options.orientation&&(this.tickLabelContainer.style[s]=-l/2+"px"),h=this.tickLabelContainer.offsetHeight;else for(u=0;u<this.tickLabelContainer.childNodes.length;u++)this.tickLabelContainer.childNodes[u].offsetHeight>h&&(h=this.tickLabelContainer.childNodes[u].offsetHeight);"horizontal"===this.options.orientation&&(this.sliderElem.style.marginBottom=h+"px")}for(var u=0;u<this.options.ticks.length;u++){var c=this.options.ticks_positions[u]||this._toPercentage(this.options.ticks[u]);this.options.reversed&&(c=100-c),this.ticks[u].style[this.stylePos]=c+"%",this._removeClass(this.ticks[u],"in-selection"),this.options.range?c>=t[0]&&c<=t[1]&&this._addClass(this.ticks[u],"in-selection"):"after"===this.options.selection&&c>=t[0]?this._addClass(this.ticks[u],"in-selection"):"before"===this.options.selection&&c<=t[0]&&this._addClass(this.ticks[u],"in-selection"),this.tickLabels[u]&&(this.tickLabels[u].style[a]=l+"px","vertical"!==this.options.orientation&&void 0!==this.options.ticks_positions[u]?(this.tickLabels[u].style.position="absolute",this.tickLabels[u].style[this.stylePos]=c+"%",this.tickLabels[u].style[s]=-l/2+"px"):"vertical"===this.options.orientation&&(this.options.rtl?this.tickLabels[u].style.marginRight=this.sliderElem.offsetWidth+"px":this.tickLabels[u].style.marginLeft=this.sliderElem.offsetWidth+"px",this.tickLabelContainer.style[s]=this.sliderElem.offsetWidth/2*-1+"px"))}}var f;if(this.options.range){f=this.options.formatter(this._state.value),this._setText(this.tooltipInner,f),this.tooltip.style[this.stylePos]=(t[1]+t[0])/2+"%";var d=this.options.formatter(this._state.value[0]);this._setText(this.tooltipInner_min,d);var p=this.options.formatter(this._state.value[1]);this._setText(this.tooltipInner_max,p),this.tooltip_min.style[this.stylePos]=t[0]+"%",this.tooltip_max.style[this.stylePos]=t[1]+"%"}else f=this.options.formatter(this._state.value[0]),this._setText(this.tooltipInner,f),this.tooltip.style[this.stylePos]=t[0]+"%";if("vertical"===this.options.orientation)this.trackLow.style.top="0",this.trackLow.style.height=Math.min(t[0],t[1])+"%",this.trackSelection.style.top=Math.min(t[0],t[1])+"%",this.trackSelection.style.height=Math.abs(t[0]-t[1])+"%",this.trackHigh.style.bottom="0",this.trackHigh.style.height=100-Math.min(t[0],t[1])-Math.abs(t[0]-t[1])+"%";else{"right"===this.stylePos?this.trackLow.style.right="0":this.trackLow.style.left="0",this.trackLow.style.width=Math.min(t[0],t[1])+"%","right"===this.stylePos?this.trackSelection.style.right=Math.min(t[0],t[1])+"%":this.trackSelection.style.left=Math.min(t[0],t[1])+"%",this.trackSelection.style.width=Math.abs(t[0]-t[1])+"%","right"===this.stylePos?this.trackHigh.style.left="0":this.trackHigh.style.right="0",this.trackHigh.style.width=100-Math.min(t[0],t[1])-Math.abs(t[0]-t[1])+"%";var m=this.tooltip_min.getBoundingClientRect(),g=this.tooltip_max.getBoundingClientRect();"bottom"===this.options.tooltip_position?m.right>g.left?(this._removeClass(this.tooltip_max,"bottom"),this._addClass(this.tooltip_max,"top"),this.tooltip_max.style.top="",this.tooltip_max.style.bottom="22px"):(this._removeClass(this.tooltip_max,"top"),this._addClass(this.tooltip_max,"bottom"),this.tooltip_max.style.top=this.tooltip_min.style.top,this.tooltip_max.style.bottom=""):m.right>g.left?(this._removeClass(this.tooltip_max,"top"),this._addClass(this.tooltip_max,"bottom"),this.tooltip_max.style.top="18px"):(this._removeClass(this.tooltip_max,"bottom"),this._addClass(this.tooltip_max,"top"),this.tooltip_max.style.top=this.tooltip_min.style.top)}},_createHighlightRange:function(t,e){return this._isHighlightRange(t,e)?t>e?{start:e,size:t-e}:{start:t,size:e-t}:null},_isHighlightRange:function(t,e){return t>=0&&100>=t&&e>=0&&100>=e},_resize:function(t){this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos],this._layout()},_removeProperty:function(t,e){t.style.removeProperty?t.style.removeProperty(e):t.style.removeAttribute(e)},_mousedown:function(t){if(!this._state.enabled)return!1;this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos];var e=this._getPercentage(t);if(this.options.range){var n=Math.abs(this._state.percentage[0]-e),i=Math.abs(this._state.percentage[1]-e);this._state.dragged=i>n?0:1,this._adjustPercentageForRangeSliders(e)}else this._state.dragged=0;this._state.percentage[this._state.dragged]=e,this._layout(),this.touchCapable&&(document.removeEventListener("touchmove",this.mousemove,!1),document.removeEventListener("touchend",this.mouseup,!1)),this.mousemove&&document.removeEventListener("mousemove",this.mousemove,!1),this.mouseup&&document.removeEventListener("mouseup",this.mouseup,!1),this.mousemove=this._mousemove.bind(this),this.mouseup=this._mouseup.bind(this),this.touchCapable&&(document.addEventListener("touchmove",this.mousemove,!1),document.addEventListener("touchend",this.mouseup,!1)),document.addEventListener("mousemove",this.mousemove,!1),document.addEventListener("mouseup",this.mouseup,!1),this._state.inDrag=!0;var o=this._calculateValue();return this._trigger("slideStart",o),this._setDataVal(o),this.setValue(o,!1,!0),t.returnValue=!1,this.options.focus&&this._triggerFocusOnHandle(this._state.dragged),!0},_touchstart:function(t){if(void 0!==t.changedTouches){var e=t.changedTouches[0];this.touchX=e.pageX,this.touchY=e.pageY}else this._mousedown(t)},_triggerFocusOnHandle:function(t){0===t&&this.handle1.focus(),1===t&&this.handle2.focus()},_keydown:function(t,e){if(!this._state.enabled)return!1;var n;switch(e.keyCode){case 37:case 40:n=-1;break;case 39:case 38:n=1}if(n){if(this.options.natural_arrow_keys){var i="vertical"===this.options.orientation&&!this.options.reversed,o="horizontal"===this.options.orientation&&this.options.reversed;(i||o)&&(n=-n)}var r=this._state.value[t]+n*this.options.step,s=r/this.options.max*100;if(this._state.keyCtrl=t,this.options.range){this._adjustPercentageForRangeSliders(s);r=[this._state.keyCtrl?this._state.value[0]:r,this._state.keyCtrl?r:this._state.value[1]]}return this._trigger("slideStart",r),this._setDataVal(r),this.setValue(r,!0,!0),this._setDataVal(r),this._trigger("slideStop",r),this._layout(),this._pauseEvent(e),delete this._state.keyCtrl,!1}},_pauseEvent:function(t){t.stopPropagation&&t.stopPropagation(),t.preventDefault&&t.preventDefault(),t.cancelBubble=!0,t.returnValue=!1},_mousemove:function(t){if(!this._state.enabled)return!1;var e=this._getPercentage(t);this._adjustPercentageForRangeSliders(e),this._state.percentage[this._state.dragged]=e,this._layout();var n=this._calculateValue(!0);return this.setValue(n,!0,!0),!1},_touchmove:function(t){if(void 0!==t.changedTouches){var e=t.changedTouches[0],n=e.pageX-this.touchX,i=e.pageY-this.touchY;this._state.inDrag||("vertical"===this.options.orientation&&5>=n&&n>=-5&&(i>=15||-15>=i)?this._mousedown(t):5>=i&&i>=-5&&(n>=15||-15>=n)&&this._mousedown(t))}},_adjustPercentageForRangeSliders:function(t){if(this.options.range){var e=this._getNumDigitsAfterDecimalPlace(t);e=e?e-1:0;var n=this._applyToFixedAndParseFloat(t,e);0===this._state.dragged&&this._applyToFixedAndParseFloat(this._state.percentage[1],e)<n?(this._state.percentage[0]=this._state.percentage[1],this._state.dragged=1):1===this._state.dragged&&this._applyToFixedAndParseFloat(this._state.percentage[0],e)>n?(this._state.percentage[1]=this._state.percentage[0],this._state.dragged=0):0===this._state.keyCtrl&&this._state.value[1]/this.options.max*100<t?(this._state.percentage[0]=this._state.percentage[1],this._state.keyCtrl=1,this.handle2.focus()):1===this._state.keyCtrl&&this._state.value[0]/this.options.max*100>t&&(this._state.percentage[1]=this._state.percentage[0],this._state.keyCtrl=0,this.handle1.focus())}},_mouseup:function(){if(!this._state.enabled)return!1;this.touchCapable&&(document.removeEventListener("touchmove",this.mousemove,!1),document.removeEventListener("touchend",this.mouseup,!1)),document.removeEventListener("mousemove",this.mousemove,!1),document.removeEventListener("mouseup",this.mouseup,!1),this._state.inDrag=!1,!1===this._state.over&&this._hideTooltip();var t=this._calculateValue(!0);return this._layout(),this._setDataVal(t),this._trigger("slideStop",t),!1},_calculateValue:function(t){var e;if(this.options.range?(e=[this.options.min,this.options.max],0!==this._state.percentage[0]&&(e[0]=this._toValue(this._state.percentage[0]),e[0]=this._applyPrecision(e[0])),100!==this._state.percentage[1]&&(e[1]=this._toValue(this._state.percentage[1]),e[1]=this._applyPrecision(e[1]))):(e=this._toValue(this._state.percentage[0]),e=parseFloat(e),e=this._applyPrecision(e)),t){for(var n=[e,1/0],i=0;i<this.options.ticks.length;i++){var o=Math.abs(this.options.ticks[i]-e);o<=n[1]&&(n=[this.options.ticks[i],o])}if(n[1]<=this.options.ticks_snap_bounds)return n[0]}return e},_applyPrecision:function(t){var e=this.options.precision||this._getNumDigitsAfterDecimalPlace(this.options.step);return this._applyToFixedAndParseFloat(t,e)},_getNumDigitsAfterDecimalPlace:function(t){var e=(""+t).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return e?Math.max(0,(e[1]?e[1].length:0)-(e[2]?+e[2]:0)):0},_applyToFixedAndParseFloat:function(t,e){var n=t.toFixed(e);return parseFloat(n)},_getPercentage:function(t){!this.touchCapable||"touchstart"!==t.type&&"touchmove"!==t.type||(t=t.touches[0]);var e=t[this.mousePos]-this._state.offset[this.stylePos];"right"===this.stylePos&&(e=-e);var n=e/this._state.size*100;return n=Math.round(n/this._state.percentage[2])*this._state.percentage[2],this.options.reversed&&(n=100-n),Math.max(0,Math.min(100,n))},_validateInputValue:function(t){if(isNaN(+t)){if(Array.isArray(t))return this._validateArray(t),t;throw new Error(i(t))}return+t},_validateArray:function(t){for(var e=0;e<t.length;e++){var n=t[e];if("number"!=typeof n)throw new Error(i(n))}},_setDataVal:function(t){this.element.setAttribute("data-value",t),this.element.setAttribute("value",t),this.element.value=t},_trigger:function(e,n){n=n||0===n?n:void 0;var i=this.eventToCallbackMap[e];if(i&&i.length)for(var o=0;o<i.length;o++){(0,i[o])(n)}t&&this._triggerJQueryEvent(e,n)},_triggerJQueryEvent:function(t,e){var n={type:t,value:e};this.$element.trigger(n),this.$sliderElem.trigger(n)},_unbindJQueryEventHandlers:function(){this.$element.off(),this.$sliderElem.off()},_setText:function(t,e){void 0!==t.textContent?t.textContent=e:void 0!==t.innerText&&(t.innerText=e)},_removeClass:function(t,e){for(var n=e.split(" "),i=t.className,o=0;o<n.length;o++){var r=n[o],s=new RegExp("(?:\\s|^)"+r+"(?:\\s|$)");i=i.replace(s," ")}t.className=i.trim()},_addClass:function(t,e){for(var n=e.split(" "),i=t.className,o=0;o<n.length;o++){var r=n[o];new RegExp("(?:\\s|^)"+r+"(?:\\s|$)").test(i)||(i+=" "+r)}t.className=i.trim()},_offsetLeft:function(t){return t.getBoundingClientRect().left},_offsetRight:function(t){return t.getBoundingClientRect().right},_offsetTop:function(t){for(var e=t.offsetTop;(t=t.offsetParent)&&!isNaN(t.offsetTop);)e+=t.offsetTop,"BODY"!==t.tagName&&(e-=t.scrollTop);return e},_offset:function(t){return{left:this._offsetLeft(t),right:this._offsetRight(t),top:this._offsetTop(t)}},_css:function(e,n,i){if(t)t.style(e,n,i);else{var o=n.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(t,e){return e.toUpperCase()});e.style[o]=i}},_toValue:function(t){return this.options.scale.toValue.apply(this,[t])},_toPercentage:function(t){return this.options.scale.toPercentage.apply(this,[t])},_setTooltipPosition:function(){var t=[this.tooltip,this.tooltip_min,this.tooltip_max];if("vertical"===this.options.orientation){var e,n="left"===(e=this.options.tooltip_position?this.options.tooltip_position:this.options.rtl?"left":"right")?"right":"left";t.forEach(function(t){this._addClass(t,e),t.style[n]="100%"}.bind(this))}else"bottom"===this.options.tooltip_position?t.forEach(function(t){this._addClass(t,"bottom"),t.style.top="22px"}.bind(this)):t.forEach(function(t){this._addClass(t,"top"),t.style.top=-this.tooltip.outerHeight-14+"px"}.bind(this))}},t&&t.fn){var r=void 0;t.fn.slider?(windowIsDefined&&window.console.warn("bootstrap-slider.js - WARNING: $.fn.slider namespace is already bound. Use the $.fn.bootstrapSlider namespace instead."),r="bootstrapSlider"):(t.bridget("slider",e),r="slider"),t.bridget("bootstrapSlider",e),t(function(){t("input[data-provide=slider]")[r]()})}}(t),e});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
